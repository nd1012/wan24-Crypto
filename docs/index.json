{
  "README.html": {
    "href": "README.html",
    "title": "wan24-Crypto | wan24-Crypto",
    "keywords": "wan24-Crypto This library exports a generic high level crypto API, which allows to use an implemented cryptographic algorithm to be applied using a simple interface. It also implements abstract and configurable RNG handling, which uses a local (CS)RNG entropy source, if not overridden and extended with a customized RNG algorithm, which may use a physical entropy source, too. Per default these cryptographic algorithms are implemented: Usage Algorithm Hashing MD5 SHA-1 SHA-256 SHA-384 SHA-512 SHA3-256 SHA3-384 SHA3-512 Shake128 Shake256 MAC HMAC-SHA-1 HMAC-SHA-256 HMAC-SHA-384 HMAC-SHA-512 HMAC-SHA3-256 HMAC-SHA3-384 HMAC-SHA3-512 Symmetric encryption AES-256-CBC (ISO10126 padding) Asymmetric keys Elliptic Curve Diffie Hellman Elliptic Curve DSA (RFC 3279 signatures) KDF key stretching PBKDF#2 (250,000 iterations per default) SP 800-108 HMAC CTR KBKDF These elliptic curves are supported at present: secp256r1 secp384r1 secp521r1 The number of algorithms can be extended easy, a bunch of additional libraries implementing more algorithms (and probably more elliptic curves) will follow soon. The goals of this library are: Make a choice being a less torture Make a complex thing as easy as possible Implementing (new) cryptographic algorithms into (existing) code can be challenging. wan24-Crypto tries to make it as easy as possible, while the API is still complex due to the huge number of options it offers. Please see the Wiki for examples of the most common use cases, which cover: Simple encryption using a password Advanced encryption using a private PFS key Advanced encryption using a private PFS key and hybrid key exchange Advanced encryption using a peers public key Advanced encryption using a peers public key and hybrid key exchange For more examples please open an issue - I'd be glad to help! If you've found a security issue, please report it private. NOTE: The cipher output of this library may include a header, which can't (yet) be interpreted by any third party vendor code (which is true especially if the raw data was compressed before encryption, which is the default). That means, a cipher output of this library can't be decrypted with a third party crypto library, even this library implements standard cryptographic algorithms. Using this library for a cipher which has to be exchanged with a third party application, which relies on working with standard crypto algorithm output, is not recommended - it may not work! Anyway, this library should be a good choice for isolated use within your application(s), if want to avoid a hussle with implementing newer crypto algorithms. How to get it This library is available as NuGet package. These extension NuGet packages are available: wan24-Crypto-BC (adopts some algorithms from Bouncy Castle) wan24-Crypto-NaCl (adopts the Argon2id KDF algorithm from NSec) wan24-Crypto-TPM (simplifies including TPM into your apps security) Usage In case you don't use the wan24-Core bootstrapper logic, you need to initialize the library first: wan24.Crypto.Bootstrap.Boot(); In case you work with dependency injection (DI), you may want to add some services: builder.Services.AddWan24Crypto(); WARNING: The factory default algorithms may not be available on every platform! The wan24-Crypto-BC extension library contains pure .NET implementations of most algorithms from wan24-Crypto, which can be used instead. Hashing byte[] hash = rawData.Hash(); The default hash algorithm ist SHA3-512. Shake128/256 hash algorithms The Shake128 and Shake256 hash algorithms support a variable output (hash) length. The default output length of the hash implementations of wan24-Crypto is 32 bytes for Shake128 64 bytes for Shake256 when using the HashHelper, the extension methods, or the HashShake128/256Algorithm instances directly. Anyway, if you need other output lengths, you may use the NetShake128/256HashAlgorithmAdapter classes, which allow to give the desired output length in bytes (a multiple of 8) to the constructor, and can be used as every other .NET HashAlgorithm implementation (also in a crypto stream/transform, for example). MAC byte[] mac = rawData.Mac(password); The default MAC algorithm is HMAC-SHA3-512. NOTE: The CryptoOptions.MacPassword won't be used here, since you have to specify the MAC password in the method call already. The MacPassword is only used during encryption, if it is different from the encryption key. KDF (key stretching) (byte[] stretchedPassword, byte[] salt) = password.Stretch(len: 64); The default KDF algorithm is PBKDF#2, using 250,000 iterations, with a salt length of 16 byte and SHA3-384 for hashing. TIP: You may override the default hash algorithm which is being used in a new options instance in the static KdfPbKdf2Options.DefaultHashAlgorithm property. Example options usage: (byte[] stretchedPassword, byte[] salt) = password.Stretch(len: 64, options: new KdfPbKdf2Options() { HashAlgorithm = HashSha3_512Algorithm.ALGORITHM_NAME });// KdfPbKdf2Options cast implicit to CryptoOptions NOTE: The SP 800-108 HMAC CTR KBKDF algorithm isn't available in a WASM app, and there's currently no pure .NET replacement included in the wan24-Crypto-BC library. It doesn't support iterations and salt (but a label and context value instead). Not all hash algorithms may be supported (you'll need to register custom hash algorithms to the .NET CryptoConfig). Encryption byte[] cipher = raw.Encrypt(password); byte[] decrypted = cipher.Decrypt(password); There are extension methods for memory and streams. The default algorithms used: Usage Algorithm Symmetric encryption AES-256-CBC MAC HMAC-SHA3-512 KDF PBKDF#2 Asymmetric key exchange EC Diffie Hellman Asymmetric digital signature EC DSA NOTE: The CryptoOptions.MacPassword will optionally be used, if an additional MAC is being computed, but it doesn't affect the AEAD included MAC, which is going to be calculated separately. If no MacPassword was set, the final encryption password is going to be used instead. Using asymmetric keys for encryption This way you encrypt using a stored private key (which will be required for decryption later): using IAsymmetricPrivateKey privateKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] cipher = raw.Encrypt(privateKey); byte[] decrypted = cipher.Decrypt(privateKey); In case you want to encrypt for a peer using the peers asymmetric public key for performing a PFS key exchange: // Peer creates a key pair (PFS or stored) and sends peerPublicKeyData to the provider using IAsymmetricPrivateKey peerPrivateKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] peerPublicKeyData = (byte[])peerPrivateKey.PublicKey;// Needs to be available at the provider // Encryption at the provider (pfsKey shouldn't be stored and can be a new key for every cipher message) using IAsymmetricPublicKey peerPublicKey = AsymmetricKeyBase.Import<IAsymmetricPublicKey>(peerPublicKeyData);// Deserialize the peers public key of any format CryptoOptions options = EncryptionHelper.GetDefaultOptions();// Add the asymmetric key information for key pair creation options.AsymmetricAlgorithm = peerPublicKey.Algorithm.Name; options.AsymmetricKeyBits = peerPublicKey.Bits; options.PublicKey = peerPublicKey;// Required for encrypting especially for the one specific peer byte[] cipher; using(IKeyExchangePrivateKey pfsKey = AsymmetricHelper.CreateKeyExchangeKeyPair(options)) cipher = raw.Encrypt(pfsKey, options);// Only the peer can decrypt the cipher after pfsKey was disposed // Decryption at the peer byte[] decrypted = cipher.Decrypt(peerPrivateKey, options); Time critical decryption It's possible to define a maximum age for cipher data, which can't be decrypted after expired: // Encryption CryptoOptions options = new() { TimeIncluded = true }; byte[] cipher = raw.Encrypt(password, options); // Decryption (required to be decrypted within 10 seconds, or the decryption will fail) options = new() { RequireTime = true, MaximumAge = TimeSpan.FromSeconds(10) } byte[] decrypted = cipher.Decrypt(password, options); By defining CryptoOptions.MaximumTimeOffset you may define a time tolerance which is being used to be tolerant with peers having a slightly different system time. Password pre-processing The CryptoOptions.EncryptionPassword(Async)PreProcessor delegates may pre- process an encryption password from CryptoOptions.Password before the key bytes are being finalized for use with the desired crypto engine. Key derivation from asymmetric keys and KDF are being applied before. The asynchronous delegate will only be used during asynchronous operations, while the synchronous delegate is a fallback during asynchronous operations, if no asynchronous delegate was set. The delegate itself need to set the final key to use to CryptoOptions.Password and should clear the current value. TIP: For setting a new password to CryptoOptions.Password use the CryptoOptions.SetNewPassword method. This method will clear the previous value, if any. Asymmetric keys Key exchange PFS example: // A: Create a key pair using IKeyExchangePrivateKey privateKeyA = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] publicKeyData = (byte[])privateKeyA.PublicKey.Export();// publicKeyData needs to be available at B // B: Create a key pair, key exchange data and derive the shared key using IAsymmetricPublicKey publicKeyA = AsymmetricKeyBase.Import<IAsymmetricPublicKey>(publicKeyData);// Deserialize the peers public key of any format using IKeyExchangePrivateKey privateKeyB = AsymmetricHelper.CreateKeyExchangeKeyPair(new() { AsymmetricAlgorithm = publicKeyA.Algorithm.Name, AsymmetricKeyBits = publicKeyA.Bits }); (byte[] keyB, byte[] keyExchangeData) = privateKeyB.GetKeyExchangeData(publicKeyA);// keyExchangeData needs to be available at A // A: Derive the exchanged key byte[] keyA = privateKeyA.DeriveKey(keyExchangeData); Assert.IsTrue(keyA.SequenceEquals(keyB)); The default key exchange algorithm is ECDH from a secp521r1 elliptic curve. IKeyExchange interface All asymmetric private keys which can be used for a key exchange implement the IKeyExchange interface. This interface is also used for PAKE, for example. By working with this interface, it's possible to implement more abstract key exchange routines: // Initiator side (byte[] keyA, byte[] keyExchangeData) = initiatorKeyExchangeProcessor.GetKeyExchangeData(); // Transfer keyExchangeData to the peer using a secure communication channel // Peer side byte[] keyB = peerKeyExchangeProcessor.DeriveKey(keyExchangeData); Assert.IsTrue(keyA.SequenceEquals(keyB)); initiatorKeyExchangeProcessor and peerKeyExchangeProcessor are IKeyExchange instances and may be an asymmetric private key, or a PAKE instance, for example. Both peers need to agree to the same key exchange method, first. And both peers need to use a key exchange processor which can produce/take the key exchange data of the initiator. NOTE: The PrivateKeySuite implements IKeyExchange using the managed KeyExchangeKey, if any. Digital signature // Create a key pair for signature using ISignaturePrivateKey privateKey = AsymmetricHelper.CreateSignatureKeyPair(); // Sign data SignatureContainer signature = privateKey.SignData(anyData); // Validate a signature privateKey.PublicKey.ValidateSignature(signature, anyData); The default signature algorithm is ECDSA from a secp521r1 elliptic curve. Value protection The ValueProtection contains some static methods for protecting a value in a specified scope: value = ValueProtection.Protect(value); value = ValueProtection.Unprotect(value); There are 3 scopes, which may be given as parameter: System: System (permanent system bound protection) User: Current user (permanent user bound protection) Process: Current process (default; for non-permanent protection only!) The scope keys will be set automatic, but may be replaced with your own logic. Per default the keys are generated like this: System: Hash of application location and machine name User: Hash of user domain and name, application location and machine name Process: Random data WARNING: Setting new keys isn't thread-safe! The Protect and Unprotect methods are delegate properties which can be exchanged. For example for Windows and Linux OS you may want to use different approaches. For protecting a value it'll be encrypted using the current default encryption options. Using the ValueProtectionLevels you can manage keys for a specific security requirement by defining keys using the ValueProtectionKeys.Set method, and getting them later using the ValueProtectionKeys.Get method. The protection levels include variations for the system (mashine) and user level, with or without TPM (for TPM usage the wan24-Crypto-TPM module is required) and optional with an online key storage and/or a manual entered user password (the online key storage and user password input needs to be implemented by yourself): // userPassword should be entered manually whenever it's required to (un)protect a value byte[] protectedValue = ValueProtectionLevels.UserTpmPassword.Protect(value, userPassword); // protectedValue is ready to be stored for the current user scope byte[] unprotectedValue = ValueProtectionLevels.UserTpmPassword.Unprotect(protectedValue, userPassword); The ValueProtectionKeys is used to (re)store a protection key for each level using the Set(2) and (Try)Get methods. It uses a ISecureValue for serious key protection: ValueProtectionKeys.Set(ValueProtectionLevels.UserTpmPassword, protectionKey, userPassword); NOTE: While the Set method requires a ISecureValue, the Set2 method creates a SecureValue from the protectionKey byte array parameter. The (Try)Get methods will return the final key to use (after MAC, if applicable). Stored keys will be protected for the according scope using ValueProtection. You may use the extension method ValueProtectionLevels.*.Protect/Unprotect for protecting/unprotecting a value, or the raw protection key which is being returned from the ValueProtectionKeys.(Try)Get methods for applying en-/decryption of values by yourself. To determine the capabilities of a protection level, you can use these ValueProtectionLevels extension methods: RequiresPasswordInput: If a manual entered user password is required RequiresTpm: If a TPM is required RequiresNetwork: If an online key storage is required GetScope: Determines the according ValueProtection.Scope enumeration value NOTE: In order to be able to use the TPM protection levels, wan24-Crypto-TPM and a TPM must be available. The protection levels including online communication require implementing an online key storage service. ValueProtectionKeys does support a single user context only (it's designed for an app which runs in a specific user context). WARNING: For each value protection level that you want to use you'll need to set a key using ValueProtectionKeys.Set(2), which is not thread-safe. Too many options? The CryptoOptions contains a huge collection of properties, which follow a simple pattern in case of en-/decryption: Which information should be included in the cipher header, and is an information in the header required? Because the options include information for all sections, there are single values which belongs to the specific section only. If you separate the options into sections, it's easy to overview: Section Property Description Default value Encryption Algorithm Encryption algorithm name null (AES256CBC) EncryptionOptions String serialized encryption options null EncryptionPasswordPreProcessor Delegate for pre-processing an encryption password (the default can be set to DefaultEncryptionPasswordPreProcessor) null EncryptionPasswordAsyncPreProcessor Delegate for pre-processing an encryption password (only applied during asynchronous operation; the default can be set to DefaultEncryptionPasswordAsyncPreProcessor) null FlagsIncluded Are the flags included in the header? true RequireFlags Are the flags required to be included in the header? true PrivateKeysStore Private keys store to use for decryption, using automatic key suite revision selection (the default can be set to DefaultPrivateKeysStore) null PrivateKeyRevision Revision of the used private key suite (may be set automatic) 0 PrivateKeyRevisionIncluded Is the private key suite revision included in the header? true, if a DefaultPrivateKeysStore was set RequirePrivateKeyRevision Is the private key suite revision required to be included in the header? true, if a DefaultPrivateKeysStore was set RngSeeding RNG seeding options (overrides RND.AutoRngSeeding) null MAC MacAlgorithm MAC algorithm name null (HMAC-SHA3-512) MacIncluded Include a MAC in the header true RequireMac Is the MAC required in the header? true CounterMacAlgorithm Counter MAC algorithm name null CounterMacIncluded Include a counter MAC in the header false RequireCounterMac Is the counter MAC required in the header? false ForceMacCoverWhole Force the MAC to cover all data false RequireMacCoverWhole Is the MAC required to cover all data? false MacPassword Password to use for a MAC null Encryption / Key creation / Signature AsymmetricAlgorithm Asymmetric algorithm name null (ECDH for encryption, ECDSA for signature) AsymmetricAlgorithmOptions String serialized algorithm options null AsymmetricCounterAlgorithm Asymmetric counter algorithm name null KeyExchangeData Key exchange data (includes counter key exchange data; generated automatic) null RequireKeyExchangeData Is the key exchange data required in the header? false PrivateKey Private key for key exchange null CounterPrivateKey Private key for counter key exchange (required when using a counter asymmetric algorithm) null PublicKey Public key for key exchange (if not using a PFS key) null CounterPublicKey Public key for counter key exchange (required when using a counter asymmetric algorithm and not using a PFS key) null KDF KdfAlgorithm KDF algorithm name null (PBKDF2) KdfIterations KDF iteration count 1 KdfOptions String serialized KDF algorithm options null KdfSalt KDF salt (generated automatic) null KdfAlgorithmIncluded Include the KDF information in the header true RequireKdfAlgorithm Is the KDF information required in the header? true CounterKdfAlgorithm Counter KDF algorithm name null CounterKdfIterations Counter KDF iteration count 1 CounterKdfOptions String serialized KDF algorithm options null CounterKdfSalt Counter KDF salt (generated automatic) null CounterKdfAlgorithmIncluded Include the counter KDF information in the header false RequireCounterKdfAlgorithm Is the counter KDF information required in the header? false Payload PayloadData Plain payload null PayloadIncluded Is the payload object data included in the header? false RequirePayload Is payload object data required in the header? false Serializer version CustomSerializerVersion Serializer version number (set automatic) null SerializerVersionIncluded Include the serializer version number in the header true RequireSerializerVersion Is the serializer version number required in the header? true Header version HeaderVersion Header version number (set automatic) 1 HeaderVersionIncluded Is the header version included in the header? true RequireHeaderVersion Is the header version required in the header? true Encryption time Time Encryption timestamp (UTC) null TimeIncluded Is the encryption time included in the header? false RequireTime Is the encryption time required to be included in the header? false MaximumAge Maximum age of cipher data (the default can be set to DefaultMaximumAge) null MaximumTimeOffset Maximum time offset for a peer with a different system time (the default can be set to DefaultMaximumTimeOffset) null Compression Compressed Should the raw data be compressed before encryption? true Compression The CompressionOptions instance to use (will be set automatic, if not given) null MaxUncompressedDataLength Maximum uncompressed data length in bytes (when decrypting) -1 Hashing / Signature HashAlgorithm The name of the hash algorithm to use null (SHA3-512) Key creation AsymmetricKeyBits Key size in bits to use for creating a new asymmetric key pair 1 Stream options LeaveOpen Leave the processing stream open after operation? false Debug options Tracer Collects tracing information during en-/decryption null Other options, which are not listed here, are used internal only. If you use a new instance of CryptoOptions, all defaults will be applied. You can override these defaults in the static *Helper.Default* properties, or by setting other values in the CryptoOptions instance, which you use when calling any method. For encryption these sections matter: Encryption MAC PFS KDF Payload Serializer version Header version Encryption time Compression Stream options In case you want to use the *Counter* options, you'll need to set the CounterPrivateKey value. For MAC these sections matter: MAC Stream options For hashing these sections matter: Hashing Stream options For asymmetric key creation the \"Key creation\" section matters. For signature these sections matter: Signature Hashing Stream options The CryptoEnvironment helps configuring the whole wan24-Crypto environment at once by providing an options class which contains all the options that one might miss, when not knowing where to look at: CryptoEnvironment.Configure(new() { ... }); NOTE: See the developer reference for details of the CryptoEnvironment.Options class. Options will only be applied, if they have a non-null value. The CryptoEnvironment has also some static properties for storing some singleton instances (which are used as default for the configurable options). Crypto suite You can use a CryptoOptions instance as crypto suite. The type can be binary serialized (using the Stream-Serializer-Extensions) for storing/restoring to/from anywhere. NOTE: Only crypto suite relevant information will be serialized! This excludes: SerializerVersion HeaderVersion PrivateKeystore (needs to be stored in another place; a default can be set in DefaultPrivateKeysStore) PrivateKeyRevision (will be managed automatic) PrivateKey (needs to be stored in another place) CounterPrivateKey (needs to be stored in another place) PublicKey CounterPublicKey KeyExchangeData PayloadData Time LeaveOpen MacPosition Mac HeaderProcessed Password MacPassword Tracer PKI Using the AsymmetricSignedPublicKey type, you can implement a simple PKI, which allows to define trusted root keys define a key revocation list sign public keys validate signed public keys until the root signer key // Create the root key pair using ISignaturePrivateKey privateRootKey = AsymmetricHelper.CreateSignatureKeyPair(); // Self-sign the public root key using AsymmetricSignedPublicKey signedPublicRootKey = new(privateRootKey.PublicKey); signedPublicRootKey.Sign(privateRootKey); // Create a key pair, which will be signed, and a signing request using ISignaturePrivateKey privateKey = AsymmetricHelper.CreateSignatureKeyPair(); using AsymmetricPublicKeySigningRequest signingRequest = new(privateKey.PublicKey); // Sign the public key using AsymmetricSignedPublicKey signedPublicKey = signingRequest.GetAsUnsignedKey(); signedPublicKey.Sign(privateRootKey); // Setup the PKI (minimal setup for signed public key validation) AsymmetricSignedPublicKey.RootTrust = // Normally you would have a DBMS which stores the trusted public key IDs (id) => id.SequenceEqual(privateRootKey.ID); AsymmetricSignedPublicKey.SignedPublicKeyStore = (id) => { // Normally you would have a DBMS which stores the known keys if(id.SequenceEqual(privateRootKey.ID)) return signedPublicRootKey; if(id.SequenceEqual(privateKey.ID)) return signedPublicKey; return null; }; // Normally you would have a DBMS which stores a revocation list for AsymmetricSignedPublicKey.SignedPublicKeyRevocation // Validate the signed public key signedPublicKey.Validate(); As you can see, it's a really simple PKI implementation. It's good for internal use, and if there won't be too many keys to manage. For managing a larger amount of keys, you can use the SignedPkiStore: using SignedPkiStore pki = new(); pki.AddTrustedRoot(signedPublicRootKey); pki.AddGrantedKey(signedPublicKey); pki.EnableLocalPki(); By calling EnableLocalPki all PKI callbacks in AsymmetricSignedPublicKey will be set with methods from the SignedPkiStore instance. This allows signed key and signature validations using your PKI. The GetKey methods will find the hosted key with the given ID of the public key. The PKI may also host revoked keys. By revoking a key, it'll be removed from the trusted root/granted key tables, and GetKey will throw on key request. Signed attributes and other PKI extensions The signed attributes are fully customizable and not pre-defined at all, you're the designer of your own PKI implementation. In order you want some inspiration and ideas, you may have a look at the SignedAttributes class, wich contains some examples/suggestions for signed attributes and their names. Name Usage Domain PKI domain name to identify/validate the keys PKI OwnerId Foreign owner ID for loading meta data from a store (should be encrypted by the PKI host) KeyValidationUri URI that should point to a RESTful API for online key revokation validation GrantedKeyUsages Allowed usages for the signed key PkiSig Permitted to sign sub-keys KePublicKey Identifier of the public key for the key exchange with the owner KePublicCounterKey Identifier of the public counter key for the key exchange with the owner SigPublicKey Identifier of the public signature key of the owner SigPublicCounterKey Identifier of the public signature counter key of the owner CipherSuite Serialized CryptoOptions to use with the signed key owner Serial Serial number (the key revision of the owner context) Some key meta data like the creation and expiration time, or a nonce, is included in a lower level in the AsymmetricSignedPublicKey already, and don't need to appear in the signed attribute list again. A key signing request may also contain more attributes than the final signed key, if you want to give signing instructions to the PKI. The PKI may remove/replace/extend those instructions for signing. As said before, the list above doesn't need to be implemented fully, and it may be extended with any attribute that your PKI requires in addition. There are only suggestions for value formats - but how you implement it finally, is your business only. If you implement the suggested attributes and value formats, you'll have a fully usable PKI. In addition a key revokation list would be a nice feature (as a part of a RESTful PKI API). For a trusted root key list you could use the PublicKeySuiteStore, for example. A key revokation list may only contain the IDs of revoked keys, which are not yet expired. You can use the AsymmetricKeySigner as template for a key signing request handler, which supports the attributes from above. You should implement algorithm validation etc. for a key signing request by yourself, since such requirements are not really good to match with a basic API. For validating the signed attributes of a signing request or a signed key, you can use the SignedAttributes.Validate(Async) methods. Using the SignedAttributes.ValidationOptions you can specify common restrictions for the above listed default attributes. The validation will be executed also, if AsymmetricSignedPublicKey.Validate(Async) was called. For additional attribute validations you can set SignedAttributes.AdditionalValidation(Async) handlers. If no public key suite store was given, key exchange/signature keys will be looked up in the PKI, which was given in the options (CryptoEnvironment.PKI is being used per default). PAKE Pake (see tests) can be used for implementing a password authenticated key exchange, which should be wrapped with a PFS protocol in addition. PAKE uses symmetric cryptographic algorithms only and uses random bytes for session key generation. After signup, it can be seen as a symmetric PFS protocol, if the random bytes are random for each session and never stored as communicated between the peers. CAUTION: PAKE doesn't support counter algorithms! For working with PQ counter algorithms, you'll have to combine two PAKE with different options by yourself. NOTE: For PAKE both peers need to use the same KDF and MAC options. If the algorithm is going to be changed, a new signup has to be performed. In case a peer changes its authentication (identifier or key), a new signup operation has to be performed, too. A signup should always be performed using an additional factor, which was communicated using another transport. An authentication may use a second factor, while it's recommended to use at last two factors for each operation. PAKE allows single directional authenticated messages and should be performed bi-directional for a bi-directional communication, if possible. While a MAC can be computed fast, KDF needs time. During a PAKE handshake both algorithms are used on both peers. But the server will perform KDF only after a MAC was validated, which closes a door for DoS attacks by an anonymous attacker. NOTE: Default options for PAKE can be overridden by setting a custom value to Pake.DefaultOptions. FastPakeClient/Server allow fast followup authentications after the first authentication of an already known peer (after a signup was performed). They're designed to be alive for a longer time, if the server expects a client to perform multiple authentications. They're good for a single-directional UDP protocol, for example, where each message is PAKE authenticated, and each followup message is encrypted using the session key of the first authentication message. NOTE: This PAKE implementation is patent free! Client/server authentication protocol Asymmetric keys + PAKE wan24-Crypto implements a client/server authentication protocol for stream connections (like a TCP NetworkStream). This protocol allows server public key request signup authentication while all features are optional. It implements Zero Knowledge Password Proof (ZKPP) and Perfect Forward Secrecy (PFS). During a signup an asymmetric public key of the client can be signed by the server for long term use. The authentication is encrypted using (hopefully pre-shared) server public keys and PFS keys PAKE If the public servers keys are not pre-shared, a PKI should be used to ensure working with valid keys. See the tests (Auth_Tests.cs) for an example of a simple but working client/ server implementation. On signup, the server needs to store the PAKE identity and the clients public keys, which then need to be provided for a later authentication process. The ClientAuthContext has all the information required to handle a signup or an authentication, and it contains the exchanged PFS session key for encrypted communication, too. For optimal security (in 2023), you should use an asymmetric PQC algorithm for the key exchange and signature key, and a common non-PQC algorithm as counter key exchange and signature key. You can find asymmetric PQC algorithms in the wan24-Crypto-BC library, for example. NOTE: Login username and password won't be communicated to the server. If any authentication related information changes, a follow-up signup needs to be performed. The signup process (as seen from the client; is bi-directional always): Send the clients public PFS key Start encryption using the servers public key and a private PFS key of the client Send the clients public counter PFS key Extend the encryption using the servers public counter key and a private PFS key of the client Send the PAKE signup request and extend the encryption using the PAKE session key (the request contains the public key suite and a key signing request, if this is the signup of a new user, or the public key suite changed) Sign the authentication sequence using the private client key Validate the server signature of the authentication sequence Receive the servers public PFS key Extend the encryption using the private key and the servers public PFS key Receive the servers public counter PFS key Extend the encryption with the PFS key computed using the private PFS keys and the servers public PFS keys Get the signed public client key Sign the public key suite including the signed public key and store the private and public key suites NOTE: The PAKE authentication allows to attach any payload, which enables the app to extend the process with additional meta data as required. A later authentication process (as seen from the client; may be uni- directional): Send the clients public PFS key Start encryption using the servers public key and a private PFS key of the client Send the clients public counter PFS key Extend the encryption using the servers public counter key and a private PFS key of the client Send the PAKE authentication request and extend the encryption using the PAKE session key Sign the authentication sequence using the private client key For a bi-directional communication channel in addition: Validate the server signature of the authentication sequence Receive the servers public PFS key Extend the encryption using the private key and the servers public PFS key Receive the servers public counter PFS key Extend the encryption using the PFS key computed using the private PFS keys and the servers public PFS keys WARNING: An uni-directional connection does use a PFS key, but this key is being applied on a pre-shared long term key only. NOTE: Since a temporary client like a browser may not be able to store the private client keys, such a client may only use the signup and not send a key signing request. Then the server is required to identify the authenticating client using the PAKE identifier (not the public key ID). In total at last three session keys are being exchanged during a request (six session keys for bi-directional communication). The first two keys are pseudo- PFS keys, while the third key is the PAKE session key. Each part of the authentication sequence will be encrypted using the latest exchanged session key (encryption does change each time a new session key can be derived at the server). NOTE: The encryption key will always be extended by the next derived key, but not replaced. To avoid replay-attacks, the server should implement methods to deny re-using PFS keys or random byte sequences. A timestamp validation is implemented already (which defaults to a maximum time offset of 5 minutes to the clients system time). So the server should ensure, that a (pseudo-)PFS key or random byte sequence can't be re-used within five minutes after it was received from a client. NOTE: The long term client key exchange keys can be used for encrypting an off-session peer-to-peer message. They're not used for signup/authentication. Things that must be known in advance are the used algorithms, while the PFS keys use the public server keys algorithms and key sizes. But these algorithms must be pre-defined in both (client and server) apps anyway: Hash algorithm MAC algorithm KDF algorithm Encryption algorithm (and other CryptoOptions settings for encryption) CAUTION: The chosen encryption algorithm must not require MAC authentication (while built-in MAC authentication like with AEAD is ok). You can find a stream cipher in the wan24-Crypto-BC library, for example. The encryption settings shouldn't use KDF to avoid too much overhead (KDF will be used for PAKE already). PAKE authentication only Quiet different from the \"Asymmetric keys + PAKE\" authentication protocol, there is another implementation, which uses PAKE only. See the tests (PakeAuth_Tests.cs) for an example of a simple but working client/server implementation. This protocol allows signup authentication while all features are optional. It implements Zero Knowledge Password Proof (ZKPP) and Perfect Forward Secrecy (PFS). CAUTION: At last the signup communication is required to be wrapped with a PFS protocol! Use a TLS socket, for example. A later authentication may be performed using a raw socket. During the signup the server will respond a random signup to the client. The produces PAKE values need to be stored on both peers for later authentication. WARNING: This authentication protocol doesn't support the use of a pre- shared key for the signup. This clearly opens doors for a MiM attack during the signup: If the signup communication was compromised, the attacker will be able to authenticate successful later! It's absolutely required to use a wrapping PFS protocol which ensures the server identity, before sending any signup information. For authentication, the client sends the identifier of the servers PAKE values, which have been pre-shared during the signup. Using random bytes a temporary session key will be calculated and used to send the PAKE authentication request. The temporary session key will then be extended using the now fully exchanged PAKE session key. NOTE: The authentication may use a raw socket, while a wrapping PFS protocol is of course never a mistake. However, if using raw sockets, a MiM is able to know who is authenticating, because the servers random PAKE identifier needs to be sent plain (and this value won't change, if not forced). Things that must be known in advance are the used algorithms, which must be pre-defined in both (client and server) apps: MAC algorithm KDF algorithm Encryption algorithm (and other CryptoOptions settings for encryption) CAUTION: The chosen encryption algorithm must not require MAC authentication (while built-in MAC authentication like with AEAD is ok). You can find a stream cipher in the wan24-Crypto-BC library, for example. The encryption settings shouldn't use KDF to avoid too much overhead (KDF will be used for PAKE already). In total this authentication may be a good choice for use with fixed client devices, which are able to store the servers PAKE values in a safe way for the long term. But also temporary devices may benefit, if they'll connect to a server multiple times. Random number generator You can use RND as a random data source. RND is customizable and falls back to RandomNumberGenerator from .NET. It uses /dev/random as data source, if available. byte[] randomData = RND.GetBytes(123); NOTE: /dev/random may be too slow for your requirements. If you don't want to use RandomDataGenerator (which can speed up RND a lot), you can disable /dev/random: RND.UseDevRandom = false; NOTE: In case you want to force using /dev/random ONLY: RND.RequireDevRandom = true;// This will cause RND to throw on Windows! The RandomDataGenerator is an IHostedService which can be customized, but falls back to RND per default. The service uses a buffer to pre-buffer random data, in case your RNG is slow. It's possible to define custom fallbacks which are being used in case the buffer doesn't have enough data to satisfy a request. If you use a RandomDataGenerator, you can set the instance to RND.Generator to use it per default. The full generator process is: Try reading pre-buffered random data If not satisfied, call the defined fallback RNG delegates (RND methods are preset) Default RND methods use RandomNumberGenerator, finally Each step in this process can be customized in RND AND RandomDataGenerator, while the defaults of RandomDataGenerator fall back to RandomStream and RND, and the methods of RND use RND.Generator or fall back to RandomNumberGenerator. To simplify that and avoid an endless recursion in your code: DO NOT call RND.Get/FillBytes(Async) from a customized RandomDataGenerator! DO call RND.DefaultRng(Async) instead. If you use the plain RandomDataGenerator, it uses the RandomStream as random data source, if /dev/random isn't available or disabled. (RandomStream uses RandomNumberGenerator, finally.) There's another Rng type, which is a RandomNumberGenerator implementation that skips the OS random number generator implementation and uses RND instead (also the static methods of RandomNumberGenerator are overridden). The RngHelper extends any RandomNumberGenerator instance with a GetInt32 method (which applies to customized Rng instances, too, since they extend RandomNumberGenerator). NOTE: Rng implements non-zero random number generation. However, any non- zero random byte sequence isn't as random as it could be anymore - keep that in mind. To sum it up: Use RND for (optional customized) getting cyptographic random bytes. You can use SecureRandomStream.Instance, too (it uses RND on request). Use Rng as (also asynchronous) random integer generator, or where a RandomNumberGenerator instance is required. CAUTION: True randomness is the most important source of security for any crypto application. PRNG and CSRNG random sources, and even physical phenomen based hardware random sources won't produce true random, and/or can be manipulated in some way to produce predictable random data, unless it's a QRNG source. Seeding Use the RND.AddSeed(Async) methods for seeding your RNG. The AddDevRandomSeed(Async) only seed /dev/random, while when calling AddSeed(Async), the method will try to seed the RND.SeedConsumer the RND.Generator /dev/random and return after providing the seed to the first available target, or when there's no target for consuming the seed. CAUTION: Be aware of the patent US10402172B1! Seeding automatic A seedable RNG (ISeedableRng) can be seeded automatic using received IV bytes received cipher data received random bytes CAUTION: Even if it's extremely unlikely, an untrusted seed source may be able to cause a RNG to produce predictable random data, unless it combines QRNG entropy. To enable automatic seeding, set the seed source flags to RND.AutoRngSeeding. Per default the RND.Generator will be seeded, unless you specify another seed target in RND.SeedConsumer. A seed consumer needs to implement the ISeedableRng interface, which RandomDataGenerator does, for example. Seeding during encryption can be overridden using CryptoOptions.RngSeeding. Seeding during PAKE authentication can be overridden using the given options for encryption. When deserializing the SignatureContainer embedded signed data, the nonce will be seeded, if RND.AutoRngSeeding has the Random flag. Because seeding may be synchronized, there's a RngSeederQueue queue worker, which is a simple hosted service that seeds the given target ISeedableRng in background, using a copy of the given seeds. The RngSeederQueue may be customized easily by extending the type (pregnant methods are virtual). CAUTION: Be aware of the patent US10402172B1! Some words on secure seeding A PRNG isn't enough, and even a CSRNG isn't enough, if the RNG's seed is not good. Modern OS CSRNG implementations use hardware and software environment information like system clock IP stack I/O timings temperature sensors values environment sounds harddisc values user information digest process ID thread ID ...and so on. But this still isn't really good, because all sources can be manipulated and/or predicted. The only really good seed source is a quantum device which is used by a QRNG. But not everyone has access to a QRNG, and the hardware is expensive, too. A company may decide to buy a QRNG hardware, which is a good investment in 2023, since quantum computing resources are becoming available to anyone now, and the development speed is really amazing (and will speed up more with the also fast growing AI possibilities!). But a private person might run into problems, unless there's a free QRNG seed source available online, hopefully for free. It'll take some time until enduser systems will contain a chip which can produce QRNG sequences on the local mashine, and isn't too expensive, so everyone can afford to own one. Anyway, when using a CSRNG, finally, it should be re-seeded as often as possible, because if a CSRNG output is being collected over a time, and the underlaying algorithm is known, the future output becomes predictable - and this is something you'd like to avoid as good as possible. There are several steps that you should implement fully, if possible in any way: Use a PRNG and seed it with CSRNG data from the operating system Wrap the PRNG with a CSRNG which uses an underlaying stream cipher to encrypt the PRNG's random data stream Re-seed the PRNG as often as possible using at last CSRNG data from the operating system, and if possible in combination with entropy from a QRNG Of course the best solution would be to use a QRNG instead of a PRNG in step 1, because then you wouldn't need to re-seed usually. But step 2 is important in all cases, please don't miss it! A good practice is to combine multiple entropy sources, at last for seeding, but also for the RNG's output, which you're going to use for symmetric keys (DEK), for example. If you carefully red and understood this information, you should get quiet good results with a CSRNG already, even you don't have access to a quantum entropy source. The wan24-Crypto and wan24-Crypto-BC libraries should offer everything a C# developer needs for a better random number source. NOTE: Even the best PQC algorithm will fail when not using a good RNG! Object encryption By using the DekAttribute and EncryptAttribute (and optional the IEncryptProperties interface) you can en-/decrypt objects with the ObjectEncryption helper methods/extensions: public class YourType : IEncryptProperties { [Dek] public byte[] Dek { get; set; } = null!; [Encrypt] public byte[] Raw { get; set; } = null!; } NOTE: null values won't be en-/decrypted! Using the IEncryptPropertiesExt interface your object can define en-/decryption handler methods. The Dek will hold a random data encryption key, while all properties having the Encrypt attribute will be encrypted using that DEK: YourType obj = new() { Raw = ... }; obj.EncryptObject(kek); NOTE: The real object type will be used for finding properties to process, not the generic method argument of EncryptObject and DecryptObject. The kek holds the key, which is used for the DEK encryption. Use DecryptObject for decryption. The DekAttribute and EncryptAttribute can be extended to override the methods that are used to get/set values. The rules for the used keys are simple: If you have a Dek property, it'll be used to store a KEK encrypted random DEK (which will be (re-)generated for each encryption) If you don't have a Dek property, you'll need to specify the DEK in the method parameters (and of course no KEK parameter value is required) Automatic key ecryption key providing Implement the IEncryptPropertiesKek interface for automatic key encryption key (KEK) providing. The object needs to implement a data encryption key (DEK) property with a DekAttribute. Then you can use the AutoEn/DecryptObject extension methods. Notes Sometimes you'll read something like \"will be disposed\" or \"will be cleared\" in the documentation. These are important diclaimers, which should be respected in order to work safe with sensitive data. WARNING: The disclaimer may be missing in some places! Will be disposed When noted to a given value, it'll be disposed after the desired operation, or when the hosting object is being disposed. When noted to a returned value, and you don't want to use the value only for a short term (during the hosted value wasn't disposed for sure), you should consider to create a copy. The hosting object will dispose the value, when it's being disposed. Should be disposed This is a disclaimer that reminds you to dispose a returned value after use. Will be cleared When noted to a given value, it'll be cleared after the desired operation, or when the hosting object is being disposed/cleared. When noted to a returned value, and you don't want to use the value only for a short term (during the hosted value wasn't disposed/cleared for sure), you should consider to create a copy. The hosting object will clear the value, when it's being disposed/cleared. Should be cleared This is a disclaimer that reminds you to clear a returned value after use. For this usually you can use the Clear or Clean (extension?) method of the value. (In case of Memory<T> or Span<T> it's Clean, because Clear is used to zero out the value already, while Clean will fill it with random bytes before.) Algorithm IDs Internal each algorithm has an unique ID within a category: Asymmetric cryptography Symmetric cryptography Hashing MAC KDF If you'd like to implement inofficial algorithms on your own, please use the ID bits 24-32 only to avoid possible collisions with official libraries! These are the official implementation IDs (not guaranteed to be complete): Algorithm ID Library Asymmetric cryptography ECDH 0 wan24-Crypto ECDSA 1 wan24-Crypto CRYSTALS-Kyber 2 wan24-Crypto-BC CRYSTALS-Dilithium 3 wan24-Crypto-BC FALCON 4 wan24-Crypto-BC SPHINCS+ 5 wan24-Crypto-BC FrodoKEM 6 wan24-Crypto-BC NTRUEncrypt 7 wan24-Crypto-BC Ed25519 8 wan24-Crypto-BC Ed448 9 wan24-Crypto-BC X25519 10 wan24-Crypto-BC X448 11 wan24-Crypto-BC XEd25519 12 wan24-Crypto-BC XEd448 13 wan24-Crypto-BC Streamlined NTRU Prime 14 wan24-Crypto-BC BIKE 15 wan24-Crypto-BC HQC 16 wan24-Crypto-BC Picnic 17 wan24-Crypto-BC Symmetric cryptography AES-256-CBC 0 wan24-Crypto ChaCha20 1 wan24-Crypto-BC XSalsa20 2 wan24-Crypto-BC AES-256-GCM 3 wan24-Crypto-BC XCrypt 4 (none) Serpent 256 CBC 5 wan24-Crypto-BC Serpent 256 GCM 6 wan24-Crypto-BC Twofish 256 CBC 7 wan24-Crypto-BC Twofish 256 GCM 8 wan24-Crypto-BC Hashing MD5 0 wan24-Crypto SHA-1 1 wan24-Crypto SHA-256 2 wan24-Crypto SHA-384 3 wan24-Crypto SHA-512 4 wan24-Crypto SHA3-256 5 wan24-Crypto SHA3-384 6 wan24-Crypto SHA3-512 7 wan24-Crypto Shake128 8 wan24-Crypto Shake256 9 wan24-Crypto MAC HMAC-SHA-1 0 wan24-Crypto HMAC-SHA-256 1 wan24-Crypto HMAC-SHA-384 2 wan24-Crypto HMAC-SHA-512 3 wan24-Crypto HMAC-SHA3-256 4 wan24-Crypto HMAC-SHA3-384 5 wan24-Crypto HMAC-SHA3-512 6 wan24-Crypto TPMHMAC-SHA-1 7 wan24-Crypto-TPM TPMHMAC-SHA-256 8 wan24-Crypto-TPM TPMHMAC-SHA-384 9 wan24-Crypto-TPM TPMHMAC-SHA-512 10 wan24-Crypto-TPM KDF PBKDF#2 0 wan24-Crypto Argon2id 1 wan24-Crypto-NaCl SP 800-108 HMAC CTR KBKDF 2 wan24-Crypto PAKE has no algorithm ID, because it doesn't match into any category (there is no PAKE multi-algorithm support implemented), and it's a key exchange protocol - but not a cryptographic algorithm. Counter algorithms A counter algorithm is being applied after the main algorithm. So the main algorithm result is secured by the counter algorithm result. You can use this in case you want to double security, for example when using post quantum algorithms, which may not be trustable at present. The HybridAlgorithmHelper allows to set default hybrid algorithms for key exchange in KeyExchangeAlgorithm signature in SignatureAlgorithm KDF in KdfAlgorithm MAC in MacAlgorithm and exports some helper methods, which are being used internal during encryption (you don't need to use them unless you have to). If you want the additional hybrid algorithms to be used every time, you can set the EncryptionHelper.UseHybridOptions AsymmetricHelper.UseHybridKeyExchangeOptions AsymmetricHelper.UseHybridSignatureOptions to true to extend used CryptoOptions instances by the algorithms defined in the HybridAlgorithmHelper properties. WARNING: The HybridAlgorithmHelper counter MAC implementation isn't really good - it's only a trade-off to gain compatibility and performance. You should consinder to create a counter MAC from the whole raw data manually, if possible, instead. Post quantum safety Some of the used cryptographic algorithms are quantum safe already, but especially the asymmetric algorithms are not post quantum safe at all. If you use an extension library which offers asymmetric post quantum safe algorithms for key exchange and signature, you can enforce post quantum safety for all used default algorithms by calling CryptoHelper.ForcePostQuantumSafety. This method will ensure that all used default algorithms are post quantum safe. In case it's not possible to use post quantum algorithms for all defaults, this method will throw an exception. NOTE: AES-256, and SHA-384+, SHA3 and Shake128/256 (and HMAC-SHA-384+ and HMAC-SHA3-*) are considered to be post quantum-safe algorithms, while currently no post quantum-safe asymmetric algorithms are implemented in this main library (wan24-Crypto-BC does implement some), since .NET doesn't offer any API (this may change with coming .NET releases). NOTE: While SHA3 and Shake128/256 (KECCAK) was designed for post quantum safety, AES-256 and SHA-384+ (SHA2) wasn't and is only considered to be post quantum safe because of its key/output length (this also applies to the HMACs). While the post quantum safety of SHA3 and Shake218/256 should stay stable, key/output length based considerations may be reconsidered from time to time, based on the recent quantum computing capabilities available. Disclaimer wan24-Crypto and provided sub-libraries are provided \"as is\", without any warranty of any kind. Please read the license for the full disclaimer. This library uses the available .NET cryptographic algorithms and doesn't implement any \"selfmade\" cryptographic algorithms. Extension libraries may add other well known third party cryptographic algorithm libraries, like Bouncy Castle. Also \"selfmade\" cryptographic algorithms may be implemented as extensions."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | wan24-Crypto",
    "keywords": "API reference Choose a type from the left to start browsing."
  },
  "api/wan24.Crypto.AsymmetricAlgorithmBase-2.html": {
    "href": "api/wan24.Crypto.AsymmetricAlgorithmBase-2.html",
    "title": "Class AsymmetricAlgorithmBase<tPublic, tPrivate> | wan24-Crypto",
    "keywords": "Class AsymmetricAlgorithmBase<tPublic, tPrivate> Base class for an asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<tPublic, tPrivate> AsymmetricEcDiffieHellmanAlgorithm AsymmetricEcDsaAlgorithm AsymmetricVoidAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>> Inherited Members CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record AsymmetricAlgorithmBase<tPublic, tPrivate> : CryptoAlgorithmBase, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>> where tPublic : AsymmetricPublicKeyBase, IAsymmetricPublicKey, new() where tPrivate : AsymmetricPrivateKeyBase<tPublic, tPrivate>, IAsymmetricPrivateKey, new() Type Parameters Name Description tPublic Public key type tPrivate Private key type Constructors | Edit this page View Source AsymmetricAlgorithmBase(string, int) Constructor Declaration protected AsymmetricAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Fields | Edit this page View Source _DefaultKeySize Default key size Declaration protected int _DefaultKeySize Field Value Type Description int | Edit this page View Source _DefaultOptions Default options Declaration protected CryptoOptions _DefaultOptions Field Value Type Description CryptoOptions Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration public abstract FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> | Edit this page View Source CanExchangeKey Can exchange a key? Declaration public bool CanExchangeKey { get; } Property Value Type Description bool | Edit this page View Source CanSign Can sign? Declaration public bool CanSign { get; } Property Value Type Description bool | Edit this page View Source DefaultAlgorithmOptions Default algorithm options Declaration public virtual string? DefaultAlgorithmOptions { get; } Property Value Type Description string | Edit this page View Source DefaultKeySize Default key size in bits Declaration public int DefaultKeySize { get; set; } Property Value Type Description int | Edit this page View Source DefaultOptions Default options Declaration public CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source IsDenied Was this allogithm denied (still usable for key derivation and signature validation, but not for key exchange initialization and signature)? Declaration public bool IsDenied { get; } Property Value Type Description bool | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration public abstract bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public abstract bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool | Edit this page View Source KeyPool Key pool (key is the key size, value the key pool) Declaration public Dictionary<int, IAsymmetricKeyPool>? KeyPool { get; set; } Property Value Type Description Dictionary<int, IAsymmetricKeyPool> | Edit this page View Source PrivateKeyType Private key type Declaration public static Type PrivateKeyType { get; } Property Value Type Description Type | Edit this page View Source PublicKeyType Public key type Declaration public static Type PublicKeyType { get; } Property Value Type Description Type | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides CryptoAlgorithmBase.State | Edit this page View Source Usages Key usages Declaration public abstract AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Methods | Edit this page View Source CanHandleNetAlgorithm(AsymmetricAlgorithm) Determine if this asymmetric algorithm can handle a .NET asymmetric algorithm Declaration public virtual bool CanHandleNetAlgorithm(AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Asymmetric algorithm Returns Type Description bool If this asymmetric algorithm can handle the .NET asymmetric algorithm | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public abstract tPrivate CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description tPrivate | Edit this page View Source CreateKeyPairAsync(CryptoOptions?, CancellationToken) Declaration public virtual Task<tPrivate> CreateKeyPairAsync(CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description CryptoOptions options CancellationToken cancellationToken Returns Type Description Task<tPrivate> | Edit this page View Source DeriveKey(byte[], CryptoOptions?) Get the derived PFS key from received key exchange data Declaration public virtual byte[] DeriveKey(byte[] keyExchangeData, CryptoOptions? options = null) Parameters Type Name Description byte[] keyExchangeData Key exchange data CryptoOptions options Options Returns Type Description byte[] Derived PFS key | Edit this page View Source DeserializePrivateKey(byte[]) Declaration public tPrivate DeserializePrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Returns Type Description tPrivate | Edit this page View Source DeserializePrivateKeyV1(byte[]) Deserialize library v1 private key data (will be removed in v3) Declaration public abstract tPrivate DeserializePrivateKeyV1(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description tPrivate Private key | Edit this page View Source DeserializePublicKey(byte[]) Declaration public tPublic DeserializePublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Returns Type Description tPublic | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration public override bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Overrides CryptoAlgorithmBase.EnsureAllowed(in bool) Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration | Edit this page View Source EnsureAllowedCurve(in int, in bool) Ensure an allowed elliptic curve Declaration protected virtual bool EnsureAllowedCurve(in int bits, in bool throwIfDenied = true) Parameters Type Name Description int bits Key size in bits bool throwIfDenied Throw an exception, if deniedß Returns Type Description bool If the elliptic curve is allowed Exceptions Type Condition CryptographicException The elliptic curve is denied | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration public virtual CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options Implements IEquatable<T> IAsymmetricAlgorithm ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> Extension Methods CryptoExtensions.CreateKeyPools(IAsymmetricAlgorithm, int, bool) CryptoExtensions.CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) CryptoExtensions.GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) CryptoExtensions.GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken)"
  },
  "api/wan24.Crypto.AsymmetricAlgorithmUsages.html": {
    "href": "api/wan24.Crypto.AsymmetricAlgorithmUsages.html",
    "title": "Enum AsymmetricAlgorithmUsages | wan24-Crypto",
    "keywords": "Enum AsymmetricAlgorithmUsages Asymmetric algorithm usages Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum AsymmetricAlgorithmUsages Fields Name Description KeyExchange Key exchange Signature Signature"
  },
  "api/wan24.Crypto.AsymmetricEcDiffieHellmanAlgorithm.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDiffieHellmanAlgorithm.html",
    "title": "Class AsymmetricEcDiffieHellmanAlgorithm | wan24-Crypto",
    "keywords": "Class AsymmetricEcDiffieHellmanAlgorithm EC Diffie Hellman asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey> AsymmetricEcDiffieHellmanAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>> IEquatable<AsymmetricEcDiffieHellmanAlgorithm> Inherited Members AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.State AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDiffieHellmanAlgorithm : AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>>, IEquatable<AsymmetricEcDiffieHellmanAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ECDH\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 521 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"EC Diffie Hellman\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration public override FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.AllowedKeySizes | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static AsymmetricEcDiffieHellmanAlgorithm Instance { get; } Property Value Type Description AsymmetricEcDiffieHellmanAlgorithm | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration public override bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.IsEllipticCurveAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.IsPublicKeyStandardFormat | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source Usages Key usages Declaration public override AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.Usages Methods | Edit this page View Source CanHandleNetAlgorithm(AsymmetricAlgorithm) Determine if this asymmetric algorithm can handle a .NET asymmetric algorithm Declaration public override bool CanHandleNetAlgorithm(AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Asymmetric algorithm Returns Type Description bool If this asymmetric algorithm can handle the .NET asymmetric algorithm Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricEcDiffieHellmanPrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricEcDiffieHellmanPrivateKey Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.CreateKeyPair(CryptoOptions) | Edit this page View Source DeserializePrivateKeyV1(byte[]) Deserialize library v1 private key data (will be removed in v3) Declaration public override AsymmetricEcDiffieHellmanPrivateKey DeserializePrivateKeyV1(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description AsymmetricEcDiffieHellmanPrivateKey Private key Overrides AsymmetricAlgorithmBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeserializePrivateKeyV1(byte[]) Implements IEquatable<T> IAsymmetricAlgorithm ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> Extension Methods CryptoExtensions.CreateKeyPools(IAsymmetricAlgorithm, int, bool) CryptoExtensions.CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) CryptoExtensions.GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) CryptoExtensions.GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken)"
  },
  "api/wan24.Crypto.AsymmetricEcDiffieHellmanPrivateKey.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDiffieHellmanPrivateKey.html",
    "title": "Class AsymmetricEcDiffieHellmanPrivateKey | wan24-Crypto",
    "keywords": "Class AsymmetricEcDiffieHellmanPrivateKey Elliptic Curve Diffie Hellman asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey> AsymmetricEcDiffieHellmanPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricEcDiffieHellmanPrivateKey> Inherited Members AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.ID AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDiffieHellmanPrivateKey : AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricEcDiffieHellmanPrivateKey> Constructors | Edit this page View Source AsymmetricEcDiffieHellmanPrivateKey() Constructor Declaration public AsymmetricEcDiffieHellmanPrivateKey() | Edit this page View Source AsymmetricEcDiffieHellmanPrivateKey(byte[]) Constructor Declaration public AsymmetricEcDiffieHellmanPrivateKey(byte[] privateKeyData) Parameters Type Name Description byte[] privateKeyData Private key data (will be cloaked when disposing!) | Edit this page View Source AsymmetricEcDiffieHellmanPrivateKey(ECDiffieHellman) Constructor Declaration public AsymmetricEcDiffieHellmanPrivateKey(ECDiffieHellman key) Parameters Type Name Description ECDiffieHellman key Private key (will be disposed!) Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits | Edit this page View Source PrivateKey Private key (don't dispose - will be disposed when this private key instance disposes!) Declaration [NoValidation(false)] [SensitiveData] public ECDiffieHellman PrivateKey { get; } Property Value Type Description ECDiffieHellman | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override AsymmetricEcDiffieHellmanPublicKey PublicKey { get; } Property Value Type Description AsymmetricEcDiffieHellmanPublicKey Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.PublicKey Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DeriveKey(IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides AsymmetricPrivateKeyBase<AsymmetricEcDiffieHellmanPublicKey, AsymmetricEcDiffieHellmanPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) Operators | Edit this page View Source explicit operator AsymmetricEcDiffieHellmanPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEcDiffieHellmanPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEcDiffieHellmanPrivateKey | Edit this page View Source implicit operator AsymmetricEcDiffieHellmanPublicKey(AsymmetricEcDiffieHellmanPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricEcDiffieHellmanPublicKey(AsymmetricEcDiffieHellmanPrivateKey privateKey) Parameters Type Name Description AsymmetricEcDiffieHellmanPrivateKey privateKey Private key Returns Type Description AsymmetricEcDiffieHellmanPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricEcDiffieHellmanPublicKey.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDiffieHellmanPublicKey.html",
    "title": "Class AsymmetricEcDiffieHellmanPublicKey | wan24-Crypto",
    "keywords": "Class AsymmetricEcDiffieHellmanPublicKey Elliptic Curve Diffie Hellman asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase AsymmetricEcDiffieHellmanPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<AsymmetricEcDiffieHellmanPublicKey> Inherited Members AsymmetricPublicKeyBase.ID AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDiffieHellmanPublicKey : AsymmetricPublicKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<AsymmetricEcDiffieHellmanPublicKey> Constructors | Edit this page View Source AsymmetricEcDiffieHellmanPublicKey() Constructor Declaration public AsymmetricEcDiffieHellmanPublicKey() | Edit this page View Source AsymmetricEcDiffieHellmanPublicKey(byte[]) Constructor Declaration public AsymmetricEcDiffieHellmanPublicKey(byte[] publicKeyData) Parameters Type Name Description byte[] publicKeyData Public key data (will be cloaked when disposing!) | Edit this page View Source AsymmetricEcDiffieHellmanPublicKey(ECDiffieHellman) Constructor Declaration public AsymmetricEcDiffieHellmanPublicKey(ECDiffieHellman key) Parameters Type Name Description ECDiffieHellman key Private key (will be disposed!) | Edit this page View Source AsymmetricEcDiffieHellmanPublicKey(ECDiffieHellmanPublicKey) Constructor Declaration public AsymmetricEcDiffieHellmanPublicKey(ECDiffieHellmanPublicKey key) Parameters Type Name Description ECDiffieHellmanPublicKey key Public key (will be disposed!) Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits | Edit this page View Source PublicKey Public key (don't dispose - will be disposed when this public key instance disposes!) Declaration [NoValidation(false)] public ECDiffieHellmanPublicKey PublicKey { get; } Property Value Type Description ECDiffieHellmanPublicKey Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricKeyBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides AsymmetricKeyBase.DisposeCore() | Edit this page View Source GetCopy() Get a copy Declaration public override IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy Overrides AsymmetricPublicKeyBase.GetCopy() Operators | Edit this page View Source explicit operator AsymmetricEcDiffieHellmanPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEcDiffieHellmanPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEcDiffieHellmanPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IAsymmetricPublicKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricEcDsaAlgorithm.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDsaAlgorithm.html",
    "title": "Class AsymmetricEcDsaAlgorithm | wan24-Crypto",
    "keywords": "Class AsymmetricEcDsaAlgorithm EC DSA asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey> AsymmetricEcDsaAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>> IEquatable<AsymmetricEcDsaAlgorithm> Inherited Members AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.State AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDsaAlgorithm : AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>>, IEquatable<AsymmetricEcDsaAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ECDSA\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 1 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 521 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"EC DSA\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration public override FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.AllowedKeySizes | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static AsymmetricEcDsaAlgorithm Instance { get; } Property Value Type Description AsymmetricEcDsaAlgorithm | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration public override bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.IsEllipticCurveAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.IsPublicKeyStandardFormat | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source Usages Key usages Declaration public override AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.Usages Methods | Edit this page View Source CanHandleNetAlgorithm(AsymmetricAlgorithm) Determine if this asymmetric algorithm can handle a .NET asymmetric algorithm Declaration public override bool CanHandleNetAlgorithm(AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Asymmetric algorithm Returns Type Description bool If this asymmetric algorithm can handle the .NET asymmetric algorithm Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricEcDsaPrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricEcDsaPrivateKey Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.CreateKeyPair(CryptoOptions) | Edit this page View Source DeserializePrivateKeyV1(byte[]) Deserialize library v1 private key data (will be removed in v3) Declaration public override AsymmetricEcDsaPrivateKey DeserializePrivateKeyV1(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description AsymmetricEcDsaPrivateKey Private key Overrides AsymmetricAlgorithmBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeserializePrivateKeyV1(byte[]) Implements IEquatable<T> IAsymmetricAlgorithm ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> Extension Methods CryptoExtensions.CreateKeyPools(IAsymmetricAlgorithm, int, bool) CryptoExtensions.CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) CryptoExtensions.GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) CryptoExtensions.GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken)"
  },
  "api/wan24.Crypto.AsymmetricEcDsaPrivateKey.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDsaPrivateKey.html",
    "title": "Class AsymmetricEcDsaPrivateKey | wan24-Crypto",
    "keywords": "Class AsymmetricEcDsaPrivateKey Elliptic Curve DSA asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey> AsymmetricEcDsaPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricEcDsaPrivateKey> Inherited Members AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.ID AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDsaPrivateKey : AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricEcDsaPrivateKey> Constructors | Edit this page View Source AsymmetricEcDsaPrivateKey() Constructor Declaration public AsymmetricEcDsaPrivateKey() | Edit this page View Source AsymmetricEcDsaPrivateKey(byte[]) Constructor Declaration public AsymmetricEcDsaPrivateKey(byte[] privateKeyData) Parameters Type Name Description byte[] privateKeyData Private key data (will be cloaked when disposing!) | Edit this page View Source AsymmetricEcDsaPrivateKey(ECDsa) Constructor Declaration public AsymmetricEcDsaPrivateKey(ECDsa key) Parameters Type Name Description ECDsa key Private key (will be disposed!) Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits | Edit this page View Source PrivateKey Private key (don't dispose - will be disposed when this private key instance disposes!) Declaration [NoValidation(false)] [SensitiveData] public ECDsa PrivateKey { get; } Property Value Type Description ECDsa | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override AsymmetricEcDsaPublicKey PublicKey { get; } Property Value Type Description AsymmetricEcDsaPublicKey Overrides AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.PublicKey Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.DisposeCore() | Edit this page View Source SignHashRaw(byte[]) Declaration public override byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricEcDsaPublicKey, AsymmetricEcDsaPrivateKey>.SignHashRaw(byte[]) Operators | Edit this page View Source explicit operator AsymmetricEcDsaPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEcDsaPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEcDsaPrivateKey | Edit this page View Source implicit operator AsymmetricEcDsaPublicKey(AsymmetricEcDsaPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricEcDsaPublicKey(AsymmetricEcDsaPrivateKey privateKey) Parameters Type Name Description AsymmetricEcDsaPrivateKey privateKey Private key Returns Type Description AsymmetricEcDsaPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricEcDsaPublicKey.html": {
    "href": "api/wan24.Crypto.AsymmetricEcDsaPublicKey.html",
    "title": "Class AsymmetricEcDsaPublicKey | wan24-Crypto",
    "keywords": "Class AsymmetricEcDsaPublicKey Elliptic Curve DSA asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase AsymmetricEcDsaPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricEcDsaPublicKey> Inherited Members AsymmetricPublicKeyBase.ID AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricEcDsaPublicKey : AsymmetricPublicKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricEcDsaPublicKey> Constructors | Edit this page View Source AsymmetricEcDsaPublicKey() Constructor Declaration public AsymmetricEcDsaPublicKey() | Edit this page View Source AsymmetricEcDsaPublicKey(byte[]) Constructor Declaration public AsymmetricEcDsaPublicKey(byte[] publicKeyData) Parameters Type Name Description byte[] publicKeyData Public key data (will be cloaked when disposing!) | Edit this page View Source AsymmetricEcDsaPublicKey(ECDsa) Constructor Declaration public AsymmetricEcDsaPublicKey(ECDsa key) Parameters Type Name Description ECDsa key Public key (will be disposed!) Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits | Edit this page View Source PublicKey Public key (don't dispose - will be disposed when this public key instance disposes!) Declaration [NoValidation(false)] public ECDsa PublicKey { get; } Property Value Type Description ECDsa Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricKeyBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides AsymmetricKeyBase.DisposeCore() | Edit this page View Source GetCopy() Get a copy Declaration public override IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy Overrides AsymmetricPublicKeyBase.GetCopy() | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected override bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid Overrides AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public override bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Overrides AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) Operators | Edit this page View Source explicit operator AsymmetricEcDsaPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEcDsaPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEcDsaPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricHelper.html": {
    "href": "api/wan24.Crypto.AsymmetricHelper.html",
    "title": "Class AsymmetricHelper | wan24-Crypto",
    "keywords": "Class AsymmetricHelper Asymmetric helper Inheritance object AsymmetricHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class AsymmetricHelper Fields | Edit this page View Source Algorithms Registered algorithms Declaration public static readonly ConcurrentDictionary<string, IAsymmetricAlgorithm> Algorithms Field Value Type Description ConcurrentDictionary<string, IAsymmetricAlgorithm> Properties | Edit this page View Source DefaultKeyExchangeAlgorithm Default key exchange algorithm Declaration public static IAsymmetricAlgorithm DefaultKeyExchangeAlgorithm { get; set; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source DefaultSignatureAlgorithm Default signature algorithm Declaration public static IAsymmetricAlgorithm DefaultSignatureAlgorithm { get; set; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source DeniedAlgorithms Denied algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> DeniedAlgorithms { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source KeyExchangeAlgorithms Key exchange algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> KeyExchangeAlgorithms { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PostQuantum Post-quantum algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PostQuantum { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PostQuantumKeyExchange Post-quantum key exchange algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PostQuantumKeyExchange { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PostQuantumSignature Post-quantum signature algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PostQuantumSignature { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PreQuantum Pre-quantum algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PreQuantum { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PreQuantumKeyExchange Pre-quantum key exchange algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PreQuantumKeyExchange { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source PreQuantumSignature Pre-quantum signature algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> PreQuantumSignature { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source SignatureAlgorithms Signature algorithms Declaration public static IEnumerable<IAsymmetricAlgorithm> SignatureAlgorithms { get; } Property Value Type Description IEnumerable<IAsymmetricAlgorithm> | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object | Edit this page View Source UseHybridKeyExchangeOptions Use the hybrid key exchange options? Declaration public static bool UseHybridKeyExchangeOptions { get; set; } Property Value Type Description bool | Edit this page View Source UseHybridSignatureOptions Use the hybrid signature options? Declaration public static bool UseHybridSignatureOptions { get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateKeyExchangeKeyPair(CryptoOptions?) Create a new key pair for key exchange Declaration public static IKeyExchangePrivateKey CreateKeyExchangeKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description IKeyExchangePrivateKey Private key | Edit this page View Source CreateKeyPair(CryptoOptions) Create a new key pair Declaration public static IAsymmetricPrivateKey CreateKeyPair(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description IAsymmetricPrivateKey Private key | Edit this page View Source CreateSignatureKeyPair(CryptoOptions?) Create a new key pair for signature Declaration public static ISignaturePrivateKey CreateSignatureKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description ISignaturePrivateKey Private key | Edit this page View Source GetAlgorithm(int) Get an algorithm Declaration public static IAsymmetricAlgorithm GetAlgorithm(int value) Parameters Type Name Description int value Algorithm value Returns Type Description IAsymmetricAlgorithm Algorithm | Edit this page View Source GetAlgorithm(string) Get an algorithm Declaration public static IAsymmetricAlgorithm GetAlgorithm(string name) Parameters Type Name Description string name Algorithm name Returns Type Description IAsymmetricAlgorithm Algorithm | Edit this page View Source GetDefaultKeyExchangeOptions(CryptoOptions?) Get the default key exchange options used by the asymmetric helper Declaration public static CryptoOptions GetDefaultKeyExchangeOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetDefaultSignatureOptions(CryptoOptions?) Get the default signature options used by the asymmetric helper Declaration public static CryptoOptions GetDefaultSignatureOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options"
  },
  "api/wan24.Crypto.AsymmetricKeyBase.html": {
    "href": "api/wan24.Crypto.AsymmetricKeyBase.html",
    "title": "Class AsymmetricKeyBase | wan24-Crypto",
    "keywords": "Class AsymmetricKeyBase Base class for an asymmetric key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tPrivate> AsymmetricPublicKeyBase Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricKeyBase> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.PrintMembers(StringBuilder) DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableStreamSerializerRecordBase.EqualityContract DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record AsymmetricKeyBase : DisposableStreamSerializerRecordBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricKeyBase> Constructors | Edit this page View Source AsymmetricKeyBase(string) Constructor Declaration protected AsymmetricKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Algorithm Algorithm name Declaration public IAsymmetricAlgorithm Algorithm { get; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source Bits Key size in bits Declaration [Range(1, 2147483647)] public abstract int Bits { get; } Property Value Type Description int | Edit this page View Source ID Key ID Declaration [CountLimit(64)] public abstract byte[] ID { get; } Property Value Type Description byte[] | Edit this page View Source KeyData Key data Declaration [NoValidation(false)] [SensitiveData] public SecureByteArray KeyData { get; protected set; } Property Value Type Description SecureByteArray | Edit this page View Source MaxArrayLength Max. array length in serialized data in bytes Declaration public static int MaxArrayLength { get; set; } Property Value Type Description int | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source EnsureAllowedCurve(in bool) Ensure using an allowed elliptic curve Declaration protected virtual bool EnsureAllowedCurve(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an axception if the used curve was denied? Returns Type Description bool Exceptions Type Condition CryptographicException The used elliptic curve was denieds | Edit this page View Source EnsurePqcRequirement(in bool) Ensure PQC requirement Declaration protected virtual bool EnsurePqcRequirement(in bool throwIfRequirementMismatch = true) Parameters Type Name Description bool throwIfRequirementMismatch Throw an axception if the PQC requirement does not match? Returns Type Description bool Exceptions Type Condition CryptographicException The PQC requirement does not match | Edit this page View Source Export() Export the key data Declaration public byte[] Export() Returns Type Description byte[] Key data | Edit this page View Source Import(byte[]) Create a key instance from exported key data Declaration public static IAsymmetricKey Import(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description IAsymmetricKey Key instance (don't forget to dispose) | Edit this page View Source Import<T>(byte[]) Create a key instance from exported key data Declaration public static T Import<T>(byte[] keyData) where T : IAsymmetricKey Parameters Type Name Description byte[] keyData Key data Returns Type Description T Key instance (don't forget to dispose) Type Parameters Name Description T Asymmetric key type | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides wan24.StreamSerializerExtensions.DisposableStreamSerializerRecordBase.ToString() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricKeyPool-1.html": {
    "href": "api/wan24.Crypto.AsymmetricKeyPool-1.html",
    "title": "Class AsymmetricKeyPool<T> | wan24-Crypto",
    "keywords": "Class AsymmetricKeyPool<T> Asymmetric private key pool Inheritance object DisposableBase HostedServiceBase InstancePool<T> AsymmetricKeyPool<T> Implements IWillDispose IExportUserActions IInstancePool<T> IAsymmetricKeyPool IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members InstancePool<T>.GetOne() InstancePool<T>.GetOneAsync(CancellationToken) InstancePool<T>.GetMany(int, CancellationToken) InstancePool<T>.GetManyAsync(int, CancellationToken) InstancePool<T>.GUID InstancePool<T>.ServiceProvider InstancePool<T>.Capacity InstancePool<T>.Available InstancePool<T>.Created InstancePool<T>.CreatedOnDemand InstancePool<T>.State HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.OnException DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class AsymmetricKeyPool<T> : InstancePool<T>, IWillDispose, IExportUserActions, IInstancePool<T>, IAsymmetricKeyPool, IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : class, IAsymmetricPrivateKey, new() Type Parameters Name Description T Asymmetric private key type Constructors | Edit this page View Source AsymmetricKeyPool(in int, in CryptoOptions?) Constructor Declaration public AsymmetricKeyPool(in int capacity, in CryptoOptions? options = null) Parameters Type Name Description int capacity Capacity CryptoOptions options Options Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions wan24.Core.IInstancePool<T> IAsymmetricKeyPool wan24.Core.IInstancePool wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.AsymmetricKeySigner.html": {
    "href": "api/wan24.Crypto.AsymmetricKeySigner.html",
    "title": "Class AsymmetricKeySigner | wan24-Crypto",
    "keywords": "Class AsymmetricKeySigner Asymmetric key signer Inheritance object AsymmetricKeySigner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class AsymmetricKeySigner Constructors | Edit this page View Source AsymmetricKeySigner(PrivateKeySuite) Constructor Declaration public AsymmetricKeySigner(PrivateKeySuite signatureKeys) Parameters Type Name Description PrivateKeySuite signatureKeys Signature keys (won't be disposed!) Fields | Edit this page View Source ClearRequestAttributes Clear all signing request attributes before signing? Declaration protected bool ClearRequestAttributes Field Value Type Description bool | Edit this page View Source SignatureKeys Signature key Declaration protected readonly PrivateKeySuite SignatureKeys Field Value Type Description PrivateKeySuite Properties | Edit this page View Source CipherSuite Cipher suite to embed in the signed key attributes (won't be cleared) Declaration public CryptoOptions? CipherSuite { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source Instance Singleton instance Declaration public static AsymmetricKeySigner? Instance { get; set; } Property Value Type Description AsymmetricKeySigner | Edit this page View Source KeyValidationUriTemplate Key validation URI template (https://pki.yourdomain.com/validate/{id} for example, where {id} will be replaced with the base64 encoded public key ID) Declaration public string? KeyValidationUriTemplate { get; set; } Property Value Type Description string | Edit this page View Source PKI PKI for storing the signed keys (won't be disposed) Declaration public SignedPkiStore? PKI { get; set; } Property Value Type Description SignedPkiStore | Edit this page View Source PkiDomain PKI domain name Declaration public string? PkiDomain { get; set; } Property Value Type Description string | Edit this page View Source RequireRequestSignature Require a key signing request signature of the key owner? Declaration public bool RequireRequestSignature { get; set; } Property Value Type Description bool | Edit this page View Source SignatureOptions Signature options (won't be cleared) Declaration public CryptoOptions? SignatureOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source SignaturePurpose Signature purpose Declaration public string? SignaturePurpose { get; set; } Property Value Type Description string Methods | Edit this page View Source SignKey(AsymmetricPublicKeySigningRequest) Sign a key signing request Declaration public virtual AsymmetricSignedPublicKey SignKey(AsymmetricPublicKeySigningRequest request) Parameters Type Name Description AsymmetricPublicKeySigningRequest request Request Returns Type Description AsymmetricSignedPublicKey Signed key (will be disposed, if PKI is not null)"
  },
  "api/wan24.Crypto.AsymmetricKeySignerService.html": {
    "href": "api/wan24.Crypto.AsymmetricKeySignerService.html",
    "title": "Class AsymmetricKeySignerService | wan24-Crypto",
    "keywords": "Class AsymmetricKeySignerService Parallel AsymmetricPublicKeySigningRequest signer service Inheritance object DisposableBase HostedServiceBase QueueWorker ParallelQueueWorker ParallelItemQueueWorkerBase<Action> AsymmetricKeySignerService Implements IWillDispose IExportUserActions IParallelQueueWorker IItemQueueWorker<Action> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider IProducerConsumerCollection<QueueWorker.Task_Delegate> IEnumerable<QueueWorker.Task_Delegate> ICollection IEnumerable Inherited Members ParallelItemQueueWorkerBase<Action>.EnqueueAsync(Action, CancellationToken) ParallelItemQueueWorkerBase<Action>.TryEnqueue(Action) ParallelItemQueueWorkerBase<Action>.EnqueueRangeAsync(IEnumerable<Action>, CancellationToken) ParallelItemQueueWorkerBase<Action>.EnqueueRangeAsync(IAsyncEnumerable<Action>, CancellationToken) ParallelQueueWorker.WaitBoring(TimeSpan) ParallelQueueWorker.WaitBoringAsync(TimeSpan) ParallelQueueWorker.WaitBoring(CancellationToken) ParallelQueueWorker.WaitBoringAsync(CancellationToken) ParallelQueueWorker.Threads ParallelQueueWorker.State QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.TryAdd(QueueWorker.Task_Delegate) QueueWorker.TryTake(out QueueWorker.Task_Delegate) QueueWorker.CopyTo(QueueWorker.Task_Delegate[], int) QueueWorker.ToArray() QueueWorker.GetEnumerator() QueueWorker.CopyTo(Array, int) QueueWorker.GUID QueueWorker.Queued QueueWorker.Count QueueWorker.IsSynchronized QueueWorker.SyncRoot HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.OnException DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class AsymmetricKeySignerService : ParallelItemQueueWorkerBase<Action>, IWillDispose, IExportUserActions, IParallelQueueWorker, IItemQueueWorker<Action>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider, IProducerConsumerCollection<QueueWorker.Task_Delegate>, IEnumerable<QueueWorker.Task_Delegate>, ICollection, IEnumerable Remarks Constructor Constructors | Edit this page View Source AsymmetricKeySignerService(in int, in int, in AsymmetricKeySigner?) Parallel AsymmetricPublicKeySigningRequest signer service Declaration public AsymmetricKeySignerService(in int capacity, in int threads, in AsymmetricKeySigner? signer = null) Parameters Type Name Description int capacity Key signing request queue capacity int threads Number of threads to use for parallel processing AsymmetricKeySigner signer Signer to use Remarks Constructor Properties | Edit this page View Source Instance Singleton instance Declaration public static AsymmetricKeySignerService? Instance { get; set; } Property Value Type Description AsymmetricKeySignerService | Edit this page View Source Signer Used signer Declaration public AsymmetricKeySigner Signer { get; } Property Value Type Description AsymmetricKeySigner Methods | Edit this page View Source ProcessItem(Action, CancellationToken) Process one item Declaration protected override Task ProcessItem(Action item, CancellationToken cancellationToken) Parameters Type Name Description Action item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides ParallelItemQueueWorkerBase<Action>.ProcessItem(Action, CancellationToken) | Edit this page View Source SignAsync(AsymmetricPublicKeySigningRequest, CancellationToken) Sign a key signing request Declaration public Task<AsymmetricSignedPublicKey> SignAsync(AsymmetricPublicKeySigningRequest request, CancellationToken cancellationToken = default) Parameters Type Name Description AsymmetricPublicKeySigningRequest request Key signing request CancellationToken cancellationToken Cancellation token Returns Type Description Task<AsymmetricSignedPublicKey> Signed key (will be disposed, if the used signer stored the signed key in a signed PKI store) Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions wan24.Core.IParallelQueueWorker wan24.Core.IItemQueueWorker<T> wan24.Core.IQueueWorker wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider IProducerConsumerCollection<T> IEnumerable<T> ICollection IEnumerable"
  },
  "api/wan24.Crypto.AsymmetricPrivateKeyBase-2.html": {
    "href": "api/wan24.Crypto.AsymmetricPrivateKeyBase-2.html",
    "title": "Class AsymmetricPrivateKeyBase<tPublic, tPrivate> | wan24-Crypto",
    "keywords": "Class AsymmetricPrivateKeyBase<tPublic, tPrivate> Base class for an asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tPrivate> AsymmetricEcDiffieHellmanPrivateKey AsymmetricEcDsaPrivateKey AsymmetricVoidPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPrivateKeyBase<tPublic, tPrivate>> Inherited Members AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.PrintMembers(StringBuilder) DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableStreamSerializerRecordBase.EqualityContract DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record AsymmetricPrivateKeyBase<tPublic, tPrivate> : AsymmetricKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPrivateKeyBase<tPublic, tPrivate>> where tPublic : AsymmetricPublicKeyBase, IAsymmetricPublicKey, new() where tPrivate : AsymmetricPrivateKeyBase<tPublic, tPrivate>, IAsymmetricPrivateKey, new() Type Parameters Name Description tPublic Public key type tPrivate Private key type Constructors | Edit this page View Source AsymmetricPrivateKeyBase(string) Constructor Declaration protected AsymmetricPrivateKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name Fields | Edit this page View Source _PublicKey Public key Declaration protected tPublic? _PublicKey Field Value Type Description tPublic Properties | Edit this page View Source ID Key ID Declaration public override byte[] ID { get; } Property Value Type Description byte[] Overrides AsymmetricKeyBase.ID | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public abstract tPublic PublicKey { get; } Property Value Type Description tPublic Methods | Edit this page View Source DeriveKey(byte[]) Declaration public virtual byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public virtual byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricKeyBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides AsymmetricKeyBase.DisposeCore() | Edit this page View Source GetCopy() Get a copy Declaration public IAsymmetricPrivateKey GetCopy() Returns Type Description IAsymmetricPrivateKey Copy | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public virtual (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) | Edit this page View Source SignData(byte[], string?, CryptoOptions?) Declaration public virtual SignatureContainer SignData(byte[] data, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description byte[] data string purpose CryptoOptions options Returns Type Description SignatureContainer | Edit this page View Source SignData(Stream, string?, CryptoOptions?) Declaration public virtual SignatureContainer SignData(Stream data, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description Stream data string purpose CryptoOptions options Returns Type Description SignatureContainer | Edit this page View Source SignDataAsync(Stream, string?, CryptoOptions?, CancellationToken) Declaration public virtual Task<SignatureContainer> SignDataAsync(Stream data, string? purpose = null, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data string purpose CryptoOptions options CancellationToken cancellationToken Returns Type Description Task<SignatureContainer> | Edit this page View Source SignHash(byte[], string?, CryptoOptions?) Declaration public virtual SignatureContainer SignHash(byte[] hash, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description byte[] hash string purpose CryptoOptions options Returns Type Description SignatureContainer | Edit this page View Source SignHashRaw(byte[]) Declaration public virtual byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Operators | Edit this page View Source implicit operator byte[](AsymmetricPrivateKeyBase<tPublic, tPrivate>) Cast as serialized data Declaration public static implicit operator byte[](AsymmetricPrivateKeyBase<tPublic, tPrivate> privateKey) Parameters Type Name Description AsymmetricPrivateKeyBase<tPublic, tPrivate> privateKey Private key Returns Type Description byte[] Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IAsymmetricPrivateKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricPublicKeyBase.html": {
    "href": "api/wan24.Crypto.AsymmetricPublicKeyBase.html",
    "title": "Class AsymmetricPublicKeyBase | wan24-Crypto",
    "keywords": "Class AsymmetricPublicKeyBase Base class for an asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase AsymmetricEcDiffieHellmanPublicKey AsymmetricEcDsaPublicKey AsymmetricVoidPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> Inherited Members AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.PrintMembers(StringBuilder) DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableStreamSerializerRecordBase.EqualityContract DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record AsymmetricPublicKeyBase : AsymmetricKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase> Constructors | Edit this page View Source AsymmetricPublicKeyBase(string) Constructor Declaration protected AsymmetricPublicKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name Fields | Edit this page View Source _ID Key ID Declaration protected byte[]? _ID Field Value Type Description byte[] Properties | Edit this page View Source ID Key ID Declaration public override byte[] ID { get; } Property Value Type Description byte[] Overrides AsymmetricKeyBase.ID Methods | Edit this page View Source GetCopy() Get a copy Declaration public abstract IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy | Edit this page View Source ValidateSignature(SignatureContainer, byte[]?, bool) Declaration public virtual bool ValidateSignature(SignatureContainer signature, byte[]? data = null, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature byte[] data bool throwOnError Returns Type Description bool | Edit this page View Source ValidateSignature(SignatureContainer, Stream, bool) Declaration public virtual bool ValidateSignature(SignatureContainer signature, Stream data, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Stream data bool throwOnError Returns Type Description bool | Edit this page View Source ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) Declaration public virtual Task<bool> ValidateSignatureAsync(SignatureContainer signature, Stream data, bool throwOnError = true, CancellationToken cancellationToken = default) Parameters Type Name Description SignatureContainer signature Stream data bool throwOnError CancellationToken cancellationToken Returns Type Description Task<bool> | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected virtual bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public virtual bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Operators | Edit this page View Source implicit operator byte[](AsymmetricPublicKeyBase) Cast as serialized data Declaration public static implicit operator byte[](AsymmetricPublicKeyBase publicKey) Parameters Type Name Description AsymmetricPublicKeyBase publicKey Public key Returns Type Description byte[] Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IAsymmetricPublicKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricPublicKeySigningRequest.html": {
    "href": "api/wan24.Crypto.AsymmetricPublicKeySigningRequest.html",
    "title": "Class AsymmetricPublicKeySigningRequest | wan24-Crypto",
    "keywords": "Class AsymmetricPublicKeySigningRequest Asymmetric public key signing request Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricPublicKeySigningRequest Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricPublicKeySigningRequest> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricPublicKeySigningRequest : DisposableStreamSerializerRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricPublicKeySigningRequest> Constructors | Edit this page View Source AsymmetricPublicKeySigningRequest() Constructor Declaration public AsymmetricPublicKeySigningRequest() | Edit this page View Source AsymmetricPublicKeySigningRequest(IAsymmetricPublicKey, Dictionary<string, string>?, string?, CryptoOptions?) Constructor Declaration public AsymmetricPublicKeySigningRequest(IAsymmetricPublicKey publicKey, Dictionary<string, string>? attributes = null, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey Public key (will be copied) Dictionary<string, string> attributes Attributes string purpose Request purpose (used for signing the request) CryptoOptions options Options (if a private signature key of the given public key is included, this request will be signed) Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Attributes Attributes Declaration [CountLimit(255)] [ItemStringLength(255, ItemValidationTargets.Key)] [ItemStringLength(255, ItemValidationTargets.Item)] public Dictionary<string, string> Attributes { get; } Property Value Type Description Dictionary<string, string> | Edit this page View Source PublicKey Public key (will be disposed) Declaration public IAsymmetricPublicKey PublicKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source Signature Signature Declaration public SignatureContainer? Signature { get; } Property Value Type Description SignatureContainer Methods | Edit this page View Source CreateSignedData() Create the signed data Declaration public byte[] CreateSignedData() Returns Type Description byte[] Signed data | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source GetAsUnsignedKey() Get as unsigned key (a signed request will be validated) Declaration public AsymmetricSignedPublicKey GetAsUnsignedKey() Returns Type Description AsymmetricSignedPublicKey Unsigned key (don't forget to dispose) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SignRequest(ISignaturePrivateKey, CryptoOptions?) Sign the request Declaration public void SignRequest(ISignaturePrivateKey privateKey, CryptoOptions? options = null) Parameters Type Name Description ISignaturePrivateKey privateKey Private key CryptoOptions options Options | Edit this page View Source ValidateRequestSignature(bool) Validate the signing request signature Declaration public bool ValidateRequestSignature(bool throwOnError = true) Parameters Type Name Description bool throwOnError Throw an exception on error? Returns Type Description bool If the signature is valid Operators | Edit this page View Source explicit operator AsymmetricPublicKeySigningRequest(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricPublicKeySigningRequest(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricPublicKeySigningRequest | Edit this page View Source implicit operator byte[](AsymmetricPublicKeySigningRequest) Cast as serialized data Declaration public static implicit operator byte[](AsymmetricPublicKeySigningRequest request) Parameters Type Name Description AsymmetricPublicKeySigningRequest request Request Returns Type Description byte[] | Edit this page View Source implicit operator AsymmetricSignedPublicKey(AsymmetricPublicKeySigningRequest) Cast as unsigned public key Declaration public static implicit operator AsymmetricSignedPublicKey(AsymmetricPublicKeySigningRequest signingRequest) Parameters Type Name Description AsymmetricPublicKeySigningRequest signingRequest Signing request Returns Type Description AsymmetricSignedPublicKey Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.RootTrustAsync_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.RootTrustAsync_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.RootTrustAsync_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.RootTrustAsync_Delegate Delegate for root key trust validation Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task<bool> AsymmetricSignedPublicKey.RootTrustAsync_Delegate(byte[] id, CancellationToken cancellationToken) Parameters Type Name Description byte[] id Root public key ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Is trusted?"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.RootTrust_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.RootTrust_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.RootTrust_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.RootTrust_Delegate Delegate for root key trust validation Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate bool AsymmetricSignedPublicKey.RootTrust_Delegate(byte[] id) Parameters Type Name Description byte[] id Root public key ID Returns Type Description bool Is trusted?"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate Delegate for signed public key revocation validation Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task<bool> AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate(byte[] id, CancellationToken cancellationToken) Parameters Type Name Description byte[] id Signed public key ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the key was revoked"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate Delegate for signed public key revocation validation Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate bool AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate(byte[] id) Parameters Type Name Description byte[] id Signed public key ID Returns Type Description bool If the key was revoked"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate Delegate for a public key store Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task<AsymmetricSignedPublicKey?> AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate(byte[] id, CancellationToken cancellationToken) Parameters Type Name Description byte[] id Signed public key ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<AsymmetricSignedPublicKey> Public key"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate.html",
    "title": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate | wan24-Crypto",
    "keywords": "Delegate AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate Delegate for a public key store Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate AsymmetricSignedPublicKey? AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate(byte[] id) Parameters Type Name Description byte[] id Signed public key ID Returns Type Description AsymmetricSignedPublicKey Public key"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKey.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKey.html",
    "title": "Class AsymmetricSignedPublicKey | wan24-Crypto",
    "keywords": "Class AsymmetricSignedPublicKey Signed asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricSignedPublicKey Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricSignedPublicKey> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricSignedPublicKey : DisposableStreamSerializerRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricSignedPublicKey> Constructors | Edit this page View Source AsymmetricSignedPublicKey() Constructor Declaration public AsymmetricSignedPublicKey() | Edit this page View Source AsymmetricSignedPublicKey(in IAsymmetricPublicKey, in Dictionary<string, string>?) Constructor Declaration public AsymmetricSignedPublicKey(in IAsymmetricPublicKey publicKey, in Dictionary<string, string>? attributes = null) Parameters Type Name Description IAsymmetricPublicKey publicKey Public key (will be copied) Dictionary<string, string> attributes Attributes Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Attributes Attributes Declaration [CountLimit(255)] [ItemStringLength(255, ItemValidationTargets.Key)] [ItemStringLength(255, ItemValidationTargets.Item)] public Dictionary<string, string> Attributes { get; } Property Value Type Description Dictionary<string, string> | Edit this page View Source CounterSigner Counter signed signer public key Declaration public AsymmetricSignedPublicKey? CounterSigner { get; set; } Property Value Type Description AsymmetricSignedPublicKey | Edit this page View Source Created Created time (UTC) Declaration public DateTime Created { get; set; } Property Value Type Description DateTime | Edit this page View Source Expires Expires time (UTC) Declaration public DateTime Expires { get; set; } Property Value Type Description DateTime | Edit this page View Source MaximumTimeDifference Maximum time difference Declaration public static TimeSpan? MaximumTimeDifference { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source PublicKey Signed public key Declaration public IAsymmetricPublicKey PublicKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source RootTrust Root public key trust validation (returns true, if the given root public key ID is trusted) Declaration public static AsymmetricSignedPublicKey.RootTrust_Delegate RootTrust { get; set; } Property Value Type Description AsymmetricSignedPublicKey.RootTrust_Delegate | Edit this page View Source RootTrustAsync Root public key trust validation (returns true, if the given root public key ID is trusted) Declaration public static AsymmetricSignedPublicKey.RootTrustAsync_Delegate RootTrustAsync { get; set; } Property Value Type Description AsymmetricSignedPublicKey.RootTrustAsync_Delegate | Edit this page View Source Signature Signature Declaration public SignatureContainer Signature { get; set; } Property Value Type Description SignatureContainer | Edit this page View Source SignedPublicKeyRevocation Signed public key revocation validation (returns false, if the public key with the given ID wasn't revoked) Declaration public static AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate SignedPublicKeyRevocation { get; set; } Property Value Type Description AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate | Edit this page View Source SignedPublicKeyRevocationAsync Signed public key revocation validation (returns false, if the public key with the given ID wasn't revoked) Declaration public static AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate SignedPublicKeyRevocationAsync { get; set; } Property Value Type Description AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate | Edit this page View Source SignedPublicKeyStore Signed public key store (returns null, if the signed public key with the given ID wasn't found; do not dispose the returned key!) Declaration public static AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate SignedPublicKeyStore { get; set; } Property Value Type Description AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate | Edit this page View Source SignedPublicKeyStoreAsync Signed public key store (returns null, if the signed public key with the given ID wasn't found; do not dispose the returned key!) Declaration public static AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate SignedPublicKeyStoreAsync { get; set; } Property Value Type Description AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate | Edit this page View Source Signer Signed signer public key (if not self signed) Declaration public AsymmetricSignedPublicKey? Signer { get; set; } Property Value Type Description AsymmetricSignedPublicKey | Edit this page View Source Type Key type Declaration public AsymmetricSignedPublicKeyTypes Type { get; } Property Value Type Description AsymmetricSignedPublicKeyTypes Methods | Edit this page View Source CreateSignedData() Create the signed data Declaration public byte[] CreateSignedData() Returns Type Description byte[] Signed data | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source GetCopy() Get a copy of this instance Declaration public AsymmetricSignedPublicKey GetCopy() Returns Type Description AsymmetricSignedPublicKey Instance copy | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source Sign(in ISignaturePrivateKey, in AsymmetricSignedPublicKey?, in ISignaturePrivateKey?, in AsymmetricSignedPublicKey?, in string?, CryptoOptions?) Sign the key Declaration public void Sign(in ISignaturePrivateKey privateKey, in AsymmetricSignedPublicKey? publicKey = null, in ISignaturePrivateKey? counterPrivateKey = null, in AsymmetricSignedPublicKey? counterPublicKey = null, in string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description ISignaturePrivateKey privateKey Private key AsymmetricSignedPublicKey publicKey Signed public key of the signer ISignaturePrivateKey counterPrivateKey Counter private key AsymmetricSignedPublicKey counterPublicKey Signed public key of the counter signer string purpose Purpose CryptoOptions options Options | Edit this page View Source Validate(in bool, in bool, in bool, ValidationOptions?, in bool?) Validate the signature Declaration public bool Validate(in bool deep = true, in bool ignoreTime = false, in bool throwOnError = true, SignedAttributes.ValidationOptions? options = null, in bool? requirePkiSignaturePermission = null) Parameters Type Name Description bool deep Deep validation until the self signed root bool ignoreTime Ignore the time? bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Attribute validation options bool? requirePkiSignaturePermission Require PKI signature permission attribute? (null for automatic) Returns Type Description bool If the signature is valid | Edit this page View Source ValidateAsync(bool, bool, bool, ValidationOptions?, bool?, IServiceProvider?, HttpClient?, CancellationToken) Validate the signature Declaration public Task<bool> ValidateAsync(bool deep = true, bool ignoreTime = false, bool throwOnError = true, SignedAttributes.ValidationOptions? options = null, bool? requirePkiSignaturePermission = null, IServiceProvider? services = null, HttpClient? httpClient = null, CancellationToken cancellationToken = default) Parameters Type Name Description bool deep Deep validation until the self signed root bool ignoreTime Ignore the time? bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Attribute validation options bool? requirePkiSignaturePermission Require PKI signature permission attribute? (null for automatic) IServiceProvider services Service provider to use, if httpClient wasn't given for online key validation HttpClient httpClient http client to use for online key validation (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the signature is valid Operators | Edit this page View Source explicit operator AsymmetricSignedPublicKey(in byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricSignedPublicKey(in byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricSignedPublicKey | Edit this page View Source implicit operator byte[](in AsymmetricSignedPublicKey) Cast as serialized data Declaration public static implicit operator byte[](in AsymmetricSignedPublicKey key) Parameters Type Name Description AsymmetricSignedPublicKey key Key Returns Type Description byte[] Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKeyTypes.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKeyTypes.html",
    "title": "Enum AsymmetricSignedPublicKeyTypes | wan24-Crypto",
    "keywords": "Enum AsymmetricSignedPublicKeyTypes AsymmetricSignedPublicKey types enumeration Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum AsymmetricSignedPublicKeyTypes : byte Fields Name Description End End key FLAGS All flags Intermediate Intermediate signature key Revoked Key was revoked Root Root signature key Unknown Unknown key (not known in PKI) Extension Methods AsymmetricSignedPublicKeyTypesExtensions.IsEnd(AsymmetricSignedPublicKeyTypes) AsymmetricSignedPublicKeyTypesExtensions.IsIntermediate(AsymmetricSignedPublicKeyTypes) AsymmetricSignedPublicKeyTypesExtensions.IsRevoked(AsymmetricSignedPublicKeyTypes) AsymmetricSignedPublicKeyTypesExtensions.IsRoot(AsymmetricSignedPublicKeyTypes) AsymmetricSignedPublicKeyTypesExtensions.IsUnknown(AsymmetricSignedPublicKeyTypes)"
  },
  "api/wan24.Crypto.AsymmetricSignedPublicKeyTypesExtensions.html": {
    "href": "api/wan24.Crypto.AsymmetricSignedPublicKeyTypesExtensions.html",
    "title": "Class AsymmetricSignedPublicKeyTypesExtensions | wan24-Crypto",
    "keywords": "Class AsymmetricSignedPublicKeyTypesExtensions AsymmetricSignedPublicKeyTypes extensions Inheritance object AsymmetricSignedPublicKeyTypesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class AsymmetricSignedPublicKeyTypesExtensions Methods | Edit this page View Source IsEnd(AsymmetricSignedPublicKeyTypes) Is an end key? Declaration public static bool IsEnd(this AsymmetricSignedPublicKeyTypes type) Parameters Type Name Description AsymmetricSignedPublicKeyTypes type Type Returns Type Description bool If is an end key | Edit this page View Source IsIntermediate(AsymmetricSignedPublicKeyTypes) Is an intermediate signature key? Declaration public static bool IsIntermediate(this AsymmetricSignedPublicKeyTypes type) Parameters Type Name Description AsymmetricSignedPublicKeyTypes type Type Returns Type Description bool If is an intermediate signature key | Edit this page View Source IsRevoked(AsymmetricSignedPublicKeyTypes) Is revoked? Declaration public static bool IsRevoked(this AsymmetricSignedPublicKeyTypes type) Parameters Type Name Description AsymmetricSignedPublicKeyTypes type Type Returns Type Description bool If revoked | Edit this page View Source IsRoot(AsymmetricSignedPublicKeyTypes) Is a root signature key? Declaration public static bool IsRoot(this AsymmetricSignedPublicKeyTypes type) Parameters Type Name Description AsymmetricSignedPublicKeyTypes type Type Returns Type Description bool If is a root signature key | Edit this page View Source IsUnknown(AsymmetricSignedPublicKeyTypes) Is unknown? Declaration public static bool IsUnknown(this AsymmetricSignedPublicKeyTypes type) Parameters Type Name Description AsymmetricSignedPublicKeyTypes type Type Returns Type Description bool If unknown"
  },
  "api/wan24.Crypto.AsymmetricVoidAlgorithm.html": {
    "href": "api/wan24.Crypto.AsymmetricVoidAlgorithm.html",
    "title": "Class AsymmetricVoidAlgorithm | wan24-Crypto",
    "keywords": "Class AsymmetricVoidAlgorithm Asymmetric void algorithm (used in case there's no asymmetric algorithm available) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey> AsymmetricVoidAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>> IEquatable<AsymmetricVoidAlgorithm> Inherited Members AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.State AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.State CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricVoidAlgorithm : AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>>, IEquatable<AsymmetricVoidAlgorithm> Constructors | Edit this page View Source AsymmetricVoidAlgorithm() Constructor Declaration public AsymmetricVoidAlgorithm() Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"VOID\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = -1 Field Value Type Description int | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange | Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration public override FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.AllowedKeySizes | Edit this page View Source Instance Instance Declaration public static AsymmetricVoidAlgorithm Instance { get; } Property Value Type Description AsymmetricVoidAlgorithm | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration public override bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.IsEllipticCurveAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.IsPublicKeyStandardFormat | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source Usages Key usages Declaration public override AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.Usages Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricVoidPrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricVoidPrivateKey Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.CreateKeyPair(CryptoOptions) | Edit this page View Source DeserializePrivateKeyV1(byte[]) Deserialize library v1 private key data (will be removed in v3) Declaration public override AsymmetricVoidPrivateKey DeserializePrivateKeyV1(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description AsymmetricVoidPrivateKey Private key Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeserializePrivateKeyV1(byte[]) | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration public override bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Overrides AsymmetricAlgorithmBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.EnsureAllowed(in bool) Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration Implements IEquatable<T> IAsymmetricAlgorithm ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> Extension Methods CryptoExtensions.CreateKeyPools(IAsymmetricAlgorithm, int, bool) CryptoExtensions.CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) CryptoExtensions.GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) CryptoExtensions.GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken)"
  },
  "api/wan24.Crypto.AsymmetricVoidPrivateKey.html": {
    "href": "api/wan24.Crypto.AsymmetricVoidPrivateKey.html",
    "title": "Class AsymmetricVoidPrivateKey | wan24-Crypto",
    "keywords": "Class AsymmetricVoidPrivateKey Private asymmetric void key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey> AsymmetricVoidPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>> ISignaturePrivateKey IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricVoidPrivateKey> Inherited Members AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.ID AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricVoidPrivateKey : AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>>, ISignaturePrivateKey, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricVoidPrivateKey> Constructors | Edit this page View Source AsymmetricVoidPrivateKey() Constructor Declaration public AsymmetricVoidPrivateKey() Exceptions Type Condition NotSupportedException Not supported | Edit this page View Source AsymmetricVoidPrivateKey(in byte[]) Constructor Declaration public AsymmetricVoidPrivateKey(in byte[] keyData) Parameters Type Name Description byte[] keyData Key data Exceptions Type Condition NotSupportedException Notsupported Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override AsymmetricVoidPublicKey PublicKey { get; } Property Value Type Description AsymmetricVoidPublicKey Overrides AsymmetricPrivateKeyBase<AsymmetricVoidPublicKey, AsymmetricVoidPrivateKey>.PublicKey Methods | Edit this page View Source EnsureAllowedCurve(in bool) Ensure using an allowed elliptic curve Declaration protected override bool EnsureAllowedCurve(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an axception if the used curve was denied? Returns Type Description bool Overrides AsymmetricKeyBase.EnsureAllowedCurve(in bool) Exceptions Type Condition CryptographicException The used elliptic curve was denieds | Edit this page View Source EnsurePqcRequirement(in bool) Ensure PQC requirement Declaration protected override bool EnsurePqcRequirement(in bool throwIfRequirementMismatch = true) Parameters Type Name Description bool throwIfRequirementMismatch Throw an axception if the PQC requirement does not match? Returns Type Description bool Overrides AsymmetricKeyBase.EnsurePqcRequirement(in bool) Exceptions Type Condition CryptographicException The PQC requirement does not match Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> ISignaturePrivateKey IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.AsymmetricVoidPublicKey.html": {
    "href": "api/wan24.Crypto.AsymmetricVoidPublicKey.html",
    "title": "Class AsymmetricVoidPublicKey | wan24-Crypto",
    "keywords": "Class AsymmetricVoidPublicKey Public asymmetric void key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase AsymmetricVoidPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricVoidPublicKey> Inherited Members AsymmetricPublicKeyBase.ID AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricKeyBase.VERSION AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record AsymmetricVoidPublicKey : AsymmetricPublicKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricVoidPublicKey> Constructors | Edit this page View Source AsymmetricVoidPublicKey() Constructor Declaration public AsymmetricVoidPublicKey() Exceptions Type Condition NotSupportedException Not supported | Edit this page View Source AsymmetricVoidPublicKey(in byte[]) Constructor Declaration public AsymmetricVoidPublicKey(in byte[] keyData) Parameters Type Name Description byte[] keyData Key data Exceptions Type Condition NotSupportedException Notsupported Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides AsymmetricKeyBase.Bits Methods | Edit this page View Source EnsureAllowedCurve(in bool) Ensure using an allowed elliptic curve Declaration protected override bool EnsureAllowedCurve(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an axception if the used curve was denied? Returns Type Description bool Overrides AsymmetricKeyBase.EnsureAllowedCurve(in bool) Exceptions Type Condition CryptographicException The used elliptic curve was denieds | Edit this page View Source EnsurePqcRequirement(in bool) Ensure PQC requirement Declaration protected override bool EnsurePqcRequirement(in bool throwIfRequirementMismatch = true) Parameters Type Name Description bool throwIfRequirementMismatch Throw an axception if the PQC requirement does not match? Returns Type Description bool Overrides AsymmetricKeyBase.EnsurePqcRequirement(in bool) Exceptions Type Condition CryptographicException The PQC requirement does not match | Edit this page View Source GetCopy() Get a copy Declaration public override IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy Overrides AsymmetricPublicKeyBase.GetCopy() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.AuthSequences.html": {
    "href": "api/wan24.Crypto.Authentication.AuthSequences.html",
    "title": "Enum AuthSequences | wan24-Crypto",
    "keywords": "Enum AuthSequences Authentication sequences enumeration Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public enum AuthSequences : byte Fields Name Description Authentication Authentication (client does send an authentication request) Error Error response (peer closed the connection) PublicKeyRequest Public server key request (peer will send a public key suite) Signup Signup (client does send a signup request)"
  },
  "api/wan24.Crypto.Authentication.ClientAuth.AuthPayload.html": {
    "href": "api/wan24.Crypto.Authentication.ClientAuth.AuthPayload.html",
    "title": "Class ClientAuth.AuthPayload | wan24-Crypto",
    "keywords": "Class ClientAuth.AuthPayload Authentication payload Inheritance object ValidatableObjectBase StreamSerializerBase ClientAuth.AuthPayload Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members StreamSerializerBase.BASE_VERSION ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class ClientAuth.AuthPayload : StreamSerializerBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source AuthPayload() Constructor Declaration public AuthPayload() | Edit this page View Source AuthPayload(in byte[]?, in byte[]?, in PublicKeySuite?, in AsymmetricPublicKeySigningRequest?) Constructor Declaration public AuthPayload(in byte[]? payload, in byte[]? publicKeyId = null, in PublicKeySuite? publicKeys = null, in AsymmetricPublicKeySigningRequest? ksr = null) Parameters Type Name Description byte[] payload Payload byte[] publicKeyId ID of the public key (null during authentication, only required for the signup) PublicKeySuite publicKeys Public keys (only during signup) AsymmetricPublicKeySigningRequest ksr Key signing request (only during signup) Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Created Created time (UTC) Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source IsExistingClient Is an existing client? Declaration public bool IsExistingClient { get; } Property Value Type Description bool | Edit this page View Source IsNewClient Is a new client? (may still be an existing client which wants to update his public keys, if the PAKE authentication exists and is valid!) Declaration public bool IsNewClient { get; } Property Value Type Description bool | Edit this page View Source IsTemporaryClient Is a temporary client? Declaration public bool IsTemporaryClient { get; } Property Value Type Description bool | Edit this page View Source KeySigningRequest Key signing request (only during signup) Declaration public AsymmetricPublicKeySigningRequest? KeySigningRequest { get; } Property Value Type Description AsymmetricPublicKeySigningRequest | Edit this page View Source Payload Payload Declaration [CountLimit(32767)] [SensitiveData] public byte[]? Payload { get; } Property Value Type Description byte[] | Edit this page View Source PublicKeyId ID of the public key (null during authentication, only required for the signup) Declaration [CountLimit(64)] public byte[]? PublicKeyId { get; } Property Value Type Description byte[] | Edit this page View Source PublicKeys Public keys (only during signup) Declaration [RequiredIf(\"KeySigningRequest\", new object?[] { })] public PublicKeySuite? PublicKeys { get; } Property Value Type Description PublicKeySuite Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source implicit operator AuthPayload(in byte[]) Cast from serialized data Declaration public static implicit operator ClientAuth.AuthPayload(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description ClientAuth.AuthPayload | Edit this page View Source implicit operator byte[](in AuthPayload) Cast as serialized data Declaration public static implicit operator byte[](in ClientAuth.AuthPayload payload) Parameters Type Name Description ClientAuth.AuthPayload payload Payload Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.Crypto.Authentication.ClientAuth.ServerPublicKeyValidation_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ClientAuth.ServerPublicKeyValidation_Delegate.html",
    "title": "Delegate ClientAuth.ServerPublicKeyValidation_Delegate | wan24-Crypto",
    "keywords": "Delegate ClientAuth.ServerPublicKeyValidation_Delegate Delegate for a public server key validation handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task<bool> ClientAuth.ServerPublicKeyValidation_Delegate(PublicKeySuite serverPublicKey, CancellationToken cancellationToken) Parameters Type Name Description PublicKeySuite serverPublicKey Server public key (will be disposed!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If to use the key (may throw also)"
  },
  "api/wan24.Crypto.Authentication.ClientAuth.html": {
    "href": "api/wan24.Crypto.Authentication.ClientAuth.html",
    "title": "Class ClientAuth | wan24-Crypto",
    "keywords": "Class ClientAuth Client authentication sequence helper Inheritance object ClientAuth Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public static class ClientAuth Fields | Edit this page View Source AUTH_SIGNATURE_PURPOSE Purpose of the signature from the authentication Declaration public const string AUTH_SIGNATURE_PURPOSE = \"Authentication\" Field Value Type Description string | Edit this page View Source SIGNUP_SIGNATURE_PURPOSE Purpose of the signature from the signup Declaration public const string SIGNUP_SIGNATURE_PURPOSE = \"Signup\" Field Value Type Description string | Edit this page View Source VERSION Protocol version Declaration public const byte VERSION = 1 Field Value Type Description byte Properties | Edit this page View Source DefaultServerPublicKeyValidator Default public server key validator Declaration public static ClientAuth.ServerPublicKeyValidation_Delegate? DefaultServerPublicKeyValidator { get; set; } Property Value Type Description ClientAuth.ServerPublicKeyValidation_Delegate Methods | Edit this page View Source AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) Authenticate Declaration public static Task<byte[]> AuthenticateAsync(this Stream stream, ClientAuthOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (requires blocking) ClientAuthOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> PFS session key (should be cleared!) | Edit this page View Source SignupAsync(Stream, ClientAuthOptions?, CancellationToken) Signup Declaration public static Task<byte[]> SignupAsync(this Stream stream, ClientAuthOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (requires blocking) ClientAuthOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> PFS session key (should be cleared!) | Edit this page View Source ValidateServerPublicKeySuiteAsync(PublicKeySuite, CancellationToken) Validate a servers public key suite using the PKI (can be used as DefaultServerPublicKeyValidator, for example) Declaration public static Task<bool> ValidateServerPublicKeySuiteAsync(PublicKeySuite serverPublicKey, CancellationToken cancellationToken) Parameters Type Name Description PublicKeySuite serverPublicKey Servers public key suite CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the servers public key suite is trusted | Edit this page View Source ValidateSignedServerPublicKeySuiteAsync(PublicKeySuite, CancellationToken) Validate a signed servers public key suite using the PKI (can be used as DefaultServerPublicKeyValidator, for example) Declaration public static Task<bool> ValidateSignedServerPublicKeySuiteAsync(PublicKeySuite serverPublicKey, CancellationToken cancellationToken) Parameters Type Name Description PublicKeySuite serverPublicKey Servers public key suite CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the servers public key suite is trusted"
  },
  "api/wan24.Crypto.Authentication.ClientAuthContext.html": {
    "href": "api/wan24.Crypto.Authentication.ClientAuthContext.html",
    "title": "Class ClientAuthContext | wan24-Crypto",
    "keywords": "Class ClientAuthContext Client authentication context Inheritance object DisposableRecordBase ClientAuthContext Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<ClientAuthContext> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record ClientAuthContext : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<ClientAuthContext> Properties | Edit this page View Source Created Created time Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Identity Identity (will be cleared!) Declaration [SensitiveData] public PakeRecord Identity { get; } Property Value Type Description PakeRecord | Edit this page View Source IsNewClient Is a new client? Declaration public bool IsNewClient { get; } Property Value Type Description bool | Edit this page View Source IsTemporaryClient Is a temporary client? Declaration public bool IsTemporaryClient { get; } Property Value Type Description bool | Edit this page View Source Payload Payload (will be disposed!) Declaration [NoValidation(false)] [SensitiveData] public SecureByteArray? Payload { get; } Property Value Type Description SecureByteArray | Edit this page View Source PublicKeys Public keys (will be disposed!) Declaration public PublicKeySuite PublicKeys { get; } Property Value Type Description PublicKeySuite | Edit this page View Source SessionKey Session key (will be disposed!) Declaration [NoValidation(false)] [SensitiveData] public SecureValue SessionKey { get; } Property Value Type Description SecureValue | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object | Edit this page View Source TimeOffset Client time offset Declaration public TimeSpan TimeOffset { get; } Property Value Type Description TimeSpan Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.ClientAuthOptions.html": {
    "href": "api/wan24.Crypto.Authentication.ClientAuthOptions.html",
    "title": "Class ClientAuthOptions | wan24-Crypto",
    "keywords": "Class ClientAuthOptions Client authentication options Inheritance object ClientAuthOptions Implements IEquatable<ClientAuthOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record ClientAuthOptions : IEquatable<ClientAuthOptions> Constructors | Edit this page View Source ClientAuthOptions(in PrivateKeySuite, in byte[], in byte[]?, in byte[]?) Constructor Declaration public ClientAuthOptions(in PrivateKeySuite privateKeys, in byte[] login, in byte[]? pwd = null, in byte[]? preSharedSecret = null) Parameters Type Name Description PrivateKeySuite privateKeys Private keys byte[] login Login ID (will be cleared!) byte[] pwd Login password (will be cleared!) byte[] preSharedSecret Pre-shared signup secret (will be cleared!) | Edit this page View Source ClientAuthOptions(in PrivateKeySuite, in ISymmetricKeySuite?, in byte[]?) Constructor Declaration public ClientAuthOptions(in PrivateKeySuite privateKeys, in ISymmetricKeySuite? symmetricKey, in byte[]? preSharedSecret = null) Parameters Type Name Description PrivateKeySuite privateKeys Private keys ISymmetricKeySuite symmetricKey Symmetric key suite (won't be disposed!) byte[] preSharedSecret Pre-shared signup secret (will be cleared!) Properties | Edit this page View Source CryptoOptions Crypto options (require encryption algorithms; shouldn't use KDF; cipher must not require MAC authentication) Declaration public CryptoOptions? CryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultOptions Default options (will be cloned for delivery) Declaration public static ClientAuthOptions? DefaultOptions { get; set; } Property Value Type Description ClientAuthOptions | Edit this page View Source EncryptPayload Encrypt the payload? Declaration public bool EncryptPayload { get; set; } Property Value Type Description bool | Edit this page View Source FastPakeAuth Fast PAKE authentication client (won't be disposed!) Declaration public FastPakeAuthClient? FastPakeAuth { get; set; } Property Value Type Description FastPakeAuthClient | Edit this page View Source GetAuthenticationResponse Get the server authentication response? (the server will send an encrypted signature of the the authentication sequence excluding the client signature) Declaration public bool GetAuthenticationResponse { get; set; } Property Value Type Description bool | Edit this page View Source HashOptions Hash options (require hash algorithm) Declaration public CryptoOptions? HashOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source Login Login ID (will be cleared!) Declaration [SensitiveData] public byte[]? Login { get; } Property Value Type Description byte[] | Edit this page View Source PakeOptions PAKE options (require KDF and MAC algorithms) Declaration public CryptoOptions? PakeOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source Password Login password (will be cleared!) Declaration [SensitiveData] public byte[]? Password { get; } Property Value Type Description byte[] | Edit this page View Source Payload Payload (will be cleared!) Declaration [SensitiveData] public byte[]? Payload { get; set; } Property Value Type Description byte[] | Edit this page View Source PayloadFactory Payload factory Declaration public Pake.PayloadFactory_Delegate? PayloadFactory { get; set; } Property Value Type Description Pake.PayloadFactory_Delegate | Edit this page View Source PreSharedSecret Pre-shared signup secret (will be cleared!) Declaration [SensitiveData] public byte[]? PreSharedSecret { get; } Property Value Type Description byte[] | Edit this page View Source PrivateKeys Private keys Declaration public PrivateKeySuite PrivateKeys { get; } Property Value Type Description PrivateKeySuite | Edit this page View Source PublicKeySigningRequest Public client key signing request to be processed by the server during signup (will be disposed!) Declaration public AsymmetricPublicKeySigningRequest? PublicKeySigningRequest { get; set; } Property Value Type Description AsymmetricPublicKeySigningRequest | Edit this page View Source PublicServerKeys Server public keys Declaration public PublicKeySuite? PublicServerKeys { get; set; } Property Value Type Description PublicKeySuite | Edit this page View Source ServerKeyValidator Server public key validation handler Declaration public ClientAuth.ServerPublicKeyValidation_Delegate? ServerKeyValidator { get; set; } Property Value Type Description ClientAuth.ServerPublicKeyValidation_Delegate | Edit this page View Source SymmetricKey Symmetric key suite Declaration public ISymmetricKeySuite? SymmetricKey { get; } Property Value Type Description ISymmetricKeySuite Methods | Edit this page View Source GetCopy() Get a copy of this instance (only public properties - internal properties won't be cloned!) Declaration public ClientAuthOptions GetCopy() Returns Type Description ClientAuthOptions Instance copy Implements IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.IPakeAuthRecord.html": {
    "href": "api/wan24.Crypto.Authentication.IPakeAuthRecord.html",
    "title": "Interface IPakeAuthRecord | wan24-Crypto",
    "keywords": "Interface IPakeAuthRecord Interface for a PAKE authenticaion record Inherited Members IPakeRecord.Identifier IPakeRecord.Secret IPakeRecord.SignatureKey Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public interface IPakeAuthRecord : IPakeRecord Properties | Edit this page View Source Key Authentication key (this is sensitive data and should be stored encrypted; will be cleared!) Declaration byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source RawSecret Raw secret (unprotected; this is sensitive data and should be stored encrypted; will be cleared!) Declaration byte[] RawSecret { get; } Property Value Type Description byte[] Extension Methods PakeAuthRecordExtensions.DeriveSessionKey(IPakeAuthRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeAuthRecordExtensions.Dispose(IPakeAuthRecord) PakeAuthRecordExtensions.DisposeAsync(IPakeAuthRecord) PakeRecordExtensions.DeriveSessionKey(IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeRecordExtensions.Dispose(IPakeRecord) PakeRecordExtensions.DisposeAsync(IPakeRecord)"
  },
  "api/wan24.Crypto.Authentication.IPakeAuthRecordPool.html": {
    "href": "api/wan24.Crypto.Authentication.IPakeAuthRecordPool.html",
    "title": "Interface IPakeAuthRecordPool | wan24-Crypto",
    "keywords": "Interface IPakeAuthRecordPool PAKE authentication record pool Inherited Members IInstancePool<PakeAuthRecord>.GetOne() IInstancePool<PakeAuthRecord>.GetOneAsync(CancellationToken) IInstancePool<PakeAuthRecord>.GetMany(int, CancellationToken) IInstancePool<PakeAuthRecord>.GetManyAsync(int, CancellationToken) IInstancePool.GetOneObject() IInstancePool.GetOneObjectAsync(CancellationToken) IInstancePool.GetManyObjects(int, CancellationToken) IInstancePool.GetManyObjectsAsync(int, CancellationToken) IInstancePool.Capacity IInstancePool.Available IInstancePool.Created IInstancePool.CreatedOnDemand IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public interface IPakeAuthRecordPool : IInstancePool<PakeAuthRecord>, IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Options Options (returns a clone of the used options) Declaration CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source GetRecord() Get a record Declaration IPakeAuthRecord GetRecord() Returns Type Description IPakeAuthRecord PAKE authentication record | Edit this page View Source GetRecordAsync(CancellationToken) Get a key Declaration Task<IPakeAuthRecord> GetRecordAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<IPakeAuthRecord> PAKE authentication record"
  },
  "api/wan24.Crypto.Authentication.PakeAuthContext.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthContext.html",
    "title": "Class PakeAuthContext | wan24-Crypto",
    "keywords": "Class PakeAuthContext PAKE authentication context Inheritance object DisposableRecordBase PakeAuthContext Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<PakeAuthContext> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record PakeAuthContext : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<PakeAuthContext> Properties | Edit this page View Source ClientTimeOffset Client time offset (server side only) Declaration public TimeSpan? ClientTimeOffset { get; } Property Value Type Description TimeSpan? | Edit this page View Source Identity Peer identity (will be cleared/disposed!) Declaration public IPakeRecord? Identity { get; } Property Value Type Description IPakeRecord | Edit this page View Source Record PAKE authentication record (for signup only; will be cleared!) Declaration public IPakeAuthRecord? Record { get; } Property Value Type Description IPakeAuthRecord | Edit this page View Source SessionKey Session key (will be disposed!) Declaration [NoValidation(false)] public SecureValue SessionKey { get; } Property Value Type Description SecureValue Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.PakeAuthRecord.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthRecord.html",
    "title": "Class PakeAuthRecord | wan24-Crypto",
    "keywords": "Class PakeAuthRecord PAKE authentication record (keep the contents secret!) Inheritance object ValidatableRecordBase StreamSerializerRecordBase PakeAuthRecord Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IPakeAuthRecord IPakeRecord IEquatable<PakeAuthRecord> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record PakeAuthRecord : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IPakeAuthRecord, IPakeRecord, IEquatable<PakeAuthRecord> Constructors | Edit this page View Source PakeAuthRecord() Constructor Declaration public PakeAuthRecord() | Edit this page View Source PakeAuthRecord(in byte[], in byte[], in byte[], in byte[]?) Constructor Declaration public PakeAuthRecord(in byte[] identifier, in byte[] rawSecret, in byte[] key, in byte[]? signatureKey = null) Parameters Type Name Description byte[] identifier Identifier (will be cleared!) byte[] rawSecret Raw secret (will be cleared!) byte[] key Key (will be cleared!) byte[] signatureKey Signature key (will be cleared!) | Edit this page View Source PakeAuthRecord(in IPakeAuthRecord) Constructor Declaration public PakeAuthRecord(in IPakeAuthRecord existing) Parameters Type Name Description IPakeAuthRecord existing Existing record (will be cloned) | Edit this page View Source PakeAuthRecord(in PakeSignup, in byte[]) Constructor Declaration public PakeAuthRecord(in PakeSignup signup, in byte[] signatureKey) Parameters Type Name Description PakeSignup signup Signup byte[] signatureKey Signature key (will be cleared!) Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Identifier Identifier (will be cleared!) Declaration public byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Key Authentication key (this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source RawSecret Raw secret (unprotected; this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] RawSecret { get; } Property Value Type Description byte[] | Edit this page View Source Secret Secret (protected with the authentication key; this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] Secret { get; } Property Value Type Description byte[] | Edit this page View Source SignatureKey Signature key (this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] SignatureKey { get; } Property Value Type Description byte[] Methods | Edit this page View Source Clear() Clear the contents Declaration public void Clear() | Edit this page View Source CreateRandom(in Pake?, in CryptoOptions?, int?) Create a random PAKE authentication record Declaration public static PakeAuthRecord CreateRandom(in Pake? pake = null, in CryptoOptions? options = null, int? valueLength = null) Parameters Type Name Description Pake pake PAKE instance CryptoOptions options Options int? valueLength PAKE values length in bytes Returns Type Description PakeAuthRecord Record | Edit this page View Source CreateRandomAsync(Pake?, CryptoOptions?, int?) Create a random PAKE authentication record Declaration public static Task<PakeAuthRecord> CreateRandomAsync(Pake? pake = null, CryptoOptions? options = null, int? valueLength = null) Parameters Type Name Description Pake pake PAKE instance CryptoOptions options Options int? valueLength PAKE values length in bytes Returns Type Description Task<PakeAuthRecord> Record | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetSignatureKey(in byte[]) Set the signature key, if not set yet Declaration public void SetSignatureKey(in byte[] signatureKey) Parameters Type Name Description byte[] signatureKey Signature key (will be cleared!) Operators | Edit this page View Source explicit operator PakeAuthRecord(in byte[]) Cast from serialized data Declaration public static explicit operator PakeAuthRecord(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description PakeAuthRecord | Edit this page View Source implicit operator byte[](in PakeAuthRecord) Cast as serialized data Declaration public static implicit operator byte[](in PakeAuthRecord signup) Parameters Type Name Description PakeAuthRecord signup PakeRecord Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IPakeAuthRecord IPakeRecord IEquatable<T> Extension Methods PakeAuthRecordExtensions.DeriveSessionKey(IPakeAuthRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeAuthRecordExtensions.Dispose(IPakeAuthRecord) PakeAuthRecordExtensions.DisposeAsync(IPakeAuthRecord) PakeRecordExtensions.DeriveSessionKey(IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeRecordExtensions.Dispose(IPakeRecord) PakeRecordExtensions.DisposeAsync(IPakeRecord)"
  },
  "api/wan24.Crypto.Authentication.PakeAuthRecordExtensions.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthRecordExtensions.html",
    "title": "Class PakeAuthRecordExtensions | wan24-Crypto",
    "keywords": "Class PakeAuthRecordExtensions IPakeAuthRecord extensions Inheritance object PakeAuthRecordExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public static class PakeAuthRecordExtensions Methods | Edit this page View Source DeriveSessionKey(IPakeAuthRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) Derive a session key Declaration public static (byte[] SessionKey, byte[] Payload) DeriveSessionKey(this IPakeAuthRecord record, in PakeAuth auth, in Action<Pake>? initializer = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in bool decryptPayload = false) Parameters Type Name Description IPakeAuthRecord record Record (will be cleared/disposed!) PakeAuth auth Authentication (will be disposed!) Action<Pake> initializer PAKE instance initializer CryptoOptions options Options CryptoOptions cryptoOptions Options for encryption bool decryptPayload Decrypt the payload? Returns Type Description (byte[] Key, byte[] KeyExchangeData) Session key and payload | Edit this page View Source Dispose(IPakeAuthRecord) Dispose the PAKE record Declaration public static void Dispose(this IPakeAuthRecord record) Parameters Type Name Description IPakeAuthRecord record Record | Edit this page View Source DisposeAsync(IPakeAuthRecord) Dispose the PAKE record Declaration public static Task DisposeAsync(this IPakeAuthRecord record) Parameters Type Name Description IPakeAuthRecord record Record Returns Type Description Task"
  },
  "api/wan24.Crypto.Authentication.PakeAuthRecordPool.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthRecordPool.html",
    "title": "Class PakeAuthRecordPool | wan24-Crypto",
    "keywords": "Class PakeAuthRecordPool PAKE authentication record pool Inheritance object DisposableBase HostedServiceBase InstancePool<PakeAuthRecord> PakeAuthRecordPool Implements IWillDispose IExportUserActions IPakeAuthRecordPool IInstancePool<PakeAuthRecord> IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members InstancePool<PakeAuthRecord>.GetOne() InstancePool<PakeAuthRecord>.GetOneAsync(CancellationToken) InstancePool<PakeAuthRecord>.GetMany(int, CancellationToken) InstancePool<PakeAuthRecord>.GetManyAsync(int, CancellationToken) InstancePool<PakeAuthRecord>.GUID InstancePool<PakeAuthRecord>.ServiceProvider InstancePool<PakeAuthRecord>.Capacity InstancePool<PakeAuthRecord>.Available InstancePool<PakeAuthRecord>.Created InstancePool<PakeAuthRecord>.CreatedOnDemand InstancePool<PakeAuthRecord>.State HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.OnException DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class PakeAuthRecordPool : InstancePool<PakeAuthRecord>, IWillDispose, IExportUserActions, IPakeAuthRecordPool, IInstancePool<PakeAuthRecord>, IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source PakeAuthRecordPool(in int, in CryptoOptions?) Constructor Declaration public PakeAuthRecordPool(in int capacity, in CryptoOptions? options = null) Parameters Type Name Description int capacity Capacity CryptoOptions options Options with KDF and MAC settings (will be cleared!) Properties | Edit this page View Source Options Options (returns a clone of the used options) Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source GetRecord() Get a record Declaration public IPakeAuthRecord GetRecord() Returns Type Description IPakeAuthRecord PAKE authentication record | Edit this page View Source GetRecordAsync(CancellationToken) Get a key Declaration public Task<IPakeAuthRecord> GetRecordAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<IPakeAuthRecord> PAKE authentication record Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions IPakeAuthRecordPool wan24.Core.IInstancePool<T> wan24.Core.IInstancePool wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.Authentication.PakeAuthRecordStore-1.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthRecordStore-1.html",
    "title": "Class PakeAuthRecordStore<T> | wan24-Crypto",
    "keywords": "Class PakeAuthRecordStore<T> PAKE authentication record store Inheritance object DisposableBase DisposableStreamSerializerBase PakeAuthRecordStore<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public class PakeAuthRecordStore<T> : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject where T : notnull, IPakeAuthRecord Type Parameters Name Description T Constructors | Edit this page View Source PakeAuthRecordStore() Constructor Declaration public PakeAuthRecordStore() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int | Edit this page View Source _Records PAKE authentication records (key is the identifier) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, T> _Records Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, T> Properties | Edit this page View Source Records PAKE authentication records (key is the identifier) Declaration public ConcurrentDictionary<EquatableArray<byte>, T> Records { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, T> | Edit this page View Source RecordsCount Number of PAKE authentication records Declaration public virtual int RecordsCount { get; } Property Value Type Description int Methods | Edit this page View Source AddRecord(in T) Add a PAKE authentication record Declaration public void AddRecord(in T record) Parameters Type Name Description T record PAKE authentication record (will be cleared/disposed!) | Edit this page View Source AddRecordAsync(T) Add a PAKE authentication record Declaration public Task AddRecordAsync(T record) Parameters Type Name Description T record PAKE authentication record (will be cleared/disposed!) Returns Type Description Task | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source GetRecord(byte[]) Get a PAKE authentication record Declaration public T? GetRecord(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier Returns Type Description T PAKE authentication record (will be cleared/disposed) | Edit this page View Source RemoveRecord(byte[]) Remove and clear/dispose a PAKE authentication record Declaration public void RemoveRecord(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier | Edit this page View Source RemoveRecordAsync(byte[]) Remove and clear/dispose a PAKE authentication record Declaration public Task RemoveRecordAsync(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier Returns Type Description Task | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject"
  },
  "api/wan24.Crypto.Authentication.PakeAuthRecordStore.html": {
    "href": "api/wan24.Crypto.Authentication.PakeAuthRecordStore.html",
    "title": "Class PakeAuthRecordStore | wan24-Crypto",
    "keywords": "Class PakeAuthRecordStore PAKE authentication record store Inheritance object DisposableBase DisposableStreamSerializerBase PakeRecordStore<IPakeAuthRecord> PakeAuthRecordStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members PakeRecordStore<IPakeAuthRecord>.VERSION PakeRecordStore<IPakeAuthRecord>.ChangeToken PakeRecordStore<IPakeAuthRecord>._Records PakeRecordStore<IPakeAuthRecord>.Records PakeRecordStore<IPakeAuthRecord>.RecordsCount PakeRecordStore<IPakeAuthRecord>.HasChanged PakeRecordStore<IPakeAuthRecord>.ActiveChangeCallbacks PakeRecordStore<IPakeAuthRecord>.AddRecord(in IPakeAuthRecord) PakeRecordStore<IPakeAuthRecord>.AddRecordAsync(IPakeAuthRecord) PakeRecordStore<IPakeAuthRecord>.GetRecord(byte[]) PakeRecordStore<IPakeAuthRecord>.RemoveRecord(byte[]) PakeRecordStore<IPakeAuthRecord>.RemoveRecordAsync(byte[]) PakeRecordStore<IPakeAuthRecord>.RegisterChangeCallback(Action<object>, object) PakeRecordStore<IPakeAuthRecord>.SetChanged(in string) PakeRecordStore<IPakeAuthRecord>.Serialize(Stream) PakeRecordStore<IPakeAuthRecord>.SerializeAsync(Stream, CancellationToken) PakeRecordStore<IPakeAuthRecord>.Deserialize(Stream, int) PakeRecordStore<IPakeAuthRecord>.DeserializeAsync(Stream, int, CancellationToken) PakeRecordStore<IPakeAuthRecord>.Dispose(bool) PakeRecordStore<IPakeAuthRecord>.DisposeCore() PakeRecordStore<IPakeAuthRecord>.PropertyChanged DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public class PakeAuthRecordStore : PakeRecordStore<IPakeAuthRecord>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source PakeAuthRecordStore() Constructor Declaration public PakeAuthRecordStore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.Authentication.PakeClientAuth.AuthPayload.html": {
    "href": "api/wan24.Crypto.Authentication.PakeClientAuth.AuthPayload.html",
    "title": "Class PakeClientAuth.AuthPayload | wan24-Crypto",
    "keywords": "Class PakeClientAuth.AuthPayload Authentication payload Inheritance object ValidatableObjectBase StreamSerializerBase PakeClientAuth.AuthPayload Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members StreamSerializerBase.BASE_VERSION ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class PakeClientAuth.AuthPayload : StreamSerializerBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source AuthPayload() Constructor Declaration public AuthPayload() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Created Created time (UTC) Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Payload Payload Declaration [CountLimit(32767)] [SensitiveData] public byte[]? Payload { get; } Property Value Type Description byte[] Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source implicit operator AuthPayload(in byte[]) Cast from serialized data Declaration public static implicit operator PakeClientAuth.AuthPayload(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description PakeClientAuth.AuthPayload | Edit this page View Source implicit operator byte[](in AuthPayload) Cast as serialized data Declaration public static implicit operator byte[](in PakeClientAuth.AuthPayload payload) Parameters Type Name Description PakeClientAuth.AuthPayload payload Payload Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.Crypto.Authentication.PakeClientAuth.html": {
    "href": "api/wan24.Crypto.Authentication.PakeClientAuth.html",
    "title": "Class PakeClientAuth | wan24-Crypto",
    "keywords": "Class PakeClientAuth PAKE client authentication Inheritance object PakeClientAuth Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public static class PakeClientAuth Methods | Edit this page View Source AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) Perform an authentication Declaration public static Task<PakeAuthContext> AuthenticateAsync(this Stream stream, PakeClientAuthOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (must be blocking!) PakeClientAuthOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeAuthContext> Context (don't forget to dispose!) | Edit this page View Source SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) Perform a signup Declaration public static Task<PakeAuthContext> SignupAsync(this Stream stream, PakeClientAuthOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (must be blocking and encrypted!) PakeClientAuthOptions options Options (will be disposed!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeAuthContext> Context (don't forget to dispose!)"
  },
  "api/wan24.Crypto.Authentication.PakeClientAuthOptions.html": {
    "href": "api/wan24.Crypto.Authentication.PakeClientAuthOptions.html",
    "title": "Class PakeClientAuthOptions | wan24-Crypto",
    "keywords": "Class PakeClientAuthOptions PAKE authentication options Inheritance object DisposableRecordBase PakeClientAuthOptions Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<PakeClientAuthOptions> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record PakeClientAuthOptions : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<PakeClientAuthOptions> Constructors | Edit this page View Source PakeClientAuthOptions(in byte[], in byte[], in byte[]?) Constructor Declaration public PakeClientAuthOptions(in byte[] login, in byte[] pwd, in byte[]? preSharedSecret = null) Parameters Type Name Description byte[] login Login ID (will be cleared!) byte[] pwd Login password (will be cleared!) byte[] preSharedSecret Pre-shared signup secret (will be cleared!) | Edit this page View Source PakeClientAuthOptions(in byte[], in byte[], in IPakeAuthRecord) Constructor Declaration public PakeClientAuthOptions(in byte[] login, in byte[] pwd, in IPakeAuthRecord peerIdentity) Parameters Type Name Description byte[] login Login ID (will be cleared!) byte[] pwd Login password (will be cleared!) IPakeAuthRecord peerIdentity Peer identity (won't be disposed) | Edit this page View Source PakeClientAuthOptions(in FastPakeAuthClient, in IPakeAuthRecord) Constructor Declaration public PakeClientAuthOptions(in FastPakeAuthClient client, in IPakeAuthRecord peerIdentity) Parameters Type Name Description FastPakeAuthClient client Fast PAKE authentication client (won't be disposed) IPakeAuthRecord peerIdentity Peer identity (won't be disposed) | Edit this page View Source PakeClientAuthOptions(in ISymmetricKeySuite, in byte[]?) Constructor Declaration public PakeClientAuthOptions(in ISymmetricKeySuite symmetricKey, in byte[]? preSharedSecret = null) Parameters Type Name Description ISymmetricKeySuite symmetricKey Symmetric key suite (won't be disposed) byte[] preSharedSecret Pre-shared signup secret (will be cleared!) | Edit this page View Source PakeClientAuthOptions(in ISymmetricKeySuite, in IPakeAuthRecord) Constructor Declaration public PakeClientAuthOptions(in ISymmetricKeySuite symmetricKey, in IPakeAuthRecord peerIdentity) Parameters Type Name Description ISymmetricKeySuite symmetricKey Symmetric key suite (won't be disposed) IPakeAuthRecord peerIdentity Peer identity (won't be disposed) Properties | Edit this page View Source ClientPayloadFactory Client payload factory Declaration public Pake.PayloadFactory_Delegate? ClientPayloadFactory { get; set; } Property Value Type Description Pake.PayloadFactory_Delegate | Edit this page View Source CryptoOptions Crypto options (require encryption algorithms; shouldn't use KDF; cipher must not require MAC authentication) Declaration public CryptoOptions? CryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultOptions Default options (will be cloned for delivery; should/will be disposed!) Declaration public static PakeClientAuthOptions? DefaultOptions { get; set; } Property Value Type Description PakeClientAuthOptions | Edit this page View Source EncryptPayload Encrypt the payload? Declaration public bool EncryptPayload { get; set; } Property Value Type Description bool | Edit this page View Source EncryptTimeout Session key value encrypt timeout (SecureValue) Declaration public TimeSpan? EncryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source FastPakeAuthClient Fast PAKE authentication client (won't be disposed) Declaration public FastPakeAuthClient? FastPakeAuthClient { get; } Property Value Type Description FastPakeAuthClient | Edit this page View Source GetAuthenticationResponse Get the server authentication response? (the server will confirm a successful authentication) Declaration public bool GetAuthenticationResponse { get; set; } Property Value Type Description bool | Edit this page View Source IsSignup Is for signup? Declaration public bool IsSignup { get; } Property Value Type Description bool | Edit this page View Source Login Login ID (will be cleared!) Declaration [SensitiveData] public byte[]? Login { get; } Property Value Type Description byte[] | Edit this page View Source PakeOptions PAKE options (require KDF and MAC algorithms) Declaration public CryptoOptions? PakeOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source Password Login password (will be cleared!) Declaration [SensitiveData] public byte[]? Password { get; } Property Value Type Description byte[] | Edit this page View Source Payload Payload (will be cleared!) Declaration [SensitiveData] public byte[]? Payload { get; set; } Property Value Type Description byte[] | Edit this page View Source PeerIdentity Peer identity (won't be disposed) Declaration public IPakeAuthRecord? PeerIdentity { get; } Property Value Type Description IPakeAuthRecord | Edit this page View Source PreSharedSecret Pre-shared signup secret (will be cleared!) Declaration [SensitiveData] public byte[]? PreSharedSecret { get; } Property Value Type Description byte[] | Edit this page View Source RecryptTimeout Session key value re-crypt timeout (SecureValue) Declaration public TimeSpan? RecryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source ServerPayloadProcessor Server payload processor Declaration public Pake.PayloadProcessor_Delegate? ServerPayloadProcessor { get; set; } Property Value Type Description Pake.PayloadProcessor_Delegate | Edit this page View Source SessionKeyCryptoOptions Options for encrypting the session key value (SecureValue) Declaration public CryptoOptions? SessionKeyCryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source SessionKeyKekLength Session key KEK length in bytes (SecureValue) Declaration public int SessionKeyKekLength { get; set; } Property Value Type Description int | Edit this page View Source SymmetricKey Symmetric key suite (won't be disposed) Declaration public ISymmetricKeySuite? SymmetricKey { get; } Property Value Type Description ISymmetricKeySuite Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source GetCopy() Get a copy of this instance Declaration public PakeClientAuthOptions GetCopy() Returns Type Description PakeClientAuthOptions Instance copy Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.Authentication_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.Authentication_Delegate.html",
    "title": "Delegate PakeServerAuth.Authentication_Delegate | wan24-Crypto",
    "keywords": "Delegate PakeServerAuth.Authentication_Delegate Delegate for a signup handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task PakeServerAuth.Authentication_Delegate(PakeServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description PakeServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a signup handler"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.ClientAuthFactory_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.ClientAuthFactory_Delegate.html",
    "title": "Delegate PakeServerAuth.ClientAuthFactory_Delegate | wan24-Crypto",
    "keywords": "Delegate PakeServerAuth.ClientAuthFactory_Delegate Delegate for a client authentication information factory Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task PakeServerAuth.ClientAuthFactory_Delegate(PakeServerAuthContext context, ReadOnlyMemory<byte> serverAuthIdentifier, CancellationToken cancellationToken) Parameters Type Name Description PakeServerAuthContext context Context ReadOnlyMemory<byte> serverAuthIdentifier Authentication server identifier CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a client authentication information factory"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.PakeEventArgs.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.PakeEventArgs.html",
    "title": "Class PakeServerAuth.PakeEventArgs | wan24-Crypto",
    "keywords": "Class PakeServerAuth.PakeEventArgs PAKE event arguments Inheritance object EventArgs PakeServerAuth.PakeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class PakeServerAuth.PakeEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source PakeEventArgs(PakeServerAuthContext, Pake, PakeServerEventArgs) PAKE event arguments Declaration public PakeEventArgs(PakeServerAuthContext context, Pake pake, Pake.PakeServerEventArgs pakeServerEventArgs) Parameters Type Name Description PakeServerAuthContext context Context Pake pake PAKE instance Pake.PakeServerEventArgs pakeServerEventArgs Pake server event arguments of the original event Remarks Constructor Properties | Edit this page View Source Context Context Declaration public PakeServerAuthContext Context { get; } Property Value Type Description PakeServerAuthContext | Edit this page View Source Pake PAKE instance Declaration public Pake Pake { get; } Property Value Type Description Pake | Edit this page View Source PakeServerEventArgs Pake server event arguments of the original event Declaration public Pake.PakeServerEventArgs PakeServerEventArgs { get; } Property Value Type Description Pake.PakeServerEventArgs"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.PakeEvent_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.PakeEvent_Delegate.html",
    "title": "Delegate PakeServerAuth.PakeEvent_Delegate | wan24-Crypto",
    "keywords": "Delegate PakeServerAuth.PakeEvent_Delegate Delegate for a PAKE event handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate void PakeServerAuth.PakeEvent_Delegate(PakeServerAuth serverAuth, PakeServerAuth.PakeEventArgs e) Parameters Type Name Description PakeServerAuth serverAuth Server authentication PakeServerAuth.PakeEventArgs e Arguments"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.SignupValidator_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.SignupValidator_Delegate.html",
    "title": "Delegate PakeServerAuth.SignupValidator_Delegate | wan24-Crypto",
    "keywords": "Delegate PakeServerAuth.SignupValidator_Delegate Delegate for a signup validator Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task<bool> PakeServerAuth.SignupValidator_Delegate(PakeServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description PakeServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If to continue with the signup"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.Signup_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.Signup_Delegate.html",
    "title": "Delegate PakeServerAuth.Signup_Delegate | wan24-Crypto",
    "keywords": "Delegate PakeServerAuth.Signup_Delegate Delegate for a signup handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task PakeServerAuth.Signup_Delegate(PakeServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description PakeServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a signup handler"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuth.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuth.html",
    "title": "Class PakeServerAuth | wan24-Crypto",
    "keywords": "Class PakeServerAuth PAKE authentication server Inheritance object DisposableBase PakeServerAuth Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class PakeServerAuth : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source PakeServerAuth(in PakeServerAuthOptions) Constructor Declaration public PakeServerAuth(in PakeServerAuthOptions options) Parameters Type Name Description PakeServerAuthOptions options Options Properties | Edit this page View Source Encryption Encryption algorithm Declaration public EncryptionAlgorithmBase Encryption { get; } Property Value Type Description EncryptionAlgorithmBase | Edit this page View Source Options Options Declaration public PakeServerAuthOptions Options { get; } Property Value Type Description PakeServerAuthOptions | Edit this page View Source ValueLength PAKE value length in bytes Declaration public int ValueLength { get; } Property Value Type Description int Methods | Edit this page View Source AuthenticateAsync(Stream, byte[]?, CancellationToken) Authenticate Declaration public Task<PakeAuthContext> AuthenticateAsync(Stream stream, byte[]? preSharedSecret = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (requires blocking; should be encrypted) byte[] preSharedSecret Pre-shared secret (will be cleared!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeAuthContext> PAKE authentication context (don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Events | Edit this page View Source OnPakeAuth Raised on PAKE authentication (forwards the OnAuth event) Declaration public event PakeServerAuth.PakeEvent_Delegate? OnPakeAuth Event Type Type Description PakeServerAuth.PakeEvent_Delegate | Edit this page View Source OnPakeAuthError Raised on PAKE authentication error (forwards the OnAuthError event) Declaration public event PakeServerAuth.PakeEvent_Delegate? OnPakeAuthError Event Type Type Description PakeServerAuth.PakeEvent_Delegate | Edit this page View Source OnPakeSignup Raised on PAKE signup (forwards the OnSignup event) Declaration public event PakeServerAuth.PakeEvent_Delegate? OnPakeSignup Event Type Type Description PakeServerAuth.PakeEvent_Delegate Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuthContext.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuthContext.html",
    "title": "Class PakeServerAuthContext | wan24-Crypto",
    "keywords": "Class PakeServerAuthContext PAKE authentication server context Inheritance object PakeServerAuthContext Implements IEquatable<PakeServerAuthContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record PakeServerAuthContext : IEquatable<PakeServerAuthContext> Properties | Edit this page View Source ClientIdentity Client identity Declaration public IPakeRecord? ClientIdentity { get; set; } Property Value Type Description IPakeRecord | Edit this page View Source ClientPayload Client payload Declaration public PakeClientAuth.AuthPayload? ClientPayload { get; } Property Value Type Description PakeClientAuth.AuthPayload | Edit this page View Source ClientTimeOffset Client time offset Declaration public TimeSpan? ClientTimeOffset { get; } Property Value Type Description TimeSpan? | Edit this page View Source FastPakeAuthServer Fast PAKE authentication server for the peer authentication handling Declaration public FastPakeAuthServer? FastPakeAuthServer { get; set; } Property Value Type Description FastPakeAuthServer | Edit this page View Source ServerAuthentication Server authentication Declaration public PakeServerAuth ServerAuthentication { get; } Property Value Type Description PakeServerAuth | Edit this page View Source ServerIdentity Server identity Declaration public IPakeAuthRecord? ServerIdentity { get; set; } Property Value Type Description IPakeAuthRecord | Edit this page View Source ServerPayload Server payload Declaration public byte[]? ServerPayload { get; set; } Property Value Type Description byte[] | Edit this page View Source Stream Stream Declaration public Stream Stream { get; } Property Value Type Description Stream Implements IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.PakeServerAuthOptions.html": {
    "href": "api/wan24.Crypto.Authentication.PakeServerAuthOptions.html",
    "title": "Class PakeServerAuthOptions | wan24-Crypto",
    "keywords": "Class PakeServerAuthOptions PAKE server authentication options Inheritance object PakeServerAuthOptions Implements IEquatable<PakeServerAuthOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record PakeServerAuthOptions : IEquatable<PakeServerAuthOptions> Constructors | Edit this page View Source PakeServerAuthOptions() Constructor Declaration public PakeServerAuthOptions() Properties | Edit this page View Source AllowedMacAlgorithms Allowed MAC algorithm names Declaration public string[] AllowedMacAlgorithms { get; set; } Property Value Type Description string[] | Edit this page View Source AuthRecordPool PAKE authentication record pool Declaration public IPakeAuthRecordPool? AuthRecordPool { get; set; } Property Value Type Description IPakeAuthRecordPool | Edit this page View Source AuthenticationHandler Authentication handler Declaration public PakeServerAuth.Authentication_Delegate? AuthenticationHandler { get; set; } Property Value Type Description PakeServerAuth.Authentication_Delegate | Edit this page View Source ClientAuthFactory Client authentication information factory Declaration public PakeServerAuth.ClientAuthFactory_Delegate? ClientAuthFactory { get; set; } Property Value Type Description PakeServerAuth.ClientAuthFactory_Delegate | Edit this page View Source ClientPayloadProcessor Client payload processor Declaration public Pake.PayloadProcessor_Delegate? ClientPayloadProcessor { get; set; } Property Value Type Description Pake.PayloadProcessor_Delegate | Edit this page View Source CryptoOptions Crypto options (require encryption algorithms; shouldn't use KDF; cipher must not require MAC authentication; will be cleared!) Declaration public CryptoOptions? CryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DecryptPayload Decrypt the payload? Declaration public bool DecryptPayload { get; set; } Property Value Type Description bool | Edit this page View Source EncryptTimeout Session key value encrypt timeout (SecureValue) Declaration public TimeSpan? EncryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source MaxTimeDifference Max. time difference to a peers time Declaration public TimeSpan MaxTimeDifference { get; set; } Property Value Type Description TimeSpan | Edit this page View Source PakeOptions PAKE options (require KDF and MAC algorithms; will be cleared!) Declaration public CryptoOptions? PakeOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source RecryptTimeout Session key value re-crypt timeout (SecureValue) Declaration public TimeSpan? RecryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source SendAuthenticationResponse Send a response on authentication? Declaration public bool SendAuthenticationResponse { get; set; } Property Value Type Description bool | Edit this page View Source ServerPayloadFactory Server payload factory Declaration public Pake.PayloadFactory_Delegate? ServerPayloadFactory { get; set; } Property Value Type Description Pake.PayloadFactory_Delegate | Edit this page View Source SessionKeyCryptoOptions Options for encrypting the session key value (SecureValue) Declaration public CryptoOptions? SessionKeyCryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source SessionKeyKekLength Session key KEK length in bytes (SecureValue) Declaration public int SessionKeyKekLength { get; set; } Property Value Type Description int | Edit this page View Source SignupHandler Signup handler Declaration public PakeServerAuth.Signup_Delegate? SignupHandler { get; set; } Property Value Type Description PakeServerAuth.Signup_Delegate | Edit this page View Source SignupValidator Signup validator Declaration public PakeServerAuth.SignupValidator_Delegate? SignupValidator { get; set; } Property Value Type Description PakeServerAuth.SignupValidator_Delegate | Edit this page View Source SkipSignatureKeyValidation Skip the PAKE signature key validation (KDF) during authentication? Declaration public bool SkipSignatureKeyValidation { get; set; } Property Value Type Description bool Implements IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.Authentication_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.Authentication_Delegate.html",
    "title": "Delegate ServerAuth.Authentication_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.Authentication_Delegate Delegate for a authentication handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task ServerAuth.Authentication_Delegate(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a authentication handler"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.Identity_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.Identity_Delegate.html",
    "title": "Delegate ServerAuth.Identity_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.Identity_Delegate Delegate for a identity factory (needs to set Identity and PublicClientKeys) Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task ServerAuth.Identity_Delegate(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a identity factory (needs to set and )"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.PakeEventArgs.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.PakeEventArgs.html",
    "title": "Class ServerAuth.PakeEventArgs | wan24-Crypto",
    "keywords": "Class ServerAuth.PakeEventArgs PAKE event arguments Inheritance object EventArgs ServerAuth.PakeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class ServerAuth.PakeEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source PakeEventArgs(ServerAuthContext, Pake, PakeServerEventArgs) PAKE event arguments Declaration public PakeEventArgs(ServerAuthContext context, Pake pake, Pake.PakeServerEventArgs pakeServerEventArgs) Parameters Type Name Description ServerAuthContext context Context Pake pake PAKE instance Pake.PakeServerEventArgs pakeServerEventArgs Pake server event arguments of the original event Remarks Constructor Properties | Edit this page View Source Context Context Declaration public ServerAuthContext Context { get; } Property Value Type Description ServerAuthContext | Edit this page View Source Pake PAKE instance Declaration public Pake Pake { get; } Property Value Type Description Pake | Edit this page View Source PakeServerEventArgs Pake server event arguments of the original event Declaration public Pake.PakeServerEventArgs PakeServerEventArgs { get; } Property Value Type Description Pake.PakeServerEventArgs"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.PakeEvent_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.PakeEvent_Delegate.html",
    "title": "Delegate ServerAuth.PakeEvent_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.PakeEvent_Delegate Delegate for a PAKE event handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate void ServerAuth.PakeEvent_Delegate(ServerAuth serverAuth, ServerAuth.PakeEventArgs e) Parameters Type Name Description ServerAuth serverAuth Server authentication ServerAuth.PakeEventArgs e Arguments"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.Payload_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.Payload_Delegate.html",
    "title": "Delegate ServerAuth.Payload_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.Payload_Delegate Delegate for a payload handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task ServerAuth.Payload_Delegate(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a payload handler"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.SignupValidator_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.SignupValidator_Delegate.html",
    "title": "Delegate ServerAuth.SignupValidator_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.SignupValidator_Delegate Delegate for a signup validator Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task<bool> ServerAuth.SignupValidator_Delegate(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If to continue with the signup (may throw also)"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.Signup_Delegate.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.Signup_Delegate.html",
    "title": "Delegate ServerAuth.Signup_Delegate | wan24-Crypto",
    "keywords": "Delegate ServerAuth.Signup_Delegate Delegate for a signup handler Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public delegate Task ServerAuth.Signup_Delegate(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a signup handler"
  },
  "api/wan24.Crypto.Authentication.ServerAuth.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuth.html",
    "title": "Class ServerAuth | wan24-Crypto",
    "keywords": "Class ServerAuth Authentication server Inheritance object DisposableBase ServerAuth Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed class ServerAuth : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ServerAuth(in ServerAuthOptions) Constructor Declaration public ServerAuth(in ServerAuthOptions options) Parameters Type Name Description ServerAuthOptions options Options Fields | Edit this page View Source PUBLIC_KEY_SIGNATURE_PURPOSE Public key signature purpose Declaration public const string PUBLIC_KEY_SIGNATURE_PURPOSE = \"Client authentication public signature key\" Field Value Type Description string Properties | Edit this page View Source Encryption Encryption algorithm Declaration public EncryptionAlgorithmBase? Encryption { get; } Property Value Type Description EncryptionAlgorithmBase | Edit this page View Source Options Server authentication options Declaration public ServerAuthOptions Options { get; } Property Value Type Description ServerAuthOptions Methods | Edit this page View Source AuthenticateAsync(Stream, byte[]?, CancellationToken) Authenticate Declaration public Task<ClientAuthContext> AuthenticateAsync(Stream stream, byte[]? preSharedSecret = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream (requires blocking; should be encrypted) byte[] preSharedSecret Pre-shared secret (will be cleared!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<ClientAuthContext> Client authentication context (don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source UpdatePkiAsync(ServerAuthContext, CancellationToken) Adds a new signed public key to the PKI (can be used as SignupHandler, for example) Declaration public static Task UpdatePkiAsync(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ValidateKeySuiteAsync(ServerAuthContext, CancellationToken) Validate the public key suite using the PKI (can be used as PayloadHandler, for example) Declaration public static Task ValidateKeySuiteAsync(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ValidateSignupAsync(ServerAuthContext, bool, CancellationToken) Validates a signup (requires all information to be signed) against the PKI (can be used as SignupValidator, for example) Declaration public static Task<bool> ValidateSignupAsync(ServerAuthContext context, bool allowAttributes, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context bool allowAttributes Allow signed public key attributes? CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If to continue with the signup (may throw also) | Edit this page View Source ValidateSignupAsync(ServerAuthContext, CancellationToken) Validates a signup (requires all information to be signed) against the PKI (can be used as SignupValidator, for example) Declaration public static Task<bool> ValidateSignupAsync(ServerAuthContext context, CancellationToken cancellationToken) Parameters Type Name Description ServerAuthContext context Context CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If to continue with the signup (may throw also) Events | Edit this page View Source OnPakeAuth Raised on PAKE authentication (forwards the OnAuth event) Declaration public event ServerAuth.PakeEvent_Delegate? OnPakeAuth Event Type Type Description ServerAuth.PakeEvent_Delegate | Edit this page View Source OnPakeAuthError Raised on PAKE authentication error (forwards the OnAuthError event) Declaration public event ServerAuth.PakeEvent_Delegate? OnPakeAuthError Event Type Type Description ServerAuth.PakeEvent_Delegate | Edit this page View Source OnPakeSignup Raised on PAKE signup (forwards the OnSignup event) Declaration public event ServerAuth.PakeEvent_Delegate? OnPakeSignup Event Type Type Description ServerAuth.PakeEvent_Delegate Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.Authentication.ServerAuthContext.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuthContext.html",
    "title": "Class ServerAuthContext | wan24-Crypto",
    "keywords": "Class ServerAuthContext Server authentication context Inheritance object ServerAuthContext Implements IEquatable<ServerAuthContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record ServerAuthContext : IEquatable<ServerAuthContext> Properties | Edit this page View Source Authentication PAKE authentication (will be disposed!) Declaration public PakeAuth? Authentication { get; } Property Value Type Description PakeAuth | Edit this page View Source ClientTimeOffset Client time offset Declaration public TimeSpan ClientTimeOffset { get; } Property Value Type Description TimeSpan | Edit this page View Source CryptoOptions Options for encryption Declaration public CryptoOptions CryptoOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source FastPakeAuth Fast PAKE authentication server (won't be disposed!) Declaration public FastPakeAuthServer? FastPakeAuth { get; set; } Property Value Type Description FastPakeAuthServer | Edit this page View Source FoundExistingClient Found an existing client for a signup? Declaration public bool FoundExistingClient { get; set; } Property Value Type Description bool | Edit this page View Source HashOptions Hash options Declaration public CryptoOptions HashOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source Identity PAKE identity (will be disposed!) Declaration public IPakeRecord? Identity { get; set; } Property Value Type Description IPakeRecord | Edit this page View Source PakeOptions PAKE options Declaration public CryptoOptions PakeOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source Payload Payload Declaration public ClientAuth.AuthPayload? Payload { get; } Property Value Type Description ClientAuth.AuthPayload | Edit this page View Source PublicClientKeys Client public keys (will be disposed!) Declaration public PublicKeySuite? PublicClientKeys { get; set; } Property Value Type Description PublicKeySuite | Edit this page View Source ServerAuthentication Server authentication Declaration public ServerAuth ServerAuthentication { get; } Property Value Type Description ServerAuth | Edit this page View Source Signup PAKE signup (will be disposed!) Declaration public PakeSignup? Signup { get; } Property Value Type Description PakeSignup | Edit this page View Source Stream Stream Declaration public Stream Stream { get; } Property Value Type Description Stream | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object Implements IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.ServerAuthOptions.html": {
    "href": "api/wan24.Crypto.Authentication.ServerAuthOptions.html",
    "title": "Class ServerAuthOptions | wan24-Crypto",
    "keywords": "Class ServerAuthOptions Server authentication options Inheritance object ServerAuthOptions Implements IEquatable<ServerAuthOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.Authentication Assembly: wan24Crypto.dll Syntax public sealed record ServerAuthOptions : IEquatable<ServerAuthOptions> Constructors | Edit this page View Source ServerAuthOptions(in PrivateKeySuite, in Identity_Delegate?) Constructor Declaration public ServerAuthOptions(in PrivateKeySuite privateKeys, in ServerAuth.Identity_Delegate? identityFactory = null) Parameters Type Name Description PrivateKeySuite privateKeys Private keys (will be disposed!) ServerAuth.Identity_Delegate identityFactory Identity factory (required for signup/authentication) Properties | Edit this page View Source AllowAuthentication Allow authentication? Declaration public bool AllowAuthentication { get; set; } Property Value Type Description bool | Edit this page View Source AllowPublicKeyRequest Allow public key request? Declaration public bool AllowPublicKeyRequest { get; set; } Property Value Type Description bool | Edit this page View Source AllowSignup Allow signup? Declaration public bool AllowSignup { get; set; } Property Value Type Description bool | Edit this page View Source AllowTemporaryClient Allow the signup of a temporary client? Declaration public bool AllowTemporaryClient { get; set; } Property Value Type Description bool | Edit this page View Source AllowedMacAlgorithms Allowed PAKE MAC algorithm names Declaration public string[] AllowedMacAlgorithms { get; set; } Property Value Type Description string[] | Edit this page View Source AuthenticationHandler Authentication handler Declaration public ServerAuth.Authentication_Delegate? AuthenticationHandler { get; set; } Property Value Type Description ServerAuth.Authentication_Delegate | Edit this page View Source CryptoOptions Crypto options (require encryption algorithms; shouldn't use KDF; cipher must not require MAC authentication; will be cleared!) Declaration public CryptoOptions? CryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DecryptPayload Decrypt the payload during authentication? Declaration public bool DecryptPayload { get; set; } Property Value Type Description bool | Edit this page View Source EncryptTimeout Session key value encrypt timeout (SecureValue) Declaration public TimeSpan? EncryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source HashOptions Hash options (require hash algorithm; will be cleared!) Declaration public CryptoOptions? HashOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source IdentityFactory Identity factory Declaration public ServerAuth.Identity_Delegate? IdentityFactory { get; set; } Property Value Type Description ServerAuth.Identity_Delegate | Edit this page View Source MaxTimeDifference Max. time difference to a peers time Declaration public TimeSpan MaxTimeDifference { get; set; } Property Value Type Description TimeSpan | Edit this page View Source PakeOptions PAKE options (require KDF and MAC algorithms; will be cleared!) Declaration public CryptoOptions? PakeOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source PayloadHandler Payload handler Declaration public ServerAuth.Payload_Delegate? PayloadHandler { get; set; } Property Value Type Description ServerAuth.Payload_Delegate | Edit this page View Source PayloadProcessor Payload processor Declaration public Pake.PayloadProcessor_Delegate? PayloadProcessor { get; set; } Property Value Type Description Pake.PayloadProcessor_Delegate | Edit this page View Source PfsCounterKeyPool PFS counter key pool Declaration public IAsymmetricKeyPool? PfsCounterKeyPool { get; set; } Property Value Type Description IAsymmetricKeyPool | Edit this page View Source PfsKeyPool PFS key pool Declaration public IAsymmetricKeyPool? PfsKeyPool { get; set; } Property Value Type Description IAsymmetricKeyPool | Edit this page View Source PrivateKeys Private keys (will be disposed!) Declaration [SensitiveData] public PrivateKeySuite PrivateKeys { get; } Property Value Type Description PrivateKeySuite | Edit this page View Source PublicClientKeySignaturePurpose Public client key signature purpose Declaration [MinLength(1)] [MaxLength(255)] public string PublicClientKeySignaturePurpose { get; set; } Property Value Type Description string | Edit this page View Source RecryptTimeout Session key value re-crypt timeout (SecureValue) Declaration public TimeSpan? RecryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source SendAuthenticationResponse Send a response on authentication? Declaration public bool SendAuthenticationResponse { get; set; } Property Value Type Description bool | Edit this page View Source SessionKeyCryptoOptions Options for encrypting the session key value (SecureValue) Declaration public CryptoOptions? SessionKeyCryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source SessionKeyKekLength Session key KEK length in bytes (SecureValue) Declaration public int SessionKeyKekLength { get; set; } Property Value Type Description int | Edit this page View Source SignClientPublicKey Sign the client public key on request? Declaration public bool SignClientPublicKey { get; set; } Property Value Type Description bool | Edit this page View Source SignupHandler Signup handler Declaration public ServerAuth.Signup_Delegate? SignupHandler { get; set; } Property Value Type Description ServerAuth.Signup_Delegate | Edit this page View Source SignupValidator Signup validator Declaration public ServerAuth.SignupValidator_Delegate? SignupValidator { get; set; } Property Value Type Description ServerAuth.SignupValidator_Delegate | Edit this page View Source SkipPakeSignatureKeyValidation Skip the PAKE signature key validation (KDF) during authentication? Declaration public bool SkipPakeSignatureKeyValidation { get; set; } Property Value Type Description bool Implements IEquatable<T>"
  },
  "api/wan24.Crypto.Authentication.html": {
    "href": "api/wan24.Crypto.Authentication.html",
    "title": "Namespace wan24.Crypto.Authentication | wan24-Crypto",
    "keywords": "Namespace wan24.Crypto.Authentication Classes ClientAuth Client authentication sequence helper ClientAuth.AuthPayload Authentication payload ClientAuthContext Client authentication context ClientAuthOptions Client authentication options PakeAuthContext PAKE authentication context PakeAuthRecord PAKE authentication record (keep the contents secret!) PakeAuthRecordExtensions IPakeAuthRecord extensions PakeAuthRecordPool PAKE authentication record pool PakeAuthRecordStore PAKE authentication record store PakeAuthRecordStore<T> PAKE authentication record store PakeClientAuth PAKE client authentication PakeClientAuth.AuthPayload Authentication payload PakeClientAuthOptions PAKE authentication options PakeServerAuth PAKE authentication server PakeServerAuth.PakeEventArgs PAKE event arguments PakeServerAuthContext PAKE authentication server context PakeServerAuthOptions PAKE server authentication options ServerAuth Authentication server ServerAuth.PakeEventArgs PAKE event arguments ServerAuthContext Server authentication context ServerAuthOptions Server authentication options Interfaces IPakeAuthRecord Interface for a PAKE authenticaion record IPakeAuthRecordPool PAKE authentication record pool Enums AuthSequences Authentication sequences enumeration Delegates ClientAuth.ServerPublicKeyValidation_Delegate Delegate for a public server key validation handler PakeServerAuth.Authentication_Delegate Delegate for a signup handler PakeServerAuth.ClientAuthFactory_Delegate Delegate for a client authentication information factory PakeServerAuth.PakeEvent_Delegate Delegate for a PAKE event handler PakeServerAuth.SignupValidator_Delegate Delegate for a signup validator PakeServerAuth.Signup_Delegate Delegate for a signup handler ServerAuth.Authentication_Delegate Delegate for a authentication handler ServerAuth.Identity_Delegate Delegate for a identity factory (needs to set Identity and PublicClientKeys) ServerAuth.PakeEvent_Delegate Delegate for a PAKE event handler ServerAuth.Payload_Delegate Delegate for a payload handler ServerAuth.SignupValidator_Delegate Delegate for a signup validator ServerAuth.Signup_Delegate Delegate for a signup handler"
  },
  "api/wan24.Crypto.BackupRng.html": {
    "href": "api/wan24.Crypto.BackupRng.html",
    "title": "Class BackupRng | wan24-Crypto",
    "keywords": "Class BackupRng RNG which uses backup RNGs on error Inheritance object RngBase BackupRng Implements IRng Inherited Members RngBase.GetBytes(in int) RngBase.GetBytesAsync(int, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class BackupRng : RngBase, IRng Constructors | Edit this page View Source BackupRng(params IRng[]) Constructor Declaration public BackupRng(params IRng[] rngs) Parameters Type Name Description IRng[] rngs RNGs Properties | Edit this page View Source RNGs RNGs Declaration public FrozenSet<IRng> RNGs { get; } Property Value Type Description FrozenSet<IRng> Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides RngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides RngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.BinaryPayloadContainer.html": {
    "href": "api/wan24.Crypto.BinaryPayloadContainer.html",
    "title": "Class BinaryPayloadContainer | wan24-Crypto",
    "keywords": "Class BinaryPayloadContainer Binary payload container (you should extend this type and define the min./max. payload length in bytes in the MinPayloadLength and MaxPayloadLength properties (can be done by calling the protected constructors); default max. length is MaxValue, while the default min. length is 1 byte) Inheritance object ValidatableRecordBase StreamSerializerRecordBase BinaryPayloadContainer Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IEquatable<StreamSerializerRecordBase> IBinaryPayloadContainer IStreamSerializerVersion IStreamSerializer IEquatable<BinaryPayloadContainer> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.PrintMembers(StringBuilder) StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() StreamSerializerRecordBase.EqualityContract StreamSerializerRecordBase.SerializedObjectVersion StreamSerializerRecordBase.SerializerVersion ValidatableRecordBase.Validate(ValidationContext) ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public record BinaryPayloadContainer : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IEquatable<StreamSerializerRecordBase>, IBinaryPayloadContainer, IStreamSerializerVersion, IStreamSerializer, IEquatable<BinaryPayloadContainer> Constructors | Edit this page View Source BinaryPayloadContainer() Constructor Declaration public BinaryPayloadContainer() | Edit this page View Source BinaryPayloadContainer(byte[]) Constructor Declaration public BinaryPayloadContainer(byte[] payload) Parameters Type Name Description byte[] payload Payload | Edit this page View Source BinaryPayloadContainer(int, int, byte[], int?) Constructor Declaration protected BinaryPayloadContainer(int minLen, int maxLen, byte[] payload, int? hlVersion = null) Parameters Type Name Description int minLen Minimum payload length in bytes int maxLen Maximum payload length in bytes byte[] payload Payload int? hlVersion Higher level object version | Edit this page View Source BinaryPayloadContainer(int, int, int?) Constructor Declaration protected BinaryPayloadContainer(int minLen, int maxLen, int? hlVersion = null) Parameters Type Name Description int minLen Minimum payload length in bytes int maxLen Maximum payload length in bytes int? hlVersion Higher level object version Fields | Edit this page View Source DeserializedHlObjectVersion Deserialized higher level object version (null, if no higher level object version was given or this instance wasn't deserialized) Declaration protected int? DeserializedHlObjectVersion Field Value Type Description int? | Edit this page View Source HlObjectVersion Higher level object version (null, if no higher level object version was given) Declaration protected readonly int? HlObjectVersion Field Value Type Description int? | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source MaxPayloadLength Maximum payload length in bytes Declaration public virtual int MaxPayloadLength { get; protected set; } Property Value Type Description int | Edit this page View Source MinPayloadLength Minimum payload length in bytes Declaration public virtual int MinPayloadLength { get; protected set; } Property Value Type Description int | Edit this page View Source Payload Payload Declaration public virtual byte[] Payload { get; protected set; } Property Value Type Description byte[] Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source DeserializeHlVersion(Stream, int) Deserialize the higher level object version Declaration protected virtual void DeserializeHlVersion(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version | Edit this page View Source DeserializeHlVersionAsync(Stream, int, CancellationToken) Deserialize the higher level object version Declaration protected virtual Task DeserializeHlVersionAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source EnsureValidHlVersion() Ensure a valid deserialized higher level object version Declaration protected virtual void EnsureValidHlVersion() | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IBinaryPayloadContainer wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T>"
  },
  "api/wan24.Crypto.Bootstrap.html": {
    "href": "api/wan24.Crypto.Bootstrap.html",
    "title": "Class Bootstrap | wan24-Crypto",
    "keywords": "Class Bootstrap Bootstrapper Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class Bootstrap Methods | Edit this page View Source Boot() Boot Declaration public static void Boot()"
  },
  "api/wan24.Crypto.Constants.html": {
    "href": "api/wan24.Crypto.Constants.html",
    "title": "Class Constants | wan24-Crypto",
    "keywords": "Class Constants Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class Constants Fields | Edit this page View Source CRYPTO_ERROR_SOURCE Crypto error source ID Declaration public const int CRYPTO_ERROR_SOURCE = 5 Field Value Type Description int | Edit this page View Source PAKE_REQUEST_MIME_TYPE PAKE request MIME type Declaration public const string PAKE_REQUEST_MIME_TYPE = \"application/x.wan24.pake.request\" Field Value Type Description string | Edit this page View Source PAKE_RESPONSE_MIME_TYPE PAKE response MIME type Declaration public const string PAKE_RESPONSE_MIME_TYPE = \"application/x.wan24.pake.response\" Field Value Type Description string"
  },
  "api/wan24.Crypto.CryptoAlgorithmBase.html": {
    "href": "api/wan24.Crypto.CryptoAlgorithmBase.html",
    "title": "Class CryptoAlgorithmBase | wan24-Crypto",
    "keywords": "Class CryptoAlgorithmBase Base class for a cryptographic algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<tPublic, tPrivate> EncryptionAlgorithmBase HashAlgorithmBase KdfAlgorithmBase MacAlgorithmBase Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record CryptoAlgorithmBase : ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase> Constructors | Edit this page View Source CryptoAlgorithmBase(string, int) Constructor Declaration protected CryptoAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source DisplayName Display name Declaration public virtual string DisplayName { get; } Property Value Type Description string | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public abstract bool IsPostQuantum { get; } Property Value Type Description bool | Edit this page View Source IsSupported Is supported? Declaration public virtual bool IsSupported { get; } Property Value Type Description bool | Edit this page View Source Name Algorithm name Declaration [StringLength(255)] public string Name { get; } Property Value Type Description string | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source UsesTpm Uses a TPM? Declaration public virtual bool UsesTpm { get; } Property Value Type Description bool | Edit this page View Source Value Algorithm value Declaration [Range(0, 2147483647)] public int Value { get; } Property Value Type Description int Methods | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration public virtual bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration | Edit this page View Source EnsurePqcRequirement(in bool) Ensure PQC requirement Declaration protected virtual bool EnsurePqcRequirement(in bool throwIfRequirementMismatch = true) Parameters Type Name Description bool throwIfRequirementMismatch Throw an axception if the PQC requirement does not match Returns Type Description bool Exceptions Type Condition CryptographicException The PQC requirement does not match | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.CryptoAppConfig.CryptoOptions.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.CryptoOptions.html",
    "title": "Class CryptoAppConfig.CryptoOptions | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.CryptoOptions Crypto options Inheritance object CryptoAppConfig.CryptoOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.CryptoOptions Constructors | Edit this page View Source CryptoOptions() Constructor Declaration public CryptoOptions() Properties | Edit this page View Source DefaultFlags Default CryptoAppConfig.CryptoOptions flags (will be used for requirements, too) Declaration public CryptoFlags? DefaultFlags { get; set; } Property Value Type Description CryptoFlags? | Edit this page View Source DefaultMaximumAge Default maximum cipher data age for decryption Declaration public TimeSpan? DefaultMaximumAge { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultMaximumTimeOffset Default maximum time offset for decryption Declaration public TimeSpan? DefaultMaximumTimeOffset { get; set; } Property Value Type Description TimeSpan? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.DefaultAlgorithms.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.DefaultAlgorithms.html",
    "title": "Class CryptoAppConfig.DefaultAlgorithms | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.DefaultAlgorithms Default algorithms Inheritance object CryptoAppConfig.DefaultAlgorithms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.DefaultAlgorithms Constructors | Edit this page View Source DefaultAlgorithms() Constructor Declaration public DefaultAlgorithms() Properties | Edit this page View Source CounterKdfAlgorithm Counter KDF algorithm Declaration [StringLength(255)] public string? CounterKdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterKeyExchangeAlgorithm Counter key exchange algorithm Declaration [StringLength(255)] public string? CounterKeyExchangeAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterMacAlgorithm Counter MAC algorithm Declaration [StringLength(255)] public string? CounterMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterSignatureAlgorithm Counter signature algorithm Declaration [StringLength(255)] public string? CounterSignatureAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultEncryptionAlgorithm Default encryption algorithm Declaration [StringLength(255)] public string? DefaultEncryptionAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultHashAlgorithm Default hash algorithm Declaration [StringLength(255)] public string? DefaultHashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultKdfAlgorithm Default KDF algorithm Declaration [StringLength(255)] public string? DefaultKdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultKeyExchangeAlgorithm Default key exchange algorithm Declaration [StringLength(255)] public string? DefaultKeyExchangeAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultMacAlgorithm Default MAC algorithm Declaration [StringLength(255)] public string? DefaultMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultSignatureAlgorithm Default signature algorithm Declaration [StringLength(255)] public string? DefaultSignatureAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DeniedAsymmetric Denied asymmetric algorithms (key is the algorithm value, value the algorithm name) Declaration public Dictionary<int, string>? DeniedAsymmetric { get; set; } Property Value Type Description Dictionary<int, string> | Edit this page View Source DeniedEllipticCurves Denied elliptic curve names Declaration public string[]? DeniedEllipticCurves { get; set; } Property Value Type Description string[] | Edit this page View Source DeniedEncryption Denied encryption algorithms (key is the algorithm value, value the algorithm name) Declaration public Dictionary<int, string>? DeniedEncryption { get; set; } Property Value Type Description Dictionary<int, string> | Edit this page View Source DisabledAsymmetric Disabled asymmetric algorithm names Declaration public string[]? DisabledAsymmetric { get; set; } Property Value Type Description string[] | Edit this page View Source DisabledEncryption Disabled encryption algorithm names Declaration public string[]? DisabledEncryption { get; set; } Property Value Type Description string[] | Edit this page View Source DisabledHash Disabled hash algorithm names Declaration public string[]? DisabledHash { get; set; } Property Value Type Description string[] | Edit this page View Source DisabledKdf Disabled KDF algorithm names Declaration public string[]? DisabledKdf { get; set; } Property Value Type Description string[] | Edit this page View Source DisabledMac Disabled MAC algorithm names Declaration public string[]? DisabledMac { get; set; } Property Value Type Description string[] | Edit this page View Source PbKdf2HashAlgorithm Default PBKDF#2 hash algorithm name for the KdfPbKdf2Options Declaration [StringLength(255)] public string? PbKdf2HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source Sp800_108HashAlgorithm Default SP800-108 hash algorithm name for the KdfSp800_801HmacKbKdfOptions Declaration [StringLength(255)] public string? Sp800_108HashAlgorithm { get; set; } Property Value Type Description string Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.EntropyOptions.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.EntropyOptions.html",
    "title": "Class CryptoAppConfig.EntropyOptions | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.EntropyOptions Entropy options Inheritance object CryptoAppConfig.EntropyOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.EntropyOptions Constructors | Edit this page View Source EntropyOptions() Constructor Declaration public EntropyOptions() Properties | Edit this page View Source DefaultAlgorithm Default algorithm bits Declaration [DeniedValues(new object?[] { 0 })] public int? DefaultAlgorithm { get; set; } Property Value Type Description int? | Edit this page View Source DefaultAlgorithms Default algorithms bits Declaration public int? DefaultAlgorithms { get; set; } Property Value Type Description int? | Edit this page View Source MinCustomEntropy Min. required custom entropy (zero to disable checks) Declaration public double? MinCustomEntropy { get; set; } Property Value Type Description double? | Edit this page View Source MinShannonBitEntropy Min. required Shannon bit entropy (zero to disable checks) Declaration public double? MinShannonBitEntropy { get; set; } Property Value Type Description double? | Edit this page View Source MinShannonByteEntropy Min. required Shannon byte entropy (zero to disable checks) Declaration public double? MinShannonByteEntropy { get; set; } Property Value Type Description double? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.Limitations.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.Limitations.html",
    "title": "Class CryptoAppConfig.Limitations | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.Limitations Limitations Inheritance object CryptoAppConfig.Limitations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.Limitations Constructors | Edit this page View Source Limitations() Constructor Declaration public Limitations() Properties | Edit this page View Source AsymmetricKeyMaxArrayLength Max. array length in serialized data in bytes Declaration [Range(1, 2147483647)] public int? AsymmetricKeyMaxArrayLength { get; set; } Property Value Type Description int? | Edit this page View Source MaxKeyExchangeDataLength Max. key exchange data length in bytes Declaration [Range(1, 2147483647)] public int? MaxKeyExchangeDataLength { get; set; } Property Value Type Description int? | Edit this page View Source SignatureContainerMaxArrayLength Max. array length in serialized data in bytes Declaration [Range(1, 2147483647)] public int? SignatureContainerMaxArrayLength { get; set; } Property Value Type Description int? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.RngOptions.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.RngOptions.html",
    "title": "Class CryptoAppConfig.RngOptions | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.RngOptions RnG options Inheritance object CryptoAppConfig.RngOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.RngOptions Constructors | Edit this page View Source RngOptions() Constructor Declaration public RngOptions() Properties | Edit this page View Source RequireDevRandom Require /dev/random (will throw, if not available)? Declaration public bool? RequireDevRandom { get; set; } Property Value Type Description bool? | Edit this page View Source UseDevRandom Use /dev/random, if available? Declaration public bool? UseDevRandom { get; set; } Property Value Type Description bool? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.SecureValueOptions.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.SecureValueOptions.html",
    "title": "Class CryptoAppConfig.SecureValueOptions | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.SecureValueOptions Secure value options Inheritance object CryptoAppConfig.SecureValueOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.SecureValueOptions Constructors | Edit this page View Source SecureValueOptions() Constructor Declaration public SecureValueOptions() Properties | Edit this page View Source DefaultEncryptTimeout Default encrypt timeout for SecureValue Declaration public TimeSpan? DefaultEncryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultRecryptTimeout Default re-crypt timeout for SecureValue Declaration public TimeSpan? DefaultRecryptTimeout { get; set; } Property Value Type Description TimeSpan? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.SignedAttributesOptions.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.SignedAttributesOptions.html",
    "title": "Class CryptoAppConfig.SignedAttributesOptions | wan24-Crypto",
    "keywords": "Class CryptoAppConfig.SignedAttributesOptions Signed attributes options Inheritance object CryptoAppConfig.SignedAttributesOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig.SignedAttributesOptions Constructors | Edit this page View Source SignedAttributesOptions() Constructor Declaration public SignedAttributesOptions() Properties | Edit this page View Source DefaultAllowedKeyValidationApiUris Default allowed key validation API URIs (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultAllowedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultAllowedUsages Default allowed key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultAllowedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultAllowedValidationDomains Default allowed validation domains (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultAllowedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultDeniedKeyValidationApiUris Default denied key validation API URIs (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultDeniedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultDeniedUsages Default denied key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultDeniedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultDeniedValidationDomains Default denied validation domains (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultDeniedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultRequireCipherSuite Default require a cipher suite (CryptoAppConfig.CryptoOptions)? (signed attribute validation) Declaration public bool? DefaultRequireCipherSuite { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireKeyExchangeCounterKey Default require a key exchange counter key? (signed attribute validation) Declaration public bool? DefaultRequireKeyExchangeCounterKey { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireSerial Default require a public key revision serial number? (signed attribute validation) Declaration public bool? DefaultRequireSerial { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireSignatureCounterKey Default require a signature counter key? (signed attribute validation) Declaration public bool? DefaultRequireSignatureCounterKey { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequiredUsages Default required key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultRequiredUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? Methods | Edit this page View Source Apply(in Options) Apply Declaration public virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.CryptoAppConfig.html": {
    "href": "api/wan24.Crypto.CryptoAppConfig.html",
    "title": "Class CryptoAppConfig | wan24-Crypto",
    "keywords": "Class CryptoAppConfig Crypto app configuration (wan24.Core.AppConfig; should be applied AFTER bootstrapping (wan24.Core.AppConfigAttribute.AfterBootstrap); another CryptoEnvironment.Options may be applied in addition) Inheritance object AppConfigBase CryptoAppConfig Implements IAppConfig Inherited Members AppConfigBase.SetApplied AppConfigBase.ApplyProperties(bool) AppConfigBase.ApplyPropertiesAsync(bool, CancellationToken) AppConfigBase.Applied object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class CryptoAppConfig : AppConfigBase, IAppConfig Constructors | Edit this page View Source CryptoAppConfig() Constructor Declaration public CryptoAppConfig() Properties | Edit this page View Source Algorithms Default algorithms Declaration public CryptoAppConfig.DefaultAlgorithms? Algorithms { get; set; } Property Value Type Description CryptoAppConfig.DefaultAlgorithms | Edit this page View Source AppliedCryptoConfig Applied crypto app configuration Declaration [JsonIgnore] public static CryptoAppConfig? AppliedCryptoConfig { get; protected set; } Property Value Type Description CryptoAppConfig | Edit this page View Source AsymmetricKeyPoolsCapacity Asymmetric key pool capacity for all allowed key sizes of all available asymmetric algorithms Declaration public int? AsymmetricKeyPoolsCapacity { get; set; } Property Value Type Description int? | Edit this page View Source CryptoExceptionDelay Timespan for a random CryptographicException delay Declaration public TimeSpan? CryptoExceptionDelay { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source Entropy EntropyHelper options Declaration public CryptoAppConfig.EntropyOptions? Entropy { get; set; } Property Value Type Description CryptoAppConfig.EntropyOptions | Edit this page View Source Limits Limits Declaration public CryptoAppConfig.Limitations? Limits { get; set; } Property Value Type Description CryptoAppConfig.Limitations | Edit this page View Source Options Default options Declaration public CryptoAppConfig.CryptoOptions? Options { get; set; } Property Value Type Description CryptoAppConfig.CryptoOptions | Edit this page View Source PasswordPostProcessors Password post-processor type names to apply in a sequential chain (need parameterless constructors) Declaration public string[]? PasswordPostProcessors { get; set; } Property Value Type Description string[] | Edit this page View Source RemoveUnsupportedAlgorithms Remove unsupported algorithms? Declaration public bool RemoveUnsupportedAlgorithms { get; set; } Property Value Type Description bool | Edit this page View Source Rng RNG options Declaration public CryptoAppConfig.RngOptions? Rng { get; set; } Property Value Type Description CryptoAppConfig.RngOptions | Edit this page View Source SecureValue Secure value options Declaration public CryptoAppConfig.SecureValueOptions? SecureValue { get; set; } Property Value Type Description CryptoAppConfig.SecureValueOptions | Edit this page View Source SignedAttributes Signed attributes options Declaration public CryptoAppConfig.SignedAttributesOptions? SignedAttributes { get; set; } Property Value Type Description CryptoAppConfig.SignedAttributesOptions | Edit this page View Source SkipPakeSignatureKeyValidation Skip the PAKE signature key validation (KDF) during authentication? Declaration public bool? SkipPakeSignatureKeyValidation { get; set; } Property Value Type Description bool? | Edit this page View Source UpdateDefaultOptionsAfterRemoveUnsupportedAlgorithms Update default options after unsupported algorithms have been removed? Declaration public bool UpdateDefaultOptionsAfterRemoveUnsupportedAlgorithms { get; set; } Property Value Type Description bool | Edit this page View Source UseCryptoExceptionDelay Use a timespan for a random CryptographicException delay? Declaration public bool UseCryptoExceptionDelay { get; set; } Property Value Type Description bool | Edit this page View Source UsePasswordPostProcessorsInCryptoOptions If to use PasswordPostProcessors in the CryptoAppConfig.CryptoOptions Declaration public bool UsePasswordPostProcessorsInCryptoOptions { get; set; } Property Value Type Description bool Methods | Edit this page View Source Apply() Apply this app configuration Declaration public override sealed void Apply() Overrides wan24.Core.AppConfigBase.Apply() | Edit this page View Source Apply(in Options) Apply Declaration protected virtual void Apply(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options Options | Edit this page View Source ApplyAsync(CancellationToken) Apply this app configuration Declaration public override sealed Task ApplyAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides AppConfigBase.ApplyAsync(CancellationToken) | Edit this page View Source ApplyAsync(Options, CancellationToken) Apply Declaration public virtual Task ApplyAsync(CryptoEnvironment.Options options, CancellationToken cancellationToken) Parameters Type Name Description CryptoEnvironment.Options options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements wan24.Core.IAppConfig"
  },
  "api/wan24.Crypto.CryptoEnvironment.Options.html": {
    "href": "api/wan24.Crypto.CryptoEnvironment.Options.html",
    "title": "Class CryptoEnvironment.Options | wan24-Crypto",
    "keywords": "Class CryptoEnvironment.Options Options Inheritance object CryptoEnvironment.Options Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class CryptoEnvironment.Options Constructors | Edit this page View Source Options() Constructor Declaration public Options() Properties | Edit this page View Source AdditionalValidation Additional attribute validator Declaration public SignedAttributes.Validate_Delegate? AdditionalValidation { get; set; } Property Value Type Description SignedAttributes.Validate_Delegate | Edit this page View Source AdditionalValidationAsync Additional attribute validator Declaration public SignedAttributes.ValidateAsync_Delegate? AdditionalValidationAsync { get; set; } Property Value Type Description SignedAttributes.ValidateAsync_Delegate | Edit this page View Source AsymmericKeyPoolsCapacity Capacity for key pools of all key sizes of all available asymmetric algorithms Declaration public int? AsymmericKeyPoolsCapacity { get; set; } Property Value Type Description int? | Edit this page View Source AsymmetricKeyMaxArrayLength Max. array length in serialized data in bytes Declaration public int? AsymmetricKeyMaxArrayLength { get; set; } Property Value Type Description int? | Edit this page View Source AsymmetricKeySigner AsymmetricPublicKeySigningRequest signer Declaration public AsymmetricKeySigner? AsymmetricKeySigner { get; set; } Property Value Type Description AsymmetricKeySigner | Edit this page View Source AsymmetricKeySignerService AsymmetricPublicKeySigningRequest signer service Declaration public AsymmetricKeySignerService? AsymmetricKeySignerService { get; set; } Property Value Type Description AsymmetricKeySignerService | Edit this page View Source AutoRngSeeding Automatic RNG seeding flags Declaration public RngSeedingTypes? AutoRngSeeding { get; set; } Property Value Type Description RngSeedingTypes? | Edit this page View Source CounterKdfAlgorithm Counter KDF algorithm Declaration public string? CounterKdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterKeyExchangeAlgorithm Counter key exchange algorithm Declaration public string? CounterKeyExchangeAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterMacAlgorithm Counter MAC algorithm Declaration public string? CounterMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterSignatureAlgorithm Counter signature algorithm Declaration public string? CounterSignatureAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CryptoExceptionDelay Timespan for a random CryptographicException delay Declaration public TimeSpan? CryptoExceptionDelay { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultAllowedKeyValidationApiUris Default allowed key validation API URIs (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultAllowedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultAllowedUsages Default allowed key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultAllowedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultAllowedValidationDomains Default allowed validation domains (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultAllowedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultClientAuthOptions Default ClientAuth options (will be cloned for delivery) Declaration public ClientAuthOptions? DefaultClientAuthOptions { get; set; } Property Value Type Description ClientAuthOptions | Edit this page View Source DefaultDeniedKeyValidationApiUris Default denied key validation API URIs (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultDeniedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultDeniedUsages Default denied key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultDeniedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultDeniedValidationDomains Default denied validation domains (signed attribute validation) Declaration public ReadOnlyCollection<string>? DefaultDeniedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultEncryptTimeout Default encrypt timeout for SecureValue Declaration public TimeSpan? DefaultEncryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultEncryptionAlgorithm Default encryption algorithm Declaration public string? DefaultEncryptionAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultEncryptionPasswordAsyncPreProcessor Default encryption password pre-processor Declaration public CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate? DefaultEncryptionPasswordAsyncPreProcessor { get; set; } Property Value Type Description CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate | Edit this page View Source DefaultEncryptionPasswordPreProcessor Default encryption password pre-processor Declaration public CryptoOptions.EncryptionPasswordPreProcessor_Delegate? DefaultEncryptionPasswordPreProcessor { get; set; } Property Value Type Description CryptoOptions.EncryptionPasswordPreProcessor_Delegate | Edit this page View Source DefaultEntropyAlgorithm Default entropy algorithm bits Declaration public int? DefaultEntropyAlgorithm { get; set; } Property Value Type Description int? | Edit this page View Source DefaultEntropyAlgorithms Default entropy algorithms bits Declaration public int? DefaultEntropyAlgorithms { get; set; } Property Value Type Description int? | Edit this page View Source DefaultFlags Default CryptoOptions flags (will be used for requirements, too) Declaration public CryptoFlags? DefaultFlags { get; set; } Property Value Type Description CryptoFlags? | Edit this page View Source DefaultFlagsIncluded Default for DefaultFlagsIncluded Declaration public bool? DefaultFlagsIncluded { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultHashAlgorithm Default hash algorithm Declaration public string? DefaultHashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultKdfAlgorithm Default KDF algorithm Declaration public string? DefaultKdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultKeyExchangeAlgorithm Default key exchange algorithm Declaration public string? DefaultKeyExchangeAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultMacAlgorithm Default MAC algorithm Declaration public string? DefaultMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DefaultMaximumAge Default maximum cipher data age for decryption Declaration public TimeSpan? DefaultMaximumAge { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultMaximumTimeOffset Default maximum time offset for decryption Declaration public TimeSpan? DefaultMaximumTimeOffset { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultPakeClientAuthOptions Default PakeClientAuthOptions options (will be cloned for delivery; will be disposed!) Declaration public PakeClientAuthOptions? DefaultPakeClientAuthOptions { get; set; } Property Value Type Description PakeClientAuthOptions | Edit this page View Source DefaultPakeCryptoOptions Default PAKE options for encryption (should/will be cleared!) Declaration public CryptoOptions? DefaultPakeCryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultPakeOptions Default PAKE options (should/will be cleared!) Declaration public CryptoOptions? DefaultPakeOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultPasswordPostProcessor Default password post-processor to use in Instance Declaration public PasswordPostProcessor? DefaultPasswordPostProcessor { get; set; } Property Value Type Description PasswordPostProcessor | Edit this page View Source DefaultPrivateKeysStore Default private key suite store for en-/decryption Declaration public PrivateKeySuiteStore? DefaultPrivateKeysStore { get; set; } Property Value Type Description PrivateKeySuiteStore | Edit this page View Source DefaultRecryptTimeout Default re-crypt timeout for SecureValue Declaration public TimeSpan? DefaultRecryptTimeout { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultRequireCipherSuite Default require a cipher suite (CryptoOptions)? (signed attribute validation) Declaration public bool? DefaultRequireCipherSuite { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireKeyExchangeCounterKey Default require a key exchange counter key? (signed attribute validation) Declaration public bool? DefaultRequireKeyExchangeCounterKey { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireSerial Default require a public key revision serial number? (signed attribute validation) Declaration public bool? DefaultRequireSerial { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequireSignatureCounterKey Default require a signature counter key? (signed attribute validation) Declaration public bool? DefaultRequireSignatureCounterKey { get; set; } Property Value Type Description bool? | Edit this page View Source DefaultRequiredUsages Default required key usages (signed attribute validation) Declaration public AsymmetricAlgorithmUsages? DefaultRequiredUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultRngStream Default RngStream to set to Instance Declaration public RngStream? DefaultRngStream { get; set; } Property Value Type Description RngStream | Edit this page View Source DefaultServerPublicKeyValidator Default public server key validator (ClientAuth) Declaration public ClientAuth.ServerPublicKeyValidation_Delegate? DefaultServerPublicKeyValidator { get; set; } Property Value Type Description ClientAuth.ServerPublicKeyValidation_Delegate | Edit this page View Source DefaultSignatureAlgorithm Default signature algorithm Declaration public string? DefaultSignatureAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source DeniedAsymmetric Denied asymmetric algorithms (key is the algorithm value, value the algorithm name) Declaration public Dictionary<int, string>? DeniedAsymmetric { get; set; } Property Value Type Description Dictionary<int, string> | Edit this page View Source DeniedEllipticCurveNames Denied elliptic curve names Declaration public string[]? DeniedEllipticCurveNames { get; set; } Property Value Type Description string[] | Edit this page View Source DeniedEncryption Denied encryption algorithms (key is the algorithm value, value the algorithm name) Declaration public Dictionary<int, string>? DeniedEncryption { get; set; } Property Value Type Description Dictionary<int, string> | Edit this page View Source DevRandomPool /dev/random readable stream pool Declaration public DevRandomStreamPool? DevRandomPool { get; set; } Property Value Type Description DevRandomStreamPool | Edit this page View Source FillRandomBytes Delegate for filling a buffer with random bytes Declaration public RND.RNG_Delegate? FillRandomBytes { get; set; } Property Value Type Description RND.RNG_Delegate | Edit this page View Source FillRandomBytesAsync Delegate for filling a buffer with random bytes Declaration public RND.RNGAsync_Delegate? FillRandomBytesAsync { get; set; } Property Value Type Description RND.RNGAsync_Delegate | Edit this page View Source MaxKeyExchangeDataLength Max. key exchange data length in bytes Declaration public int? MaxKeyExchangeDataLength { get; set; } Property Value Type Description int? | Edit this page View Source MinCustomEntropy Min. required custom entropy (zero to disable checks) Declaration public double? MinCustomEntropy { get; set; } Property Value Type Description double? | Edit this page View Source MinShannonBitEntropy Min. required Shannon bit entropy (zero to disable checks) Declaration public double? MinShannonBitEntropy { get; set; } Property Value Type Description double? | Edit this page View Source MinShannonByteEntropy Min. required Shannon byte entropy (zero to disable checks) Declaration public double? MinShannonByteEntropy { get; set; } Property Value Type Description double? | Edit this page View Source PKI PKI Declaration public SignedPkiStore? PKI { get; set; } Property Value Type Description SignedPkiStore | Edit this page View Source PasswordPostProcessors Password post-processors to apply in a sequential chain (set to Instance) Declaration public PasswordPostProcessor[]? PasswordPostProcessors { get; set; } Property Value Type Description PasswordPostProcessor[] | Edit this page View Source PbKdf2HashAlgorithm Default PBKDF#2 hash algorithm name for the KdfPbKdf2Options Declaration public string? PbKdf2HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source ProcessScopeKey Process scope key for ValueProtection Declaration public ISecureValue? ProcessScopeKey { get; set; } Property Value Type Description ISecureValue | Edit this page View Source RandomGenerator Random data generator service Declaration public IRng? RandomGenerator { get; set; } Property Value Type Description IRng | Edit this page View Source RemoveUnsupportedAlgorithms Remove unsupported algorithms? Declaration public bool RemoveUnsupportedAlgorithms { get; set; } Property Value Type Description bool | Edit this page View Source RequireDevRandom Require /dev/random (will throw, if not available)? Declaration public bool? RequireDevRandom { get; set; } Property Value Type Description bool? | Edit this page View Source SeedConsumer RNG seed consumer Declaration public ISeedConsumer? SeedConsumer { get; set; } Property Value Type Description ISeedConsumer | Edit this page View Source SignatureContainerMaxArrayLength Max. array length in serialized data in bytes Declaration public int? SignatureContainerMaxArrayLength { get; set; } Property Value Type Description int? | Edit this page View Source SkipPakeSignatureKeyValidation Skip the PAKE signature key validation (KDF) during authentication? Declaration public bool? SkipPakeSignatureKeyValidation { get; set; } Property Value Type Description bool? | Edit this page View Source Sp800_108HashAlgorithm Default SP800-108 hash algorithm name for the KdfSp800_801HmacKbKdfOptions Declaration public string? Sp800_108HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source StrictPostQuantum Force strict post quantum safety? Declaration public bool? StrictPostQuantum { get; set; } Property Value Type Description bool? | Edit this page View Source SystemScopeKey System scope key for ValueProtection Declaration public ISecureValue? SystemScopeKey { get; set; } Property Value Type Description ISecureValue | Edit this page View Source UpdateDefaultOptionsAfterRemoveUnsupportedAlgorithms Update default options after unsupported algorithms have been removed? Declaration public bool UpdateDefaultOptionsAfterRemoveUnsupportedAlgorithms { get; set; } Property Value Type Description bool | Edit this page View Source UseCryptoExceptionDelay Use a timespan for a random CryptographicException delay? Declaration public bool UseCryptoExceptionDelay { get; set; } Property Value Type Description bool | Edit this page View Source UseDevRandom Use /dev/random, if available? Declaration public bool? UseDevRandom { get; set; } Property Value Type Description bool? | Edit this page View Source UsePasswordPostProcessorsInCryptoOptions If to use PasswordPostProcessors in the CryptoOptions Declaration public bool UsePasswordPostProcessorsInCryptoOptions { get; set; } Property Value Type Description bool | Edit this page View Source UserScopeKey User scope key for ValueProtection Declaration public ISecureValue? UserScopeKey { get; set; } Property Value Type Description ISecureValue | Edit this page View Source ValueProtectionMacAlgorithm MAC algorithm name for ValueProtectionKeys Declaration public string? ValueProtectionMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source ValueProtectionTpmMacAlgorithm TPM MAC algorithm name for ValueProtectionKeys Declaration public string? ValueProtectionTpmMacAlgorithm { get; set; } Property Value Type Description string"
  },
  "api/wan24.Crypto.CryptoEnvironment.html": {
    "href": "api/wan24.Crypto.CryptoEnvironment.html",
    "title": "Class CryptoEnvironment | wan24-Crypto",
    "keywords": "Class CryptoEnvironment Crypto environment configuration Inheritance object CryptoEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class CryptoEnvironment Properties | Edit this page View Source AllAlgorithms All enabled algorithms Declaration public static IEnumerable<ICryptoAlgorithm> AllAlgorithms { get; } Property Value Type Description IEnumerable<ICryptoAlgorithm> | Edit this page View Source AsymmetricKeyPool Asymmetric key pool (will be the default for PfsKeyPool) Declaration public static IAsymmetricKeyPool? AsymmetricKeyPool { get; set; } Property Value Type Description IAsymmetricKeyPool | Edit this page View Source PKI Singleton PKI Declaration public static SignedPkiStore? PKI { get; set; } Property Value Type Description SignedPkiStore | Edit this page View Source PakeAuthClient PAKE authentication client Declaration public static FastPakeAuthClient? PakeAuthClient { get; set; } Property Value Type Description FastPakeAuthClient | Edit this page View Source PakeAuthRecordPool PAKE authentication record pool (will be the default for AuthRecordPool) Declaration public static IPakeAuthRecordPool? PakeAuthRecordPool { get; set; } Property Value Type Description IPakeAuthRecordPool | Edit this page View Source PakeAuthServer PAKE authentication server Declaration public static FastPakeAuthServer? PakeAuthServer { get; set; } Property Value Type Description FastPakeAuthServer | Edit this page View Source PrivateKeysStore Singleton private key suite store Declaration public static PrivateKeySuiteStore? PrivateKeysStore { get; set; } Property Value Type Description PrivateKeySuiteStore | Edit this page View Source RandomGenerator Singleton random data generator service Declaration public static RandomDataGenerator? RandomGenerator { get; set; } Property Value Type Description RandomDataGenerator | Edit this page View Source State Overall state of the crypto environment Declaration public static IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source Configure(in Options) Apply a configuration Declaration public static void Configure(in CryptoEnvironment.Options options) Parameters Type Name Description CryptoEnvironment.Options options CryptoEnvironment.Options"
  },
  "api/wan24.Crypto.CryptoExtensions.html": {
    "href": "api/wan24.Crypto.CryptoExtensions.html",
    "title": "Class CryptoExtensions | wan24-Crypto",
    "keywords": "Class CryptoExtensions Crypto extensions Inheritance object CryptoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class CryptoExtensions Methods | Edit this page View Source AddPaddingAsync<T>(T, int, long?, CancellationToken) Add random padding bytes Declaration public static Task AddPaddingAsync<T>(this T stream, int blockSize, long? written = null, CancellationToken cancellationToken = default) where T : Stream Parameters Type Name Description T stream Stream int blockSize Block size in bytes long? written Number of written bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task Type Parameters Name Description T Stream type | Edit this page View Source AddPadding<T>(T, int, long?) Add random padding bytes Declaration public static T AddPadding<T>(this T stream, int blockSize, long? written = null) where T : Stream Parameters Type Name Description T stream Stream int blockSize Block size in bytes long? written Number of written bytes Returns Type Description T Stream Type Parameters Name Description T Stream type | Edit this page View Source AddWan24Crypto(IServiceCollection) Add all wan24-Crypto registered algorithms as DI service objects Declaration public static IServiceCollection AddWan24Crypto(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Services Returns Type Description IServiceCollection Services | Edit this page View Source CreateKeyPools(IAsymmetricAlgorithm, int, bool) Create key pools for all allowed key sizes (existing key pools won't be overwritten!) Declaration public static void CreateKeyPools(this IAsymmetricAlgorithm algo, int capacity, bool start = true) Parameters Type Name Description IAsymmetricAlgorithm algo Algorithm int capacity Capacity per key pool bool start Start the key pool? | Edit this page View Source CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) Create key pools for all allowed key sizes (existing key pools won't be overwritten!) Declaration public static Task CreateKeyPoolsAsync(this IAsymmetricAlgorithm algo, int capacity, bool start = true, CancellationToken cancellationToken = default) Parameters Type Name Description IAsymmetricAlgorithm algo Algorithm int capacity Capacity per key pool bool start Start the key pool? CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ExtendKey(byte[], params byte[]?[]) Extend a key by additional keys Declaration public static byte[] ExtendKey(this byte[] key, params byte[]?[] additionalKeys) Parameters Type Name Description byte[] key Key (will be cleared!) byte[][] additionalKeys Additional keys (will be cleared!) Returns Type Description byte[] Extended key | Edit this page View Source GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) Get a pooled key Declaration public static IAsymmetricPrivateKey GetPooledKey(this IAsymmetricAlgorithm algo, in CryptoOptions? options = null) Parameters Type Name Description IAsymmetricAlgorithm algo Algorithm CryptoOptions options Options Returns Type Description IAsymmetricPrivateKey Pooled key (don't forget to dispose!) | Edit this page View Source GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken) Get a pooled key Declaration public static Task<IAsymmetricPrivateKey> GetPooledKeyAsync(this IAsymmetricAlgorithm algo, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description IAsymmetricAlgorithm algo Algorithm CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricPrivateKey> Pooled key (don't forget to dispose!) | Edit this page View Source IsPrivate(KeyTypes) Determine if the key type is for a private key Declaration public static bool IsPrivate(this KeyTypes keyType) Parameters Type Name Description KeyTypes keyType Key type Returns Type Description bool If the key type is for a private key | Edit this page View Source IsPublic(KeyTypes) Determine if the key type is for a public key Declaration public static bool IsPublic(this KeyTypes keyType) Parameters Type Name Description KeyTypes keyType Key type Returns Type Description bool If the key type is for a public key | Edit this page View Source IsStore(KeyTypes) Determine if the key type is for a key store Declaration public static bool IsStore(this KeyTypes keyType) Parameters Type Name Description KeyTypes keyType Key type Returns Type Description bool If the key type is for a key store | Edit this page View Source ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) Validate a MAC Declaration public static bool ValidateMac(this Stream stream, byte[] mac, byte[] pwd, bool resetPosition = true, CryptoOptions? options = null) Parameters Type Name Description Stream stream Stream byte[] mac MAC byte[] pwd Password bool resetPosition Reset the original stream position? CryptoOptions options Options Returns Type Description bool If the MAC is valid | Edit this page View Source ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) Validate a MAC Declaration public static Task<bool> ValidateMacAsync(this Stream stream, byte[] mac, byte[] pwd, bool resetPosition = true, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream byte[] mac MAC byte[] pwd Password bool resetPosition Reset the original stream position? CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the MAC is valid"
  },
  "api/wan24.Crypto.CryptoFlags.html": {
    "href": "api/wan24.Crypto.CryptoFlags.html",
    "title": "Enum CryptoFlags | wan24-Crypto",
    "keywords": "Enum CryptoFlags Crypto flags Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum CryptoFlags Fields Name Description Compressed Compressed? FLAGS All flags ForceMacCoverWhole Is the MAC forced to cover all data? HeaderVersionIncluded Header version included? KdfAlgorithmIncluded KDF algorithm included? KeyExchangeDataIncluded Key exchange data included? LatestVersion Latest crypto header data structure version MacAlgorithmIncluded MAC algorithm included? MacIncluded MAC included? PayloadIncluded Payload included PrivateKeyRevisionIncluded Include the private key revision? RequireAsymmetricCounterAlgorithm Require an asymmetric counter algorithm RequireCounterKdfAlgorithm Require a counter KDF algorithm RequireCounterMac Require a counter MAC RequirePrivateKeyRevision Require the private key revision to be included SerializerVersionIncluded Serializer version included? TimeIncluded Time included? Version1 Crypto header data structure version 1"
  },
  "api/wan24.Crypto.CryptoHelper.ForcePostQuantum_Delegate.html": {
    "href": "api/wan24.Crypto.CryptoHelper.ForcePostQuantum_Delegate.html",
    "title": "Delegate CryptoHelper.ForcePostQuantum_Delegate | wan24-Crypto",
    "keywords": "Delegate CryptoHelper.ForcePostQuantum_Delegate Delegate for a force post quantum handler Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void CryptoHelper.ForcePostQuantum_Delegate(ForcePostQuantumEventArgs e) Parameters Type Name Description ForcePostQuantumEventArgs e Arguments"
  },
  "api/wan24.Crypto.CryptoHelper.html": {
    "href": "api/wan24.Crypto.CryptoHelper.html",
    "title": "Class CryptoHelper | wan24-Crypto",
    "keywords": "Class CryptoHelper Crypto helper Inheritance object CryptoHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class CryptoHelper Properties | Edit this page View Source PostQuantumSafetyForced Has the post quantum-safety been forced? Declaration public static bool PostQuantumSafetyForced { get; } Property Value Type Description bool | Edit this page View Source StrictPostQuantumSafety Has the post quantum-safety been forced strictly (no pre quantum-algorithms are allowed)? Declaration public static bool StrictPostQuantumSafety { get; } Property Value Type Description bool Methods | Edit this page View Source ForcePostQuantumSafety(bool) Force all default algorithms to be \"post quantum-safe\" (using HybridAlgorithmHelper) Declaration public static void ForcePostQuantumSafety(bool strict = false) Parameters Type Name Description bool strict Force strictly (no pre quantum-algorithms are allowed)? | Edit this page View Source RemoveUnsupportedAlgorithms(in bool) Remove unsupported cryptographic algorithms Declaration public static ICryptoAlgorithm[] RemoveUnsupportedAlgorithms(in bool updateDefaultOptions = true) Parameters Type Name Description bool updateDefaultOptions Update factory defaults to use alternative algorithms Returns Type Description ICryptoAlgorithm[] Removed algorithms Events | Edit this page View Source OnForcePostQuantum Raised when forcing post quantum Declaration public static event CryptoHelper.ForcePostQuantum_Delegate? OnForcePostQuantum Event Type Type Description CryptoHelper.ForcePostQuantum_Delegate"
  },
  "api/wan24.Crypto.CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate.html": {
    "href": "api/wan24.Crypto.CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate.html",
    "title": "Delegate CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate | wan24-Crypto",
    "keywords": "Delegate CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate Delegate for an encryption password pre-processor Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate(EncryptionAlgorithmBase algo, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description EncryptionAlgorithmBase algo Encryption algorithm CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for an encryption password pre-processor"
  },
  "api/wan24.Crypto.CryptoOptions.EncryptionPasswordPreProcessor_Delegate.html": {
    "href": "api/wan24.Crypto.CryptoOptions.EncryptionPasswordPreProcessor_Delegate.html",
    "title": "Delegate CryptoOptions.EncryptionPasswordPreProcessor_Delegate | wan24-Crypto",
    "keywords": "Delegate CryptoOptions.EncryptionPasswordPreProcessor_Delegate Delegate for an encryption password pre-processor Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void CryptoOptions.EncryptionPasswordPreProcessor_Delegate(EncryptionAlgorithmBase algo, CryptoOptions options) Parameters Type Name Description EncryptionAlgorithmBase algo Encryption algorithm CryptoOptions options Options"
  },
  "api/wan24.Crypto.CryptoOptions.Instanced_Delegate.html": {
    "href": "api/wan24.Crypto.CryptoOptions.Instanced_Delegate.html",
    "title": "Delegate CryptoOptions.Instanced_Delegate | wan24-Crypto",
    "keywords": "Delegate CryptoOptions.Instanced_Delegate Delegate for a OnInstanced event handler Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void CryptoOptions.Instanced_Delegate(CryptoOptions options, EventArgs e) Parameters Type Name Description CryptoOptions options Options instance EventArgs e Arguments"
  },
  "api/wan24.Crypto.CryptoOptions.html": {
    "href": "api/wan24.Crypto.CryptoOptions.html",
    "title": "Class CryptoOptions | wan24-Crypto",
    "keywords": "Class CryptoOptions Crypto options Inheritance object ValidatableRecordBase StreamSerializerRecordBase CryptoOptions Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> ICloneable IEquatable<CryptoOptions> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record CryptoOptions : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, ICloneable, IEquatable<CryptoOptions> Constructors | Edit this page View Source CryptoOptions() Constructor Declaration public CryptoOptions() Fields | Edit this page View Source HEADER_VERSION Header version Declaration public const int HEADER_VERSION = 1 Field Value Type Description int | Edit this page View Source VERSION Object version Declaration public const int VERSION = 3 Field Value Type Description int Properties | Edit this page View Source Algorithm Encryption algorithm name Declaration [StringLength(255)] public string? Algorithm { get; set; } Property Value Type Description string | Edit this page View Source AsymmetricAlgorithm Asymmetric algorithm name (for the key exchange data) Declaration [StringLength(255)] public string? AsymmetricAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source AsymmetricAlgorithmOptions Asymmetric algorithm options Declaration [StringLength(255)] public string? AsymmetricAlgorithmOptions { get; set; } Property Value Type Description string | Edit this page View Source AsymmetricCounterAlgorithm Asymmetric counter algorithm name (for the key exchange data; used for en-/decryption and signature only) Declaration [StringLength(255)] public string? AsymmetricCounterAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source AsymmetricKeyBits Asymmetric key bits Declaration [Range(1, 2147483647)] public int AsymmetricKeyBits { get; set; } Property Value Type Description int | Edit this page View Source Compressed Compressed? Declaration public bool Compressed { get; set; } Property Value Type Description bool | Edit this page View Source Compression Compression options Declaration public CompressionOptions? Compression { get; set; } Property Value Type Description CompressionOptions | Edit this page View Source CounterKdfAlgorithm Counter KDF algorithm name (used for en-/decryption only) Declaration [StringLength(255)] public string? CounterKdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterKdfIterations Counter KDF iterations (used for en-/decryption only) Declaration [Range(1, 2147483647)] public int CounterKdfIterations { get; set; } Property Value Type Description int | Edit this page View Source CounterKdfOptions Counter KDF options Declaration [StringLength(255)] public string? CounterKdfOptions { get; set; } Property Value Type Description string | Edit this page View Source CounterKdfSalt Counter KDF salt (used internal) Declaration [CountLimit(1, 255)] public byte[]? CounterKdfSalt { get; set; } Property Value Type Description byte[] | Edit this page View Source CounterMacAlgorithm Counter MAC algorithm name (used for en-/decryption only) Declaration [StringLength(255)] public string? CounterMacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source CounterPrivateKey Counter private key (for en-/decryption/key exchange/signature) Declaration [SensitiveData] public IAsymmetricPrivateKey? CounterPrivateKey { get; set; } Property Value Type Description IAsymmetricPrivateKey | Edit this page View Source CounterPublicKey Counter private key (used for encryption/key exchange) Declaration public IAsymmetricPublicKey? CounterPublicKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source CustomSerializerVersion Custom serializer version Declaration [Range(1, 255)] public int? CustomSerializerVersion { get; set; } Property Value Type Description int? | Edit this page View Source DefaultEncryptionPasswordAsyncPreProcessor Default encryption password pre-processor (only applied during asynchronous operation) Declaration public static CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate? DefaultEncryptionPasswordAsyncPreProcessor { get; set; } Property Value Type Description CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate | Edit this page View Source DefaultEncryptionPasswordPreProcessor Default encryption password pre-processor Declaration public static CryptoOptions.EncryptionPasswordPreProcessor_Delegate? DefaultEncryptionPasswordPreProcessor { get; set; } Property Value Type Description CryptoOptions.EncryptionPasswordPreProcessor_Delegate | Edit this page View Source DefaultFlags Default flags (will be used for requirements, too) Declaration public static CryptoFlags DefaultFlags { get; set; } Property Value Type Description CryptoFlags | Edit this page View Source DefaultFlagsIncluded Default for FlagsIncluded Declaration public static bool DefaultFlagsIncluded { get; set; } Property Value Type Description bool | Edit this page View Source DefaultMaximumAge Default maximum age Declaration public static TimeSpan? DefaultMaximumAge { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultMaximumTimeOffset Default maximum time offset Declaration public static TimeSpan? DefaultMaximumTimeOffset { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source DefaultPrivateKeysStore Default private key suite store Declaration public static PrivateKeySuiteStore? DefaultPrivateKeysStore { get; set; } Property Value Type Description PrivateKeySuiteStore | Edit this page View Source EncryptionOptions Encryption options Declaration [StringLength(255)] public string? EncryptionOptions { get; set; } Property Value Type Description string | Edit this page View Source EncryptionPasswordAsyncPreProcessor Encryption password pre-processor (only applied during asynchronous operation) Declaration public CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate? EncryptionPasswordAsyncPreProcessor { get; set; } Property Value Type Description CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate | Edit this page View Source EncryptionPasswordPreProcessor Encryption password pre-processor Declaration public CryptoOptions.EncryptionPasswordPreProcessor_Delegate? EncryptionPasswordPreProcessor { get; set; } Property Value Type Description CryptoOptions.EncryptionPasswordPreProcessor_Delegate | Edit this page View Source Flags Flags Declaration public CryptoFlags Flags { get; set; } Property Value Type Description CryptoFlags | Edit this page View Source FlagsIncluded Flags included? Declaration public bool FlagsIncluded { get; set; } Property Value Type Description bool | Edit this page View Source ForceMacCoverWhole Forced the MAC to cover the whole data? Declaration public bool ForceMacCoverWhole { get; set; } Property Value Type Description bool | Edit this page View Source HashAlgorithm Hash algorithm name Declaration [StringLength(255)] public string? HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source HeaderProcessed Has the header been processed (used internal)? Declaration public bool HeaderProcessed { get; set; } Property Value Type Description bool | Edit this page View Source HeaderVersion Crypto header data structure version Declaration [Range(1, 1)] public int HeaderVersion { get; set; } Property Value Type Description int | Edit this page View Source HeaderVersionIncluded Header version included? Declaration public bool HeaderVersionIncluded { get; set; } Property Value Type Description bool | Edit this page View Source KdfAlgorithm KDF algorithm name Declaration [StringLength(255)] public string? KdfAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source KdfAlgorithmIncluded KDF algorithm included? Declaration public bool KdfAlgorithmIncluded { get; set; } Property Value Type Description bool | Edit this page View Source KdfIterations KDF iterations Declaration [Range(1, 2147483647)] public int KdfIterations { get; set; } Property Value Type Description int | Edit this page View Source KdfOptions KDF options Declaration [StringLength(255)] public string? KdfOptions { get; set; } Property Value Type Description string | Edit this page View Source KdfSalt KDF salt (used internal) Declaration [CountLimit(1, 255)] public byte[]? KdfSalt { get; set; } Property Value Type Description byte[] | Edit this page View Source KeyExchangeData Key exchange data Declaration public KeyExchangeDataContainer? KeyExchangeData { get; set; } Property Value Type Description KeyExchangeDataContainer | Edit this page View Source KeyExchangeDataIncluded Key exchange data included? Declaration public bool KeyExchangeDataIncluded { get; set; } Property Value Type Description bool | Edit this page View Source LeaveOpen Leave the processing stream open? Declaration public bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Mac MAC (used internal for decryption) Declaration [CountLimit(255)] public byte[]? Mac { get; set; } Property Value Type Description byte[] | Edit this page View Source MacAlgorithm MAC algorithm name Declaration [StringLength(255)] public string? MacAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source MacAlgorithmIncluded MAC algorithm included? Declaration public bool MacAlgorithmIncluded { get; set; } Property Value Type Description bool | Edit this page View Source MacIncluded MAC included? Declaration public bool MacIncluded { get; set; } Property Value Type Description bool | Edit this page View Source MacPassword MAC password Declaration [SensitiveData] [CountLimit(32767)] public byte[]? MacPassword { get; set; } Property Value Type Description byte[] | Edit this page View Source MacPosition MAC position within the cipher stream (used internal) Declaration public long MacPosition { get; set; } Property Value Type Description long | Edit this page View Source MaxUncompressedDataLength Maximum uncompressed data length in bytes (or -1 for no limit) Declaration [Range(-1, 9.223372036854776E+18)] public long MaxUncompressedDataLength { get; set; } Property Value Type Description long | Edit this page View Source MaximumAge Maximum age Declaration public TimeSpan? MaximumAge { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source MaximumTimeOffset Maximum time offset Declaration public TimeSpan? MaximumTimeOffset { get; set; } Property Value Type Description TimeSpan? | Edit this page View Source Password Password (used internal) Declaration [SensitiveData] [CountLimit(255)] public byte[]? Password { get; set; } Property Value Type Description byte[] | Edit this page View Source PayloadData Payload data (won't be encrypted, but included in the MAC) Declaration [CountLimit(65535)] public byte[]? PayloadData { get; set; } Property Value Type Description byte[] | Edit this page View Source PayloadIncluded Payload included? Declaration public bool PayloadIncluded { get; set; } Property Value Type Description bool | Edit this page View Source PrivateKey Private key (for en-/decryption/key exchange/signature) Declaration [SensitiveData] public IAsymmetricPrivateKey? PrivateKey { get; set; } Property Value Type Description IAsymmetricPrivateKey | Edit this page View Source PrivateKeyRevision Private key revision Declaration [Range(0, 2147483647)] public int PrivateKeyRevision { get; set; } Property Value Type Description int | Edit this page View Source PrivateKeyRevisionIncluded Include the private key revision? Declaration public bool PrivateKeyRevisionIncluded { get; set; } Property Value Type Description bool | Edit this page View Source PrivateKeysStore Private keys store (won't be serialized!) Declaration public PrivateKeySuiteStore? PrivateKeysStore { get; set; } Property Value Type Description PrivateKeySuiteStore | Edit this page View Source PublicKey Public key (for encryption/key exchange) Declaration public IAsymmetricPublicKey? PublicKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source RequireAsymmetricCounterAlgorithm Require an asymmetric counter algorithm (when decrypting) Declaration public bool RequireAsymmetricCounterAlgorithm { get; set; } Property Value Type Description bool | Edit this page View Source RequireCounterKdf Require counter KDF (when decrypting) Declaration public bool RequireCounterKdf { get; set; } Property Value Type Description bool | Edit this page View Source RequireCounterMac Require a counter MAC (when decrypting) Declaration public bool RequireCounterMac { get; set; } Property Value Type Description bool | Edit this page View Source RequireHeaderVersion Require the header version (when decrypting) Declaration public bool RequireHeaderVersion { get; set; } Property Value Type Description bool | Edit this page View Source RequireKdf Require KDF (when decrypting) Declaration public bool RequireKdf { get; set; } Property Value Type Description bool | Edit this page View Source RequireKeyExchangeData Require key exchange data (when decrypting) Declaration public bool RequireKeyExchangeData { get; set; } Property Value Type Description bool | Edit this page View Source RequireMac Require a MAC (when decrypting) Declaration public bool RequireMac { get; set; } Property Value Type Description bool | Edit this page View Source RequireMacCoverWhole Require the MAC to cover the whole data (when decrypting) Declaration public bool RequireMacCoverWhole { get; set; } Property Value Type Description bool | Edit this page View Source RequirePayload Require payload (when decrypting) Declaration public bool RequirePayload { get; set; } Property Value Type Description bool | Edit this page View Source RequirePrivateKeyRevision Require a private key revision (when decrypting) Declaration public bool RequirePrivateKeyRevision { get; set; } Property Value Type Description bool | Edit this page View Source RequireSerializerVersion Require the serializer version (when decrypting) Declaration public bool RequireSerializerVersion { get; set; } Property Value Type Description bool | Edit this page View Source RequireTime Require a time (when decrypting) Declaration public bool RequireTime { get; set; } Property Value Type Description bool | Edit this page View Source Requirements Requirements Declaration public CryptoFlags Requirements { get; set; } Property Value Type Description CryptoFlags | Edit this page View Source RngSeeding RNG seeding flags (to override AutoRngSeeding; won't be serialized!) Declaration public RngSeedingTypes? RngSeeding { get; set; } Property Value Type Description RngSeedingTypes? | Edit this page View Source SerializerVersionIncluded Serializer version included? Declaration public bool SerializerVersionIncluded { get; set; } Property Value Type Description bool | Edit this page View Source Tag Any tagged object (will be cloned, if it implements ICloneable, and GetCopy() has been called) Declaration public object? Tag { get; set; } Property Value Type Description object | Edit this page View Source Time Time (UTC) Declaration public DateTime? Time { get; set; } Property Value Type Description DateTime? | Edit this page View Source TimeIncluded Time included? Declaration public bool TimeIncluded { get; set; } Property Value Type Description bool | Edit this page View Source Tracer Tracer Declaration public Tracer? Tracer { get; set; } Property Value Type Description Tracer | Edit this page View Source UsingAsymmetricCounterAlgorithm Using an asymmetric counter algorithm? Declaration public bool UsingAsymmetricCounterAlgorithm { get; } Property Value Type Description bool | Edit this page View Source UsingCounterKdf Using a counter KDF? Declaration public bool UsingCounterKdf { get; } Property Value Type Description bool | Edit this page View Source UsingCounterMac Using a counter MAC? Declaration public bool UsingCounterMac { get; } Property Value Type Description bool Methods | Edit this page View Source ApplyPrivateKeySuite(PrivateKeySuite, bool, bool) Apply a private key suite (will set keys for PFS key encryption) Declaration public void ApplyPrivateKeySuite(PrivateKeySuite suite, bool withCounterAlgorithms = true, bool forSignature = false) Parameters Type Name Description PrivateKeySuite suite Private key suite bool withCounterAlgorithms With counter algorithms? bool forSignature Use the keys for signature? | Edit this page View Source ApplyPublicKeySuite(PublicKeySuite, bool, bool) Apply a public key suite (will set peer keys for PFS key encryption) Declaration public void ApplyPublicKeySuite(PublicKeySuite suite, bool withCounterAlgorithms = true, bool forSignature = false) Parameters Type Name Description PublicKeySuite suite Public key suite bool withCounterAlgorithms With counter algorithms? bool forSignature Use the keys for signature? | Edit this page View Source Clear(bool) Clear sensible object data (and reset for re-use) Declaration public void Clear(bool unsetKeys = true) Parameters Type Name Description bool unsetKeys Unset the asymmetric keys? | Edit this page View Source CreateMac(Stream) Create a MAC Declaration public CryptoOptions CreateMac(Stream data) Parameters Type Name Description Stream data Data Returns Type Description CryptoOptions This | Edit this page View Source CreateMac(ReadOnlySpan<byte>) Create a MAC Declaration public CryptoOptions CreateMac(ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data Returns Type Description CryptoOptions This | Edit this page View Source CreateMac(Span<byte>) Create a MAC Declaration public CryptoOptions CreateMac(Span<byte> data) Parameters Type Name Description Span<byte> data Data Returns Type Description CryptoOptions This | Edit this page View Source CreateMacAsync(Stream, CancellationToken) Create a MAC Declaration public Task CreateMacAsync(Stream data, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data CancellationToken cancellationToken Cancellation token Returns Type Description Task This | Edit this page View Source CreatePrivateKeySuite() Create a private key suite Declaration public PrivateKeySuite CreatePrivateKeySuite() Returns Type Description PrivateKeySuite Private key suite (keys will be cloned/copied; don't forget to dispose) | Edit this page View Source CreatePublicKeySuite() Create a public key suite Declaration public PublicKeySuite CreatePublicKeySuite() Returns Type Description PublicKeySuite Public key suite (keys will be cloned/copied; don't forget to dispose) | Edit this page View Source Decrypt(Stream, Stream) Decrypt data Declaration public void Decrypt(Stream cipherData, Stream rawData) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data | Edit this page View Source Decrypt(ReadOnlySpan<byte>) Decrypt data Declaration public byte[] Decrypt(ReadOnlySpan<byte> cipherData) Parameters Type Name Description ReadOnlySpan<byte> cipherData Raw data Returns Type Description byte[] Cipher data | Edit this page View Source Decrypt(Span<byte>) Decrypt data Declaration public byte[] Decrypt(Span<byte> rawData) Parameters Type Name Description Span<byte> rawData Raw data Returns Type Description byte[] Cipher data | Edit this page View Source DecryptAsync(Stream, Stream, CancellationToken) Decrypt data Declaration public Task DecryptAsync(Stream cipherData, Stream rawData, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeriveExchangedKey() Derive the exchanged key Declaration public byte[] DeriveExchangedKey() Returns Type Description byte[] Key | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Encrypt(Stream, Stream) Encrypt data Declaration public void Encrypt(Stream rawData, Stream cipherData) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data | Edit this page View Source Encrypt(ReadOnlySpan<byte>) Encrypt data Declaration public byte[] Encrypt(ReadOnlySpan<byte> rawData) Parameters Type Name Description ReadOnlySpan<byte> rawData Raw data Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Span<byte>) Encrypt data Declaration public byte[] Encrypt(Span<byte> rawData) Parameters Type Name Description Span<byte> rawData Raw data Returns Type Description byte[] Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, CancellationToken) Encrypt data Declaration public Task EncryptAsync(Stream rawData, Stream cipherData, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source GetCopy() Get a copy of this instance Declaration public CryptoOptions GetCopy() Returns Type Description CryptoOptions Instance copy | Edit this page View Source GetPayload<T>(int?) Get the payload Declaration public T? GetPayload<T>(int? serializerVersion = null) Parameters Type Name Description int? serializerVersion Serializer version Returns Type Description T Payload Type Parameters Name Description T Payload type | Edit this page View Source IncludeNothing(bool) Exclude everything Declaration public CryptoOptions IncludeNothing(bool requireNothing = true) Parameters Type Name Description bool requireNothing Require nothing, too? Returns Type Description CryptoOptions This | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetCounterKeys(IAsymmetricPrivateKey, IAsymmetricPublicKey?) Set the counter keys (used for en-/decryption and signature only) Declaration public void SetCounterKeys(IAsymmetricPrivateKey privateKey, IAsymmetricPublicKey? publicKey = null) Parameters Type Name Description IAsymmetricPrivateKey privateKey Private key IAsymmetricPublicKey publicKey Public key (required for encryption, if not using a PFS key) | Edit this page View Source SetKeyExchangeData() Set the key exchange data Declaration public byte[] SetKeyExchangeData() Returns Type Description byte[] Key | Edit this page View Source SetKeys(IAsymmetricPrivateKey, IAsymmetricPublicKey?) Set the keys (used for en-/decryption and signature only) Declaration public void SetKeys(IAsymmetricPrivateKey privateKey, IAsymmetricPublicKey? publicKey = null) Parameters Type Name Description IAsymmetricPrivateKey privateKey Private key IAsymmetricPublicKey publicKey Public key (required for encryption, if not using a PFS key) | Edit this page View Source SetNewMacPassword(in byte[]) Set a new MAC password (will clear the old value, if any) Declaration public void SetNewMacPassword(in byte[] pwd) Parameters Type Name Description byte[] pwd New password (won't be cloned!) | Edit this page View Source SetNewPassword(in byte[]) Set a new encryption password (will clear the old value, if any) Declaration public void SetNewPassword(in byte[] pwd) Parameters Type Name Description byte[] pwd New password (won't be cloned!) | Edit this page View Source SetPayload<T>(T) Set the payload Declaration public void SetPayload<T>(T payload) where T : notnull Parameters Type Name Description T payload Payload Type Parameters Name Description T Payload type | Edit this page View Source StretchKey(int) Stretch the password Declaration public CryptoOptions StretchKey(int len) Parameters Type Name Description int len Stretched password length in bytes Returns Type Description CryptoOptions This | Edit this page View Source ValidateAlgorithms() Validate the algorithms Declaration public void ValidateAlgorithms() | Edit this page View Source ValidateRequirements() Validate the requirements Declaration public void ValidateRequirements() Events | Edit this page View Source OnInstanced Raised when a new instance of CryptoOptions was created Declaration public static event CryptoOptions.Instanced_Delegate? OnInstanced Event Type Type Description CryptoOptions.Instanced_Delegate Operators | Edit this page View Source explicit operator CryptoOptions(byte[]) Cast from serialized data Declaration public static explicit operator CryptoOptions(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description CryptoOptions | Edit this page View Source explicit operator byte[](CryptoOptions) Cast as serialized data Declaration public static explicit operator byte[](CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description byte[] | Edit this page View Source implicit operator PrivateKeySuite(CryptoOptions) Cast as private key suite Declaration public static implicit operator PrivateKeySuite(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description PrivateKeySuite | Edit this page View Source implicit operator PublicKeySuite(CryptoOptions) Cast as private key suite Declaration public static implicit operator PublicKeySuite(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description PublicKeySuite Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> ICloneable IEquatable<T> Extension Methods CryptoOptionsFluentExtensions.SetLeaveOpen(CryptoOptions, bool) CryptoOptionsFluentExtensions.WithAdditionalFlags(CryptoOptions, params CryptoFlags[]) CryptoOptionsFluentExtensions.WithAdditionalRequirements(CryptoOptions, params CryptoFlags[]) CryptoOptionsFluentExtensions.WithCompression(CryptoOptions, CompressionOptions?) CryptoOptionsFluentExtensions.WithCounterKdf(CryptoOptions, int, int?, string?) CryptoOptionsFluentExtensions.WithCounterKdf(CryptoOptions, string?, int?, string?) CryptoOptionsFluentExtensions.WithCounterKeyExchange(CryptoOptions, IKeyExchangePrivateKey, IAsymmetricPublicKey?) CryptoOptionsFluentExtensions.WithCounterMac(CryptoOptions, int) CryptoOptionsFluentExtensions.WithCounterMac(CryptoOptions, string?) CryptoOptionsFluentExtensions.WithCounterSignature(CryptoOptions, ISignaturePrivateKey) CryptoOptionsFluentExtensions.WithEncryptionAlgorithm(CryptoOptions, int) CryptoOptionsFluentExtensions.WithEncryptionAlgorithm(CryptoOptions, string?) CryptoOptionsFluentExtensions.WithEncryptionPasswordPreProcessing(CryptoOptions, CryptoOptions.EncryptionPasswordPreProcessor_Delegate?, CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate?) CryptoOptionsFluentExtensions.WithEncryptionPasswordPreProcessing(CryptoOptions, PasswordPostProcessor?) CryptoOptionsFluentExtensions.WithFlagsIncluded(CryptoOptions, CryptoFlags?, bool) CryptoOptionsFluentExtensions.WithHashAlgorithm(CryptoOptions, int) CryptoOptionsFluentExtensions.WithHashAlgorithm(CryptoOptions, string?) CryptoOptionsFluentExtensions.WithHeaderVersion(CryptoOptions) CryptoOptionsFluentExtensions.WithKdf(CryptoOptions, int, int?, string?, bool) CryptoOptionsFluentExtensions.WithKdf(CryptoOptions, string?, int?, string?, bool) CryptoOptionsFluentExtensions.WithKeyExchangeAlgorithm(CryptoOptions, int, int?) CryptoOptionsFluentExtensions.WithKeyExchangeAlgorithm(CryptoOptions, string?, int?) CryptoOptionsFluentExtensions.WithMac(CryptoOptions, int, bool, bool) CryptoOptionsFluentExtensions.WithMac(CryptoOptions, string?, bool, bool) CryptoOptionsFluentExtensions.WithPassword(CryptoOptions, byte[]?) CryptoOptionsFluentExtensions.WithPayload<T>(CryptoOptions, T) CryptoOptionsFluentExtensions.WithPfs(CryptoOptions, IKeyExchangePrivateKey, IAsymmetricPublicKey?) CryptoOptionsFluentExtensions.WithPrivateKeysStore(CryptoOptions, PrivateKeySuiteStore, int?, bool) CryptoOptionsFluentExtensions.WithRequirements(CryptoOptions, params CryptoFlags[]) CryptoOptionsFluentExtensions.WithSerializerVersion(CryptoOptions) CryptoOptionsFluentExtensions.WithSignatureAlgorithm(CryptoOptions, int, int?) CryptoOptionsFluentExtensions.WithSignatureAlgorithm(CryptoOptions, string?, int?) CryptoOptionsFluentExtensions.WithSignatureKey(CryptoOptions, ISignaturePrivateKey, ISignaturePrivateKey?) CryptoOptionsFluentExtensions.WithTimeCritics(CryptoOptions, TimeSpan, TimeSpan?) CryptoOptionsFluentExtensions.WithoutAsymmetricAlgorithm(CryptoOptions, bool) CryptoOptionsFluentExtensions.WithoutCompression(CryptoOptions) CryptoOptionsFluentExtensions.WithoutEncryptionAlgorithm(CryptoOptions) CryptoOptionsFluentExtensions.WithoutEncryptionPasswordPreProcessing(CryptoOptions) CryptoOptionsFluentExtensions.WithoutFlags(CryptoOptions, params CryptoFlags[]) CryptoOptionsFluentExtensions.WithoutFlagsIncluded(CryptoOptions) CryptoOptionsFluentExtensions.WithoutHashAlgorithm(CryptoOptions) CryptoOptionsFluentExtensions.WithoutHeaderVersion(CryptoOptions) CryptoOptionsFluentExtensions.WithoutKdf(CryptoOptions) CryptoOptionsFluentExtensions.WithoutMac(CryptoOptions) CryptoOptionsFluentExtensions.WithoutPassword(CryptoOptions) CryptoOptionsFluentExtensions.WithoutPayload(CryptoOptions) CryptoOptionsFluentExtensions.WithoutPrivateKeysStore(CryptoOptions) CryptoOptionsFluentExtensions.WithoutProcessingData(CryptoOptions, bool) CryptoOptionsFluentExtensions.WithoutRequirements(CryptoOptions, params CryptoFlags[]) CryptoOptionsFluentExtensions.WithoutSerializerVersion(CryptoOptions) CryptoOptionsFluentExtensions.WithoutTimeCritics(CryptoOptions)"
  },
  "api/wan24.Crypto.CryptoOptionsFluentExtensions.html": {
    "href": "api/wan24.Crypto.CryptoOptionsFluentExtensions.html",
    "title": "Class CryptoOptionsFluentExtensions | wan24-Crypto",
    "keywords": "Class CryptoOptionsFluentExtensions CryptoOptions fluent extensions Inheritance object CryptoOptionsFluentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class CryptoOptionsFluentExtensions Methods | Edit this page View Source SetLeaveOpen(CryptoOptions, bool) Set the LeaveOpen value Declaration public static CryptoOptions SetLeaveOpen(this CryptoOptions options, bool leaveOpen = true) Parameters Type Name Description CryptoOptions options Options bool leaveOpen Leave the target stream open? Returns Type Description CryptoOptions Options | Edit this page View Source WithAdditionalFlags(CryptoOptions, params CryptoFlags[]) Add additional crypto flags Declaration public static CryptoOptions WithAdditionalFlags(this CryptoOptions options, params CryptoFlags[] flags) Parameters Type Name Description CryptoOptions options Options CryptoFlags[] flags Flags Returns Type Description CryptoOptions Options | Edit this page View Source WithAdditionalRequirements(CryptoOptions, params CryptoFlags[]) Add additional requirement flags Declaration public static CryptoOptions WithAdditionalRequirements(this CryptoOptions options, params CryptoFlags[] flags) Parameters Type Name Description CryptoOptions options Options CryptoFlags[] flags Flags Returns Type Description CryptoOptions Options | Edit this page View Source WithCompression(CryptoOptions, CompressionOptions?) Enable compression Declaration public static CryptoOptions WithCompression(this CryptoOptions options, CompressionOptions? compressionOptions = null) Parameters Type Name Description CryptoOptions options Options CompressionOptions compressionOptions Compression options Returns Type Description CryptoOptions | Edit this page View Source WithCounterKdf(CryptoOptions, int, int?, string?) Enable a counter KDF algorithm Declaration public static CryptoOptions WithCounterKdf(this CryptoOptions options, int algo, int? iterations = null, string? kdfOptions = null) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value int? iterations Iterations string kdfOptions KDF options Returns Type Description CryptoOptions Options | Edit this page View Source WithCounterKdf(CryptoOptions, string?, int?, string?) Enable a counter KDF algorithm Declaration public static CryptoOptions WithCounterKdf(this CryptoOptions options, string? algo = null, int? iterations = null, string? kdfOptions = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name int? iterations Iterations string kdfOptions KDF options Returns Type Description CryptoOptions Options | Edit this page View Source WithCounterKeyExchange(CryptoOptions, IKeyExchangePrivateKey, IAsymmetricPublicKey?) Enable a counter key exchange for PFS key encryption Declaration public static CryptoOptions WithCounterKeyExchange(this CryptoOptions options, IKeyExchangePrivateKey key, IAsymmetricPublicKey? peerKey = null) Parameters Type Name Description CryptoOptions options Options IKeyExchangePrivateKey key Private key IAsymmetricPublicKey peerKey Peer public key Returns Type Description CryptoOptions Options | Edit this page View Source WithCounterMac(CryptoOptions, int) Enable creating a counter MAC Declaration public static CryptoOptions WithCounterMac(this CryptoOptions options, int algo) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value Returns Type Description CryptoOptions Options | Edit this page View Source WithCounterMac(CryptoOptions, string?) Enable creating a counter MAC Declaration public static CryptoOptions WithCounterMac(this CryptoOptions options, string? algo = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name Returns Type Description CryptoOptions Options | Edit this page View Source WithCounterSignature(CryptoOptions, ISignaturePrivateKey) Set the counter signature key Declaration public static CryptoOptions WithCounterSignature(this CryptoOptions options, ISignaturePrivateKey key) Parameters Type Name Description CryptoOptions options Options ISignaturePrivateKey key Private key Returns Type Description CryptoOptions Options | Edit this page View Source WithEncryptionAlgorithm(CryptoOptions, int) Set encryption algorithm options Declaration public static CryptoOptions WithEncryptionAlgorithm(this CryptoOptions options, int algo) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value Returns Type Description CryptoOptions Options | Edit this page View Source WithEncryptionAlgorithm(CryptoOptions, string?) Set encryption algorithm options Declaration public static CryptoOptions WithEncryptionAlgorithm(this CryptoOptions options, string? algo = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name Returns Type Description CryptoOptions Options | Edit this page View Source WithEncryptionPasswordPreProcessing(CryptoOptions, EncryptionPasswordPreProcessor_Delegate?, AsyncEncryptionPasswordPreProcessor_Delegate?) Add encryption password pre-processing Declaration public static CryptoOptions WithEncryptionPasswordPreProcessing(this CryptoOptions options, CryptoOptions.EncryptionPasswordPreProcessor_Delegate? preProcessor, CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate? asyncPreProcessor = null) Parameters Type Name Description CryptoOptions options Options CryptoOptions.EncryptionPasswordPreProcessor_Delegate preProcessor Pre-processor CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate asyncPreProcessor Asynchronous pre-processor Returns Type Description CryptoOptions v | Edit this page View Source WithEncryptionPasswordPreProcessing(CryptoOptions, PasswordPostProcessor?) Add encryption password pre-processing Declaration public static CryptoOptions WithEncryptionPasswordPreProcessing(this CryptoOptions options, PasswordPostProcessor? postProcessor = null) Parameters Type Name Description CryptoOptions options Options PasswordPostProcessor postProcessor Post-processor Returns Type Description CryptoOptions Options | Edit this page View Source WithFlagsIncluded(CryptoOptions, CryptoFlags?, bool) Enable including flags in the header Declaration public static CryptoOptions WithFlagsIncluded(this CryptoOptions options, CryptoFlags? flags = null, bool setRequirements = true) Parameters Type Name Description CryptoOptions options Options CryptoFlags? flags Flags bool setRequirements Set the requirements, too? Returns Type Description CryptoOptions Options | Edit this page View Source WithHashAlgorithm(CryptoOptions, int) Add a hash algorithm Declaration public static CryptoOptions WithHashAlgorithm(this CryptoOptions options, int algo) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value Returns Type Description CryptoOptions Options | Edit this page View Source WithHashAlgorithm(CryptoOptions, string?) Add a hash algorithm Declaration public static CryptoOptions WithHashAlgorithm(this CryptoOptions options, string? algo = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name Returns Type Description CryptoOptions Options | Edit this page View Source WithHeaderVersion(CryptoOptions) Include the header version into the header Declaration public static CryptoOptions WithHeaderVersion(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithKdf(CryptoOptions, int, int?, string?, bool) Enable stretching the encryption password using KDF Declaration public static CryptoOptions WithKdf(this CryptoOptions options, int algo, int? iterations = null, string? kdfOptions = null, bool included = true) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value int? iterations Iterations string kdfOptions KDF options bool included Included in the header? Returns Type Description CryptoOptions Options | Edit this page View Source WithKdf(CryptoOptions, string?, int?, string?, bool) Enable stretching the encryption password using KDF Declaration public static CryptoOptions WithKdf(this CryptoOptions options, string? algo = null, int? iterations = null, string? kdfOptions = null, bool included = true) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name int? iterations Iterations string kdfOptions KDF options bool included Included in the header? Returns Type Description CryptoOptions Options | Edit this page View Source WithKeyExchangeAlgorithm(CryptoOptions, int, int?) Set a key exchange algorithm Declaration public static CryptoOptions WithKeyExchangeAlgorithm(this CryptoOptions options, int algo, int? keySize = null) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value int? keySize Key size in bits Returns Type Description CryptoOptions Options | Edit this page View Source WithKeyExchangeAlgorithm(CryptoOptions, string?, int?) Set a key exchange algorithm Declaration public static CryptoOptions WithKeyExchangeAlgorithm(this CryptoOptions options, string? algo = null, int? keySize = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name int? keySize Key size in bits Returns Type Description CryptoOptions Options | Edit this page View Source WithMac(CryptoOptions, int, bool, bool) Enable creating a MAC Declaration public static CryptoOptions WithMac(this CryptoOptions options, int algo, bool included = true, bool forceCoverWhole = false) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value bool included Included in the header? bool forceCoverWhole Force the MAC to cover the whole data? Returns Type Description CryptoOptions Options | Edit this page View Source WithMac(CryptoOptions, string?, bool, bool) Enable creating a MAC Declaration public static CryptoOptions WithMac(this CryptoOptions options, string? algo = null, bool included = true, bool forceCoverWhole = false) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name bool included Included in the header? bool forceCoverWhole Force the MAC to cover the whole data? Returns Type Description CryptoOptions Options | Edit this page View Source WithPassword(CryptoOptions, byte[]?) Set a password for encryption or MAC Declaration public static CryptoOptions WithPassword(this CryptoOptions options, byte[]? pwd = null) Parameters Type Name Description CryptoOptions options Options byte[] pwd Password Returns Type Description CryptoOptions Options | Edit this page View Source WithPayload<T>(CryptoOptions, T) Add a payload object Declaration public static CryptoOptions WithPayload<T>(this CryptoOptions options, T payload) where T : notnull Parameters Type Name Description CryptoOptions options Options T payload Payload Returns Type Description CryptoOptions Options Type Parameters Name Description T Payload type | Edit this page View Source WithPfs(CryptoOptions, IKeyExchangePrivateKey, IAsymmetricPublicKey?) Enable PFS key encryption Declaration public static CryptoOptions WithPfs(this CryptoOptions options, IKeyExchangePrivateKey key, IAsymmetricPublicKey? peerKey = null) Parameters Type Name Description CryptoOptions options Options IKeyExchangePrivateKey key Private key IAsymmetricPublicKey peerKey Peer public key Returns Type Description CryptoOptions Options | Edit this page View Source WithPrivateKeysStore(CryptoOptions, PrivateKeySuiteStore, int?, bool) Use a private key suite store as Declaration public static CryptoOptions WithPrivateKeysStore(this CryptoOptions options, PrivateKeySuiteStore store, int? revision = null, bool includeKeyRevision = true) Parameters Type Name Description CryptoOptions options Options PrivateKeySuiteStore store Private key suite store to use int? revision Key revision to apply (to the private keys) bool includeKeyRevision Include/require the key revision in the header? Returns Type Description CryptoOptions Options | Edit this page View Source WithRequirements(CryptoOptions, params CryptoFlags[]) Set requirements Declaration public static CryptoOptions WithRequirements(this CryptoOptions options, params CryptoFlags[] flags) Parameters Type Name Description CryptoOptions options Options CryptoFlags[] flags Flags Returns Type Description CryptoOptions Options | Edit this page View Source WithSerializerVersion(CryptoOptions) Include the serializer version into the header Declaration public static CryptoOptions WithSerializerVersion(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithSignatureAlgorithm(CryptoOptions, int, int?) Set a signature algorithm Declaration public static CryptoOptions WithSignatureAlgorithm(this CryptoOptions options, int algo, int? keySize = null) Parameters Type Name Description CryptoOptions options Options int algo Algorithm value int? keySize Key size in bits Returns Type Description CryptoOptions Options | Edit this page View Source WithSignatureAlgorithm(CryptoOptions, string?, int?) Set a signature algorithm Declaration public static CryptoOptions WithSignatureAlgorithm(this CryptoOptions options, string? algo = null, int? keySize = null) Parameters Type Name Description CryptoOptions options Options string algo Algorithm name int? keySize Key size in bits Returns Type Description CryptoOptions Options | Edit this page View Source WithSignatureKey(CryptoOptions, ISignaturePrivateKey, ISignaturePrivateKey?) Set the signature key Declaration public static CryptoOptions WithSignatureKey(this CryptoOptions options, ISignaturePrivateKey key, ISignaturePrivateKey? counterKey = null) Parameters Type Name Description CryptoOptions options Options ISignaturePrivateKey key Private key ISignaturePrivateKey counterKey Counter signature private key Returns Type Description CryptoOptions Options | Edit this page View Source WithTimeCritics(CryptoOptions, TimeSpan, TimeSpan?) Add time critical options Declaration public static CryptoOptions WithTimeCritics(this CryptoOptions options, TimeSpan maxAge, TimeSpan? maxTimeOffset = null) Parameters Type Name Description CryptoOptions options Options TimeSpan maxAge Maximum cipher age TimeSpan? maxTimeOffset Maximum time offset Returns Type Description CryptoOptions | Edit this page View Source WithoutAsymmetricAlgorithm(CryptoOptions, bool) Remove asymmetric algorithm options Declaration public static CryptoOptions WithoutAsymmetricAlgorithm(this CryptoOptions options, bool removeKeys = true) Parameters Type Name Description CryptoOptions options Options bool removeKeys Remove keys? Returns Type Description CryptoOptions Options | Edit this page View Source WithoutCompression(CryptoOptions) Disable compression Declaration public static CryptoOptions WithoutCompression(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutEncryptionAlgorithm(CryptoOptions) Remove encryption algorithm options Declaration public static CryptoOptions WithoutEncryptionAlgorithm(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutEncryptionPasswordPreProcessing(CryptoOptions) Remove encryption password pre-processors Declaration public static CryptoOptions WithoutEncryptionPasswordPreProcessing(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutFlags(CryptoOptions, params CryptoFlags[]) Remove flags Declaration public static CryptoOptions WithoutFlags(this CryptoOptions options, params CryptoFlags[] flags) Parameters Type Name Description CryptoOptions options Options CryptoFlags[] flags Flags Returns Type Description CryptoOptions Options | Edit this page View Source WithoutFlagsIncluded(CryptoOptions) Exclude flags from the header Declaration public static CryptoOptions WithoutFlagsIncluded(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutHashAlgorithm(CryptoOptions) Remove the hash algorithm Declaration public static CryptoOptions WithoutHashAlgorithm(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutHeaderVersion(CryptoOptions) Exclude the header version from the header Declaration public static CryptoOptions WithoutHeaderVersion(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutKdf(CryptoOptions) Remove KDF options Declaration public static CryptoOptions WithoutKdf(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutMac(CryptoOptions) Disable creating a MAC Declaration public static CryptoOptions WithoutMac(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutPassword(CryptoOptions) Unset the password Declaration public static CryptoOptions WithoutPassword(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutPayload(CryptoOptions) Remove payload Declaration public static CryptoOptions WithoutPayload(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutPrivateKeysStore(CryptoOptions) Exclude private keys store Declaration public static CryptoOptions WithoutPrivateKeysStore(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutProcessingData(CryptoOptions, bool) Remove processing options (get clean options for the next processing (clear the instance)) Declaration public static CryptoOptions WithoutProcessingData(this CryptoOptions options, bool unsetKeys = true) Parameters Type Name Description CryptoOptions options Options bool unsetKeys Unset keys? Returns Type Description CryptoOptions Options | Edit this page View Source WithoutRequirements(CryptoOptions, params CryptoFlags[]) Remove requirement flags Declaration public static CryptoOptions WithoutRequirements(this CryptoOptions options, params CryptoFlags[] flags) Parameters Type Name Description CryptoOptions options Options CryptoFlags[] flags Flags Returns Type Description CryptoOptions Options | Edit this page View Source WithoutSerializerVersion(CryptoOptions) Exclude the serializer version from the header Declaration public static CryptoOptions WithoutSerializerVersion(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source WithoutTimeCritics(CryptoOptions) Disable time critical options Declaration public static CryptoOptions WithoutTimeCritics(this CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options"
  },
  "api/wan24.Crypto.CryptoProfiles.html": {
    "href": "api/wan24.Crypto.CryptoProfiles.html",
    "title": "Class CryptoProfiles | wan24-Crypto",
    "keywords": "Class CryptoProfiles Crypto profiles Inheritance object CryptoProfiles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class CryptoProfiles Fields | Edit this page View Source Registered Registered profiles Declaration public static readonly ConcurrentDictionary<string, CryptoOptions> Registered Field Value Type Description ConcurrentDictionary<string, CryptoOptions> Methods | Edit this page View Source GetProfile(string) Get a profile Declaration public static CryptoOptions GetProfile(string key) Parameters Type Name Description string key Key Returns Type Description CryptoOptions Profile"
  },
  "api/wan24.Crypto.CryptoRandomStream.html": {
    "href": "api/wan24.Crypto.CryptoRandomStream.html",
    "title": "Class CryptoRandomStream | wan24-Crypto",
    "keywords": "Class CryptoRandomStream Crypto random stream (uses RND for reading cryptographic random bytes into the given buffers) Inheritance object MarshalByRefObject Stream StreamBase CryptoRandomStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.StackInfo StreamBase.Close() StreamBase.DisposeAsync() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class CryptoRandomStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source Instance Singleton instance Declaration public static CryptoRandomStream Instance { get; } Property Value Type Description CryptoRandomStream | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) Implements wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.CryptographicException.html": {
    "href": "api/wan24.Crypto.CryptographicException.html",
    "title": "Class CryptographicException | wan24-Crypto",
    "keywords": "Class CryptographicException Thrown on any cryptographic problem Inheritance object Exception CryptographicException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Serializable] public sealed class CryptographicException : Exception, ISerializable Constructors | Edit this page View Source CryptographicException() Constructor Declaration public CryptographicException() | Edit this page View Source CryptographicException(bool) Constructor Declaration public CryptographicException(bool noDelay) Parameters Type Name Description bool noDelay No delay? | Edit this page View Source CryptographicException(bool, string?) Constructor Declaration public CryptographicException(bool noDelay, string? message) Parameters Type Name Description bool noDelay No delay? string message Message | Edit this page View Source CryptographicException(bool, string?, Exception) Constructor Declaration public CryptographicException(bool noDelay, string? message, Exception inner) Parameters Type Name Description bool noDelay No delay? string message Message Exception inner Inner exception | Edit this page View Source CryptographicException(string?) Constructor Declaration public CryptographicException(string? message) Parameters Type Name Description string message Message | Edit this page View Source CryptographicException(string?, Exception) Constructor Declaration public CryptographicException(string? message, Exception inner) Parameters Type Name Description string message Message Exception inner Inner exception Properties | Edit this page View Source Delay Delay Declaration public static TimeSpan? Delay { get; set; } Property Value Type Description TimeSpan? Methods | Edit this page View Source From(Exception) Create with an inner exception Declaration public static CryptographicException From(Exception inner) Parameters Type Name Description Exception inner Inner exception Returns Type Description CryptographicException Exception | Edit this page View Source From(string, Exception) Create with an inner exception Declaration public static CryptographicException From(string message, Exception inner) Parameters Type Name Description string message Overriding message Exception inner Inner exception Returns Type Description CryptographicException Exception | Edit this page View Source FromAsync(Exception) Create with an inner exception Declaration public static Task<CryptographicException> FromAsync(Exception inner) Parameters Type Name Description Exception inner Inner exception Returns Type Description Task<CryptographicException> Exception | Edit this page View Source FromAsync(string, Exception) Create with an inner exception Declaration public static Task<CryptographicException> FromAsync(string message, Exception inner) Parameters Type Name Description string message Overriding message Exception inner Inner exception Returns Type Description Task<CryptographicException> Exception Implements ISerializable"
  },
  "api/wan24.Crypto.DecryptionStreams.html": {
    "href": "api/wan24.Crypto.DecryptionStreams.html",
    "title": "Class DecryptionStreams | wan24-Crypto",
    "keywords": "Class DecryptionStreams Decryption streams Inheritance object DisposableRecordBase DecryptionStreams Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<DecryptionStreams> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record DecryptionStreams : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<DecryptionStreams> Constructors | Edit this page View Source DecryptionStreams(Stream, ICryptoTransform) Constructor Declaration public DecryptionStreams(Stream cryptoStream, ICryptoTransform transform) Parameters Type Name Description Stream cryptoStream Crypto stream ICryptoTransform transform Crypto transform Properties | Edit this page View Source CryptoStream Crypto stream (written data will be written encrypted to the MAC or the cipher stream (while the MAC stream writes to the cipher stream)) Declaration public Stream CryptoStream { get; } Property Value Type Description Stream | Edit this page View Source Transform Crypto transform Declaration public ICryptoTransform Transform { get; } Property Value Type Description ICryptoTransform Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.DefaultPasswordPostProcessor.html": {
    "href": "api/wan24.Crypto.DefaultPasswordPostProcessor.html",
    "title": "Class DefaultPasswordPostProcessor | wan24-Crypto",
    "keywords": "Class DefaultPasswordPostProcessor Default password post-processor (performs KDF, can perform counter KDF and MAC (if a counter MAC algorthm was set); resulting password will be 64 bytes, or the length of the counter MAC algorithm) Inheritance object PasswordPostProcessor DefaultPasswordPostProcessor Inherited Members PasswordPostProcessor.Instance PasswordPostProcessor.PreProcessEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions) PasswordPostProcessor.PreProcessAsyncEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) PasswordPostProcessor.PreProcessEncryptionPasswordAsync(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class DefaultPasswordPostProcessor : PasswordPostProcessor Constructors | Edit this page View Source DefaultPasswordPostProcessor() Constructor Declaration public DefaultPasswordPostProcessor() Properties | Edit this page View Source Options Options (require MAC and KDF algorithm) Declaration public static CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source PostProcess(byte[]) Post-process a password Declaration public override byte[] PostProcess(byte[] pwd) Parameters Type Name Description byte[] pwd Password (won't be cleared) Returns Type Description byte[] Processed password (don't forget to clear!) Overrides PasswordPostProcessor.PostProcess(byte[]) | Edit this page View Source PostProcess(in byte[], CryptoOptions) Post-process a password with custom options Declaration public static byte[] PostProcess(in byte[] pwd, CryptoOptions options) Parameters Type Name Description byte[] pwd Password (won't be cleared) CryptoOptions options Options Returns Type Description byte[] Processed password (don't forget to clear!)"
  },
  "api/wan24.Crypto.DekAttribute.html": {
    "href": "api/wan24.Crypto.DekAttribute.html",
    "title": "Class DekAttribute | wan24-Crypto",
    "keywords": "Class DekAttribute Attribute for a data encryption key (DEK) of an object Inheritance object Attribute DekAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class DekAttribute : Attribute Constructors | Edit this page View Source DekAttribute(int) Constructor Declaration public DekAttribute(int length = 64) Parameters Type Name Description int length Properties | Edit this page View Source Length Length of the data encryption key (DEK) in bytes Declaration public virtual int Length { get; } Property Value Type Description int Methods | Edit this page View Source GetValue<T>(T, PropertyInfoExt) Get the DEK Declaration public virtual byte[]? GetValue<T>(T obj, PropertyInfoExt pi) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info Returns Type Description byte[] DEK Type Parameters Name Description T Object type | Edit this page View Source SetValue<T>(T, PropertyInfoExt, byte[]) Set the DEK Declaration public virtual void SetValue<T>(T obj, PropertyInfoExt pi, byte[] dek) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info byte[] dek DEK Type Parameters Name Description T Object type"
  },
  "api/wan24.Crypto.DeniedAlgorithms.html": {
    "href": "api/wan24.Crypto.DeniedAlgorithms.html",
    "title": "Class DeniedAlgorithms | wan24-Crypto",
    "keywords": "Class DeniedAlgorithms Denied algorithms (won't be accepted for creating new keys, key exchange data, signatures or for encryption; may still be used for key exchange, signature validation and decryption) Inheritance object DeniedAlgorithms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class DeniedAlgorithms Methods | Edit this page View Source AddAsymmetricAlgorithm(in int, in string) Add an asymmetric algrithm Declaration public static void AddAsymmetricAlgorithm(in int value, in string name) Parameters Type Name Description int value Value string name Name | Edit this page View Source AddAsymmetricAlgorithm(in IAsymmetricAlgorithm) Add an asymmetric algrithm Declaration public static void AddAsymmetricAlgorithm(in IAsymmetricAlgorithm algo) Parameters Type Name Description IAsymmetricAlgorithm algo Algorithm | Edit this page View Source AddEncryptionAlgorithm(in int, in string) Add an encryption algrithm Declaration public static void AddEncryptionAlgorithm(in int value, in string name) Parameters Type Name Description int value Value string name Name | Edit this page View Source AddEncryptionAlgorithm(in EncryptionAlgorithmBase) Add an encryption algrithm Declaration public static void AddEncryptionAlgorithm(in EncryptionAlgorithmBase algo) Parameters Type Name Description EncryptionAlgorithmBase algo Algorithm | Edit this page View Source IsAsymmetricAlgorithmDenied(in int) Determine if an asymmetric algorithm was denied Declaration public static bool IsAsymmetricAlgorithmDenied(in int value) Parameters Type Name Description int value Algorithm value Returns Type Description bool If the algorithm was denied | Edit this page View Source IsAsymmetricAlgorithmDenied(string) Determine if an asymmetric algorithm was denied Declaration public static bool IsAsymmetricAlgorithmDenied(string name) Parameters Type Name Description string name Algorithm name Returns Type Description bool If the algorithm was denied | Edit this page View Source IsEncryptionAlgorithmDenied(in int) Determine if an encryption algorithm was denied Declaration public static bool IsEncryptionAlgorithmDenied(in int value) Parameters Type Name Description int value Algorithm value Returns Type Description bool If the algorithm was denied | Edit this page View Source IsEncryptionAlgorithmDenied(string) Determine if an encryption algorithm was denied Declaration public static bool IsEncryptionAlgorithmDenied(string name) Parameters Type Name Description string name Algorithm name Returns Type Description bool If the algorithm was denied"
  },
  "api/wan24.Crypto.DevHwRng.html": {
    "href": "api/wan24.Crypto.DevHwRng.html",
    "title": "Class DevHwRng | wan24-Crypto",
    "keywords": "Class DevHwRng /dev/hwrng RNG Inheritance object DisposableBase DisposableRngBase DevHwRng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class DevHwRng : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Remarks Constructor Constructors | Edit this page View Source DevHwRng(in int) /dev/hwrng RNG Declaration public DevHwRng(in int streamPoolCapacity) Parameters Type Name Description int streamPoolCapacity /dev/hwrng stream pool capacity Remarks Constructor Fields | Edit this page View Source HWRNG /dev/hwrng filename Declaration public const string HWRNG = \"/dev/hwrng\" Field Value Type Description string Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DevRandomRng.html": {
    "href": "api/wan24.Crypto.DevRandomRng.html",
    "title": "Class DevRandomRng | wan24-Crypto",
    "keywords": "Class DevRandomRng /dev/random RNG Inheritance object RngBase SeedableRngBase DevRandomRng Implements ISeedableRng IRng ISeedConsumer Inherited Members RngBase.GetBytes(in int) RngBase.GetBytesAsync(int, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class DevRandomRng : SeedableRngBase, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source DevRandomRng() Constructor Declaration public DevRandomRng() Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public override void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed Overrides SeedableRngBase.AddSeed(ReadOnlySpan<byte>) | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public override Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides SeedableRngBase.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides RngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides RngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements ISeedableRng IRng ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DevRandomStreamPool.html": {
    "href": "api/wan24.Crypto.DevRandomStreamPool.html",
    "title": "Class DevRandomStreamPool | wan24-Crypto",
    "keywords": "Class DevRandomStreamPool /dev/random readable stream pool Inheritance object DisposableBase DisposableObjectPool<Stream> DevRandomStreamPool Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectPool<Stream> IObjectPool IPool Inherited Members DisposableObjectPool<Stream>.Rent() DisposableObjectPool<Stream>.Return(in Stream, in bool) DisposableObjectPool<Stream>.GUID DisposableObjectPool<Stream>.Name DisposableObjectPool<Stream>.ItemType DisposableObjectPool<Stream>.Capacity DisposableObjectPool<Stream>.Available DisposableObjectPool<Stream>.ResetOnRent DisposableObjectPool<Stream>.ForceResetOnReturn DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class DevRandomStreamPool : DisposableObjectPool<Stream>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IObjectPool<Stream>, IObjectPool, IPool Remarks Constructor Constructors | Edit this page View Source DevRandomStreamPool(in int) /dev/random readable stream pool Declaration public DevRandomStreamPool(in int capacity) Parameters Type Name Description int capacity Capacity Remarks Constructor Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IObjectPool<T> wan24.Core.IObjectPool wan24.Core.IPool"
  },
  "api/wan24.Crypto.DisposablEntropyMonitor.html": {
    "href": "api/wan24.Crypto.DisposablEntropyMonitor.html",
    "title": "Class DisposablEntropyMonitor | wan24-Crypto",
    "keywords": "Class DisposablEntropyMonitor Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) Inheritance object DisposableBase DisposableRngBase DisposablEntropyMonitor Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class DisposablEntropyMonitor : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Remarks Constructor Constructors | Edit this page View Source DisposablEntropyMonitor(in IRng) Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) Declaration public DisposablEntropyMonitor(in IRng rng) Parameters Type Name Description IRng rng Entropy monitored RNG (will be disposed) Remarks Constructor Properties | Edit this page View Source Algorithms Entropy algorithms to use Declaration public EntropyHelper.Algorithms? Algorithms { get; init; } Property Value Type Description EntropyHelper.Algorithms? | Edit this page View Source MaxRetries Max. number of retries to get RND with the required entropy (zero for no limit) Declaration public int MaxRetries { get; init; } Property Value Type Description int | Edit this page View Source MinRndlength Min. RND length required for monitoring Declaration public int MinRndlength { get; init; } Property Value Type Description int | Edit this page View Source RNG Entropy monitored RNG (will be disposed) Declaration public IRng RNG { get; } Property Value Type Description IRng Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DisposableBackupRng.html": {
    "href": "api/wan24.Crypto.DisposableBackupRng.html",
    "title": "Class DisposableBackupRng | wan24-Crypto",
    "keywords": "Class DisposableBackupRng RNG which uses backup RNGs on error Inheritance object DisposableBase DisposableRngBase DisposableBackupRng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class DisposableBackupRng : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Constructors | Edit this page View Source DisposableBackupRng(params IRng[]) Constructor Declaration public DisposableBackupRng(params IRng[] rngs) Parameters Type Name Description IRng[] rngs RNGs (will be disposed) Properties | Edit this page View Source RNGs RNGs (will be disposed) Declaration public FrozenSet<IRng> RNGs { get; } Property Value Type Description FrozenSet<IRng> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DisposableCryptoOptions.html": {
    "href": "api/wan24.Crypto.DisposableCryptoOptions.html",
    "title": "Class DisposableCryptoOptions | wan24-Crypto",
    "keywords": "Class DisposableCryptoOptions Disposable CryptoOptions (will clear the hosted options when disposing) Inheritance object DisposableRecordBase DisposableCryptoOptions Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<DisposableCryptoOptions> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record DisposableCryptoOptions : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<DisposableCryptoOptions> Constructors | Edit this page View Source DisposableCryptoOptions(in CryptoOptions?) Constructor Declaration public DisposableCryptoOptions(in CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Properties | Edit this page View Source Options Options Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) Operators | Edit this page View Source implicit operator DisposableCryptoOptions(in CryptoOptions) Cast as DisposableCryptoOptions Declaration public static implicit operator DisposableCryptoOptions(in CryptoOptions options) Parameters Type Name Description CryptoOptions options CryptoOptions Returns Type Description DisposableCryptoOptions | Edit this page View Source implicit operator CryptoOptions(in DisposableCryptoOptions) Cast as CryptoOptions Declaration public static implicit operator CryptoOptions(in DisposableCryptoOptions options) Parameters Type Name Description DisposableCryptoOptions options DisposableCryptoOptions Returns Type Description CryptoOptions Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.DisposableRngBase.html": {
    "href": "api/wan24.Crypto.DisposableRngBase.html",
    "title": "Class DisposableRngBase | wan24-Crypto",
    "keywords": "Class DisposableRngBase Base class for a disposable RNG Inheritance object DisposableBase DisposableRngBase DevHwRng DisposablEntropyMonitor DisposableBackupRng DisposableSeedableRngBase DisposableXorRng HavegeRng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract class DisposableRngBase : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Constructors | Edit this page View Source DisposableRngBase(bool) Constructor Declaration protected DisposableRngBase(bool asyncDisposing = true) Parameters Type Name Description bool asyncDisposing Asynchronous disposing? Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public abstract Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public abstract Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DisposableSeedableRngBase.html": {
    "href": "api/wan24.Crypto.DisposableSeedableRngBase.html",
    "title": "Class DisposableSeedableRngBase | wan24-Crypto",
    "keywords": "Class DisposableSeedableRngBase Base class for a disposable seedable RNG Inheritance object DisposableBase DisposableRngBase DisposableSeedableRngBase Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ISeedableRng IRng ISeedConsumer Inherited Members DisposableRngBase.FillBytes(in Span<byte>) DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract class DisposableSeedableRngBase : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source DisposableSeedableRngBase(bool) Constructor Declaration protected DisposableSeedableRngBase(bool asyncDisposing = true) Parameters Type Name Description bool asyncDisposing Asynchronous disposing? Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public abstract void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public abstract Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable ISeedableRng IRng ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.DisposableSignedPayload-1.html": {
    "href": "api/wan24.Crypto.DisposableSignedPayload-1.html",
    "title": "Class DisposableSignedPayload<T> | wan24-Crypto",
    "keywords": "Class DisposableSignedPayload<T> Signed payload Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase DisposableSignedPayload<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<DisposableSignedPayload<T>> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.PrintMembers(StringBuilder) DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableStreamSerializerRecordBase.EqualityContract DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public record DisposableSignedPayload<T> : DisposableStreamSerializerRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<DisposableSignedPayload<T>> where T : class, IStreamSerializer, IDisposable Type Parameters Name Description T Payload type Constructors | Edit this page View Source DisposableSignedPayload() Constructor Declaration public DisposableSignedPayload() | Edit this page View Source DisposableSignedPayload(T, ISignaturePrivateKey, CryptoOptions?) Constructor Declaration public DisposableSignedPayload(T payload, ISignaturePrivateKey privateKey, CryptoOptions? options = null) Parameters Type Name Description T payload Payload ISignaturePrivateKey privateKey Private key CryptoOptions options Options Fields | Edit this page View Source SignedData Signed data Declaration protected byte[]? SignedData Field Value Type Description byte[] | Edit this page View Source SignedDataMaxLength Maximum length of the signed data in bytes Declaration protected int SignedDataMaxLength Field Value Type Description int | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Payload Payload Declaration public T Payload { get; protected set; } Property Value Type Description T | Edit this page View Source Signature Signature Declaration public SignatureContainer Signature { get; protected set; } Property Value Type Description SignatureContainer Methods | Edit this page View Source CreateSignedData() Create signed data Declaration public byte[] CreateSignedData() Returns Type Description byte[] Signed data | Edit this page View Source CreateSignedDataInt(Stream) Create signed data Declaration protected virtual void CreateSignedDataInt(Stream stream) Parameters Type Name Description Stream stream Stream | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source DeserializeSignedData() Deserialize signed data Declaration protected void DeserializeSignedData() | Edit this page View Source DeserializeSignedDataInt(Stream, int) Deserialize signed data Declaration protected virtual void DeserializeSignedDataInt(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source Sign(ISignaturePrivateKey, string?, CryptoOptions?) Create the signature Declaration public void Sign(ISignaturePrivateKey privateKey, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description ISignaturePrivateKey privateKey Private key string purpose Purpose CryptoOptions options Options | Edit this page View Source Validate(bool) Validate the signature Declaration public bool Validate(bool throwOnError = true) Parameters Type Name Description bool throwOnError Throw an exception on error? Returns Type Description bool If the signature is valid Operators | Edit this page View Source implicit operator byte[](DisposableSignedPayload<T>) Cast as serialized data Declaration public static implicit operator byte[](DisposableSignedPayload<T> signedPayload) Parameters Type Name Description DisposableSignedPayload<T> signedPayload Signed payload Returns Type Description byte[] | Edit this page View Source implicit operator T(DisposableSignedPayload<T>) Cast as payload Declaration public static implicit operator T(DisposableSignedPayload<T> signedPayload) Parameters Type Name Description DisposableSignedPayload<T> signedPayload Signed payload Returns Type Description T | Edit this page View Source implicit operator SignatureContainer(DisposableSignedPayload<T>) Cast as signature Declaration public static implicit operator SignatureContainer(DisposableSignedPayload<T> signedPayload) Parameters Type Name Description DisposableSignedPayload<T> signedPayload Signed payload Returns Type Description SignatureContainer Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.DisposableXorRng.html": {
    "href": "api/wan24.Crypto.DisposableXorRng.html",
    "title": "Class DisposableXorRng | wan24-Crypto",
    "keywords": "Class DisposableXorRng RNG which combines two or more RNGs with XOR Inheritance object DisposableBase DisposableRngBase DisposableXorRng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class DisposableXorRng : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Constructors | Edit this page View Source DisposableXorRng(params IRng[]) Constructor Declaration public DisposableXorRng(params IRng[] rngs) Parameters Type Name Description IRng[] rngs RNGs to use (will be disposed, if possible!) Properties | Edit this page View Source RNG RNGs to use Declaration public IRng[] RNG { get; } Property Value Type Description IRng[] Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.EllipticCurves.html": {
    "href": "api/wan24.Crypto.EllipticCurves.html",
    "title": "Class EllipticCurves | wan24-Crypto",
    "keywords": "Class EllipticCurves Elliptic curves Inheritance object EllipticCurves Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class EllipticCurves Fields | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits (521) Declaration public const int DEFAULT_KEY_SIZE = 521 Field Value Type Description int | Edit this page View Source DEFAULT_NAME Default curve name (secp521r1) Declaration public const string DEFAULT_NAME = \"secp521r1\" Field Value Type Description string | Edit this page View Source SECP256R1 secp256r1 Declaration public const string SECP256R1 = \"secp256r1\" Field Value Type Description string | Edit this page View Source SECP256R1_CURVE secp256r1 curve (NIST P-256, 128 bit security) Declaration public static readonly ECCurve SECP256R1_CURVE Field Value Type Description ECCurve | Edit this page View Source SECP256R1_KEY_SIZE secp256r1 key size in bits Declaration public const int SECP256R1_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source SECP384R1 secp384r1 Declaration public const string SECP384R1 = \"secp384r1\" Field Value Type Description string | Edit this page View Source SECP384R1_CURVE secp384r1 curve (NIST P-384, 192 bit security) Declaration public static readonly ECCurve SECP384R1_CURVE Field Value Type Description ECCurve | Edit this page View Source SECP384R1_KEY_SIZE secp384r1 key size in bits Declaration public const int SECP384R1_KEY_SIZE = 384 Field Value Type Description int | Edit this page View Source SECP521R1 secp521r1 Declaration public const string SECP521R1 = \"secp521r1\" Field Value Type Description string | Edit this page View Source SECP521R1_CURVE secp521r1 curve (NIST P-521, 260 bit security) Declaration public static readonly ECCurve SECP521R1_CURVE Field Value Type Description ECCurve | Edit this page View Source SECP521R1_KEY_SIZE secp521r1 key size in bits Declaration public const int SECP521R1_KEY_SIZE = 521 Field Value Type Description int Methods | Edit this page View Source DenyCurve(in int) Deny an elliptic curve Declaration public static void DenyCurve(in int bits) Parameters Type Name Description int bits Key size in bits | Edit this page View Source DenyCurve(in ECCurve) Deny an elliptic curve Declaration public static void DenyCurve(in ECCurve curve) Parameters Type Name Description ECCurve curve Curve | Edit this page View Source DenyCurve(in string) Deny an elliptic curve Declaration public static void DenyCurve(in string name) Parameters Type Name Description string name Curve name | Edit this page View Source GetCurve(int) Get the curve from a key size Declaration public static ECCurve GetCurve(int bits) Parameters Type Name Description int bits Key size in bits Returns Type Description ECCurve Curve name | Edit this page View Source GetCurveName(int) Get the curve name from a key size Declaration public static string GetCurveName(int bits) Parameters Type Name Description int bits Key size in bits Returns Type Description string Curve name | Edit this page View Source GetKeySize(ECCurve) Get the key size for a curve Declaration public static int GetKeySize(ECCurve curve) Parameters Type Name Description ECCurve curve Curve Returns Type Description int Key size in bits | Edit this page View Source GetKeySize(string) Get the key size for a curve Declaration public static int GetKeySize(string curve) Parameters Type Name Description string curve Curve name Returns Type Description int Key size in bits | Edit this page View Source IsCurveAllowed(in int) Determine if an elliptic curve is allowed Declaration public static bool IsCurveAllowed(in int bits) Parameters Type Name Description int bits Key size in bits Returns Type Description bool If the elliptic curve is allowed | Edit this page View Source IsCurveAllowed(in ECCurve) Determine if an elliptic curve is allowed Declaration public static bool IsCurveAllowed(in ECCurve curve) Parameters Type Name Description ECCurve curve Curve Returns Type Description bool If the elliptic curve is allowed | Edit this page View Source IsCurveAllowed(in string) Determine if an elliptic curve is allowed Declaration public static bool IsCurveAllowed(in string name) Parameters Type Name Description string name Curve name Returns Type Description bool If the elliptic curve is allowed"
  },
  "api/wan24.Crypto.EncryptAttribute.html": {
    "href": "api/wan24.Crypto.EncryptAttribute.html",
    "title": "Class EncryptAttribute | wan24-Crypto",
    "keywords": "Class EncryptAttribute Attribute for a property which can be encrypted/decrypted Inheritance object Attribute EncryptAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class EncryptAttribute : Attribute Constructors | Edit this page View Source EncryptAttribute() Constructor Declaration public EncryptAttribute() Methods | Edit this page View Source GetCipher<T>(T, PropertyInfoExt) Get the cipher data Declaration public virtual byte[]? GetCipher<T>(T obj, PropertyInfoExt pi) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info Returns Type Description byte[] Raw data Type Parameters Name Description T Object type | Edit this page View Source GetRaw<T>(T, PropertyInfoExt) Get the raw data Declaration public virtual byte[]? GetRaw<T>(T obj, PropertyInfoExt pi) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info Returns Type Description byte[] Raw data Type Parameters Name Description T Object type | Edit this page View Source SetCipher<T>(T, PropertyInfoExt, byte[]) Set the cipher data Declaration public virtual void SetCipher<T>(T obj, PropertyInfoExt pi, byte[] data) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info byte[] data Cipher data Type Parameters Name Description T Object type | Edit this page View Source SetRaw<T>(T, PropertyInfoExt, byte[]) Set the raw data Declaration public virtual void SetRaw<T>(T obj, PropertyInfoExt pi, byte[] data) where T : notnull Parameters Type Name Description T obj Object PropertyInfoExt pi Property info byte[] data Raw data Type Parameters Name Description T Object type"
  },
  "api/wan24.Crypto.EncryptedJsonValue-1.html": {
    "href": "api/wan24.Crypto.EncryptedJsonValue-1.html",
    "title": "Class EncryptedJsonValue<T> | wan24-Crypto",
    "keywords": "Class EncryptedJsonValue<T> Encrypted JSON value Inheritance object DisposableBase EncryptedValue EncryptedJsonValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members EncryptedValue._Decrypted EncryptedValue._SymmetricKey EncryptedValue._AsymmetricKey EncryptedValue.Options EncryptedValue.SymmetricKey EncryptedValue.SymmetricKeyFactory EncryptedValue.AsymmetricKey EncryptedValue.AsymmetricKeyFactory EncryptedValue.StoreKeys EncryptedValue.HasKey EncryptedValue.CipherData EncryptedValue.StoreDecrypted EncryptedValue.Dispose(bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class EncryptedJsonValue<T> : EncryptedValue, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Type Parameters Name Description T Object type Constructors | Edit this page View Source EncryptedJsonValue() Constructor Declaration public EncryptedJsonValue() Fields | Edit this page View Source _Object Object Declaration protected T? _Object Field Value Type Description T Properties | Edit this page View Source CurrentObject Current object buffer Declaration public T? CurrentObject { get; } Property Value Type Description T | Edit this page View Source Object Object Declaration public virtual T? Object { get; set; } Property Value Type Description T | Edit this page View Source RawData Raw data (will be cloned for setting/getting; the store will be cleared when disposing) Declaration public override byte[]? RawData { get; set; } Property Value Type Description byte[] Overrides EncryptedValue.RawData Operators | Edit this page View Source implicit operator T?(EncryptedJsonValue<T>) Cast as object Declaration public static implicit operator T?(EncryptedJsonValue<T> value) Parameters Type Name Description EncryptedJsonValue<T> value Value Returns Type Description T Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.EncryptedSerializableValue-1.html": {
    "href": "api/wan24.Crypto.EncryptedSerializableValue-1.html",
    "title": "Class EncryptedSerializableValue<T> | wan24-Crypto",
    "keywords": "Class EncryptedSerializableValue<T> Encrypted serializable value Inheritance object DisposableBase EncryptedValue EncryptedSerializableValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members EncryptedValue._Decrypted EncryptedValue._SymmetricKey EncryptedValue._AsymmetricKey EncryptedValue.Options EncryptedValue.SymmetricKey EncryptedValue.SymmetricKeyFactory EncryptedValue.AsymmetricKey EncryptedValue.AsymmetricKeyFactory EncryptedValue.StoreKeys EncryptedValue.HasKey EncryptedValue.CipherData EncryptedValue.StoreDecrypted EncryptedValue.Dispose(bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class EncryptedSerializableValue<T> : EncryptedValue, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : class, IStreamSerializer, new() Type Parameters Name Description T Object type Constructors | Edit this page View Source EncryptedSerializableValue() Constructor Declaration public EncryptedSerializableValue() Fields | Edit this page View Source _Object Object Declaration protected T? _Object Field Value Type Description T Properties | Edit this page View Source CurrentObject Current object buffer Declaration public T? CurrentObject { get; } Property Value Type Description T | Edit this page View Source Object Object Declaration public virtual T? Object { get; set; } Property Value Type Description T | Edit this page View Source RawData Raw data (will be cloned for setting/getting; the store will be cleared when disposing) Declaration public override byte[]? RawData { get; set; } Property Value Type Description byte[] Overrides EncryptedValue.RawData Operators | Edit this page View Source implicit operator T?(EncryptedSerializableValue<T>) Cast as object Declaration public static implicit operator T?(EncryptedSerializableValue<T> value) Parameters Type Name Description EncryptedSerializableValue<T> value Value Returns Type Description T Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.EncryptedValue.html": {
    "href": "api/wan24.Crypto.EncryptedValue.html",
    "title": "Class EncryptedValue | wan24-Crypto",
    "keywords": "Class EncryptedValue Encrypted value Inheritance object DisposableBase EncryptedValue EncryptedJsonValue<T> EncryptedSerializableValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class EncryptedValue : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EncryptedValue() Constructor Declaration public EncryptedValue() Fields | Edit this page View Source _AsymmetricKey Asymmetric key Declaration protected IAsymmetricPrivateKey? _AsymmetricKey Field Value Type Description IAsymmetricPrivateKey | Edit this page View Source _Decrypted Decrypted value Declaration protected byte[]? _Decrypted Field Value Type Description byte[] | Edit this page View Source _SymmetricKey Symmetric key Declaration protected byte[]? _SymmetricKey Field Value Type Description byte[] Properties | Edit this page View Source AsymmetricKey Asymmetric key (won't be disposed!) Declaration [SensitiveData] public virtual IAsymmetricPrivateKey? AsymmetricKey { get; set; } Property Value Type Description IAsymmetricPrivateKey | Edit this page View Source AsymmetricKeyFactory Asymmetric key factory Declaration public Func<IAsymmetricPrivateKey>? AsymmetricKeyFactory { get; set; } Property Value Type Description Func<IAsymmetricPrivateKey> | Edit this page View Source CipherData Cipher data Declaration public byte[]? CipherData { get; set; } Property Value Type Description byte[] | Edit this page View Source HasKey Has a key? Declaration public bool HasKey { get; } Property Value Type Description bool | Edit this page View Source Options Options Declaration public CryptoOptions Options { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source RawData Raw data (will be cloned for setting/getting; the store will be cleared when disposing) Declaration [SensitiveData] public virtual byte[]? RawData { get; set; } Property Value Type Description byte[] | Edit this page View Source StoreDecrypted Store decrypted (once the decrypted raw data was requested)? Declaration public bool StoreDecrypted { get; set; } Property Value Type Description bool | Edit this page View Source StoreKeys Store keys from the factory methods? Declaration public bool StoreKeys { get; set; } Property Value Type Description bool | Edit this page View Source SymmetricKey Symmetric key (won't be cleared!) Declaration [SensitiveData] public virtual byte[]? SymmetricKey { get; set; } Property Value Type Description byte[] | Edit this page View Source SymmetricKeyFactory Symmetric key factory Declaration public Func<byte[]>? SymmetricKeyFactory { get; set; } Property Value Type Description Func<byte[]> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Operators | Edit this page View Source explicit operator EncryptedValue(byte[]) Cast cipher data as encrypted value Declaration public static explicit operator EncryptedValue(byte[] cipherData) Parameters Type Name Description byte[] cipherData Cipher data Returns Type Description EncryptedValue | Edit this page View Source implicit operator byte[]?(EncryptedValue) Cast as cipher data Declaration public static implicit operator byte[]?(EncryptedValue value) Parameters Type Name Description EncryptedValue value Value Returns Type Description byte[] Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.EncryptionAes256CbcAlgorithm.html": {
    "href": "api/wan24.Crypto.EncryptionAes256CbcAlgorithm.html",
    "title": "Class EncryptionAes256CbcAlgorithm | wan24-Crypto",
    "keywords": "Class EncryptionAes256CbcAlgorithm AES-256-CBC symmetric encryption algorithm (using ISO10126 padding) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase EncryptionAes256CbcAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<EncryptionAes256CbcAlgorithm> Inherited Members EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record EncryptionAes256CbcAlgorithm : EncryptionAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<EncryptionAes256CbcAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"AES256CBC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"AES-256-CBC\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_AES256CBC_RAW AES-256-CBC raw (without header) and uncompressed profile key Declaration public const string PROFILE_AES256CBC_RAW = \"AES256CBC_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static EncryptionAes256CbcAlgorithm Instance { get; } Property Value Type Description EncryptionAes256CbcAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateAes(CryptoOptions) Create the AES instance Declaration public Aes CreateAes(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description Aes AES instance | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.EncryptionAlgorithmBase.html": {
    "href": "api/wan24.Crypto.EncryptionAlgorithmBase.html",
    "title": "Class EncryptionAlgorithmBase | wan24-Crypto",
    "keywords": "Class EncryptionAlgorithmBase Base class for a symmetric encryption algorithm Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase EncryptionAes256CbcAlgorithm EncryptionVoidAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> Inherited Members CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record EncryptionAlgorithmBase : CryptoAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase> Constructors | Edit this page View Source EncryptionAlgorithmBase(string, int) Constructor Declaration protected EncryptionAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Fields | Edit this page View Source _DefaultOptions Default options Declaration protected CryptoOptions _DefaultOptions Field Value Type Description CryptoOptions Properties | Edit this page View Source BlockSize Block size in bytes Declaration public abstract int BlockSize { get; } Property Value Type Description int | Edit this page View Source DefaultOptions Default options Declaration public virtual CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source IsDenied Was this allogithm denied (still usable for decryption, but not for encryption)? Declaration public bool IsDenied { get; } Property Value Type Description bool | Edit this page View Source IvSize IV size in bytes Declaration public abstract int IvSize { get; } Property Value Type Description int | Edit this page View Source KeySize Key size in bytes Declaration public abstract int KeySize { get; } Property Value Type Description int | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public abstract bool RequireMacAuthentication { get; } Property Value Type Description bool | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides CryptoAlgorithmBase.State Methods | Edit this page View Source CreateIvBytes() Create random IV bytes Declaration protected virtual byte[] CreateIvBytes() Returns Type Description byte[] IV bytes | Edit this page View Source DecodeFlags(ReadOnlySpan<byte>) Decode flags Declaration protected virtual CryptoFlags DecodeFlags(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description CryptoFlags Flags | Edit this page View Source Decrypt(Stream, Stream, byte[], CryptoOptions?) Decrypt Declaration public virtual Stream Decrypt(Stream cipherData, Stream rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source Decrypt(Stream, Stream, CryptoOptions) Decrypt Declaration public Stream Decrypt(Stream cipherData, Stream rawData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public Stream Decrypt(Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) Decrypt Declaration public virtual Task DecryptAsync(Stream cipherData, Stream rawData, byte[] pwd, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) Decrypt Declaration public Task DecryptAsync(Stream cipherData, Stream rawData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Decrypt Declaration public Task DecryptAsync(Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source EncodeFlags(CryptoFlags, Span<byte>) Encode flags Declaration protected virtual void EncodeFlags(CryptoFlags flags, Span<byte> buffer) Parameters Type Name Description CryptoFlags flags Flags Span<byte> buffer Buffer | Edit this page View Source Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) Encrypt Declaration public virtual Stream Encrypt(Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null, MacStreams? macStream = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options MacStreams macStream MAC stream Returns Type Description Stream Cipher data | Edit this page View Source Encrypt(Stream, Stream, CryptoOptions) Encrypt Declaration public Stream Encrypt(Stream rawData, Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options Returns Type Description Stream Cipher data | Edit this page View Source Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public Stream Encrypt(Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description Stream Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) Encrypt Declaration public virtual Task EncryptAsync(Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null, MacStreams? macStream = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options MacStreams macStream MAC stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) Encrypt Declaration public Task EncryptAsync(Stream rawData, Stream cipherData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Encrypt Declaration public Task EncryptAsync(Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration public override bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Overrides CryptoAlgorithmBase.EnsureAllowed(in bool) Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration public virtual CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public abstract byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) | Edit this page View Source GetDecryptionStream(Stream, Stream, CryptoOptions) Get a decryption stream Declaration public virtual DecryptionStreams GetDecryptionStream(Stream cipherData, Stream rawData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options Returns Type Description DecryptionStreams Decryption stream and transform | Edit this page View Source GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) Get a decryption stream Declaration public virtual Task<DecryptionStreams> GetDecryptionStreamAsync(Stream cipherData, Stream rawData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<DecryptionStreams> Decryption stream and transform | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected abstract ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected abstract Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform | Edit this page View Source GetEncryptionStream(Stream, Stream, MacStreams?, CryptoOptions) Get an encryption stream Declaration public virtual EncryptionStreams GetEncryptionStream(Stream rawData, Stream cipherData, MacStreams? macStream, CryptoOptions options) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data MacStreams macStream MAC stream CryptoOptions options Options Returns Type Description EncryptionStreams Encryption stream, transform and MAC | Edit this page View Source GetEncryptionStreamAsync(Stream, Stream, MacStreams?, CryptoOptions, CancellationToken) Get an encryption stream Declaration public virtual Task<EncryptionStreams> GetEncryptionStreamAsync(Stream rawData, Stream cipherData, MacStreams? macStream, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data MacStreams macStream MAC stream CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<EncryptionStreams> Encryption stream, transform and MAC | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected abstract ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected abstract Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform | Edit this page View Source GetValidLengthKey(byte[], int) Get a key with a valid length Declaration protected virtual byte[] GetValidLengthKey(byte[] key, int len) Parameters Type Name Description byte[] key Key (won't be cleared) int len Required key length in bytes Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public abstract bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid | Edit this page View Source ReadFixedIvBytes(Stream, CryptoOptions) Read the fixed IV bytes Declaration protected virtual byte[] ReadFixedIvBytes(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] IV bytes | Edit this page View Source ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) Read the fixed IV bytes Declaration protected virtual Task<byte[]> ReadFixedIvBytesAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> IV bytes | Edit this page View Source ReadOptions(Stream, Stream, byte[]?, CryptoOptions?) Read the options Declaration public virtual CryptoOptions ReadOptions(Stream cipherData, Stream rawData, byte[]? pwd = null, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description CryptoOptions Red options | Edit this page View Source ReadOptionsAsync(Stream, Stream, byte[]?, CryptoOptions?, CancellationToken) Read the options Declaration public virtual Task<CryptoOptions> ReadOptionsAsync(Stream cipherData, Stream rawData, byte[]? pwd = null, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<CryptoOptions> Red options and serializer version number | Edit this page View Source ReadVariableIvBytes(Stream, CryptoOptions) Read the variable IV bytes Declaration protected virtual byte[] ReadVariableIvBytes(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] IV bytes | Edit this page View Source ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) Read the variable IV bytes Declaration protected virtual Task<byte[]> ReadVariableIvBytesAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> IV bytes | Edit this page View Source WriteOptions(Stream, Stream, byte[]?, CryptoOptions?) Write the options Declaration public virtual (CryptoOptions Options, MacStreams? MacStream) WriteOptions(Stream rawData, Stream cipherData, byte[]? pwd = null, CryptoOptions? options = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description (CryptoOptions Options, MacStreams MacStream) Written options and used MAC stream | Edit this page View Source WriteOptionsAsync(Stream, Stream, byte[]?, CryptoOptions?, CancellationToken) Write the options Declaration public virtual Task<(CryptoOptions Options, MacStreams? MacStream)> WriteOptionsAsync(Stream rawData, Stream cipherData, byte[]? pwd = null, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<(CryptoOptions Options, MacStreams MacStream)> Written options and used MAC stream Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.EncryptionExtensions.html": {
    "href": "api/wan24.Crypto.EncryptionExtensions.html",
    "title": "Class EncryptionExtensions | wan24-Crypto",
    "keywords": "Class EncryptionExtensions Encryption extensions Inheritance object EncryptionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class EncryptionExtensions Methods | Edit this page View Source Decrypt(byte[], byte[], CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this byte[] cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description byte[] cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(byte[], CryptoOptions) Decrypt Declaration public static byte[] Decrypt(this byte[] cipherData, CryptoOptions options) Parameters Type Name Description byte[] cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(byte[], IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this byte[] cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description byte[] cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Memory<byte>, byte[], CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this Memory<byte> cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Memory<byte>, CryptoOptions) Decrypt Declaration public static byte[] Decrypt(this Memory<byte> cipherData, CryptoOptions options) Parameters Type Name Description Memory<byte> cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Memory<byte>, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this Memory<byte> cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlyMemory<byte>, byte[], CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this ReadOnlyMemory<byte> cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlyMemory<byte>, CryptoOptions) Decrypt Declaration public static byte[] Decrypt(this ReadOnlyMemory<byte> cipherData, CryptoOptions options) Parameters Type Name Description ReadOnlyMemory<byte> cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlyMemory<byte>, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this ReadOnlyMemory<byte> cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlySpan<byte>, byte[], CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this ReadOnlySpan<byte> cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlySpan<byte>, CryptoOptions) Decrypt Declaration public static byte[] Decrypt(this ReadOnlySpan<byte> cipherData, CryptoOptions options) Parameters Type Name Description ReadOnlySpan<byte> cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(ReadOnlySpan<byte>, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this ReadOnlySpan<byte> cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Span<byte>, byte[], CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this Span<byte> cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Span<byte> cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Span<byte>, CryptoOptions) Decrypt Declaration public static byte[] Decrypt(this Span<byte> cipherData, CryptoOptions options) Parameters Type Name Description Span<byte> cipherData Cipher data CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Decrypt(Span<byte>, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static byte[] Decrypt(this Span<byte> cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Span<byte> cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Raw data | Edit this page View Source Encrypt(byte[], byte[], CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this byte[] rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description byte[] rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(byte[], CryptoOptions) Encrypt Declaration public static byte[] Encrypt(this byte[] rawData, CryptoOptions options) Parameters Type Name Description byte[] rawData Raw data CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(byte[], IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this byte[] rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description byte[] rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Memory<byte>, byte[], CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this Memory<byte> rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Memory<byte>, CryptoOptions) Encrypt Declaration public static byte[] Encrypt(this Memory<byte> rawData, CryptoOptions options) Parameters Type Name Description Memory<byte> rawData Raw data CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Memory<byte>, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this Memory<byte> rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlyMemory<byte>, byte[], CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this ReadOnlyMemory<byte> rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlyMemory<byte>, CryptoOptions) Encrypt Declaration public static byte[] Encrypt(this ReadOnlyMemory<byte> rawData, CryptoOptions options) Parameters Type Name Description ReadOnlyMemory<byte> rawData Raw data CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlyMemory<byte>, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this ReadOnlyMemory<byte> rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlySpan<byte>, byte[], CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this ReadOnlySpan<byte> rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlySpan<byte>, CryptoOptions) Encrypt Declaration public static byte[] Encrypt(this ReadOnlySpan<byte> rawData, CryptoOptions options) Parameters Type Name Description ReadOnlySpan<byte> rawData Raw data CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(ReadOnlySpan<byte>, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this ReadOnlySpan<byte> rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Span<byte>, byte[], CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this Span<byte> rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Span<byte> rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Span<byte>, CryptoOptions) Encrypt Declaration public static byte[] Encrypt(this Span<byte> rawData, CryptoOptions options) Parameters Type Name Description Span<byte> rawData Raw data CryptoOptions options Options Returns Type Description byte[] Cipher data | Edit this page View Source Encrypt(Span<byte>, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static byte[] Encrypt(this Span<byte> rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Span<byte> rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description byte[] Cipher data"
  },
  "api/wan24.Crypto.EncryptionHelper.html": {
    "href": "api/wan24.Crypto.EncryptionHelper.html",
    "title": "Class EncryptionHelper | wan24-Crypto",
    "keywords": "Class EncryptionHelper Encryption helper Inheritance object EncryptionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class EncryptionHelper Fields | Edit this page View Source Algorithms Registered algorithms Declaration public static readonly ConcurrentDictionary<string, EncryptionAlgorithmBase> Algorithms Field Value Type Description ConcurrentDictionary<string, EncryptionAlgorithmBase> Properties | Edit this page View Source BlockCipher Block cipher algorithms Declaration public static IEnumerable<EncryptionAlgorithmBase> BlockCipher { get; } Property Value Type Description IEnumerable<EncryptionAlgorithmBase> | Edit this page View Source DefaultAlgorithm Default encryption algorithm Declaration public static EncryptionAlgorithmBase DefaultAlgorithm { get; set; } Property Value Type Description EncryptionAlgorithmBase | Edit this page View Source DeniedAlgorithms Denied algorithms Declaration public static IEnumerable<EncryptionAlgorithmBase> DeniedAlgorithms { get; } Property Value Type Description IEnumerable<EncryptionAlgorithmBase> | Edit this page View Source EnableJsonWrapper Enable the JSON wrapper for payload objects which don't implement wan24.StreamSerializerExtensions.IStreamSerializer? Declaration public static bool EnableJsonWrapper { get; set; } Property Value Type Description bool | Edit this page View Source PostQuantum Post-quantum algorithms Declaration public static IEnumerable<EncryptionAlgorithmBase> PostQuantum { get; } Property Value Type Description IEnumerable<EncryptionAlgorithmBase> | Edit this page View Source PreQuantum Pre-quantum algorithms Declaration public static IEnumerable<EncryptionAlgorithmBase> PreQuantum { get; } Property Value Type Description IEnumerable<EncryptionAlgorithmBase> | Edit this page View Source StreamCipher Stream cipher algorithms Declaration public static IEnumerable<EncryptionAlgorithmBase> StreamCipher { get; } Property Value Type Description IEnumerable<EncryptionAlgorithmBase> | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object | Edit this page View Source UseHybridOptions Use the hybrid options? Declaration public static bool UseHybridOptions { get; set; } Property Value Type Description bool Methods | Edit this page View Source Decrypt(Stream, Stream, byte[], CryptoOptions?) Decrypt Declaration public static Stream Decrypt(this Stream cipherData, Stream rawData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source Decrypt(Stream, Stream, CryptoOptions) Decrypt Declaration public static Stream Decrypt(this Stream cipherData, Stream rawData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Decrypt Declaration public static Stream Decrypt(this Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description Stream Raw data | Edit this page View Source DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) Decrypt Declaration public static Task DecryptAsync(this Stream cipherData, Stream rawData, byte[] pwd, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) Decrypt Declaration public static Task DecryptAsync(this Stream cipherData, Stream rawData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Decrypt Declaration public static Task DecryptAsync(this Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Raw data | Edit this page View Source Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) Encrypt Declaration public static Stream Encrypt(this Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null, MacStreams? macStream = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options MacStreams macStream MAC stream Returns Type Description Stream Cipher data | Edit this page View Source Encrypt(Stream, Stream, CryptoOptions) Encrypt Declaration public static Stream Encrypt(this Stream rawData, Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options Returns Type Description Stream Cipher data | Edit this page View Source Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Encrypt Declaration public static Stream Encrypt(this Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description Stream Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) Encrypt Declaration public static Task EncryptAsync(this Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null, MacStreams? macStream = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options MacStreams macStream MAC stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) Encrypt Declaration public static Task EncryptAsync(this Stream rawData, Stream cipherData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Encrypt Declaration public static Task EncryptAsync(this Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task Cipher data | Edit this page View Source GetAlgorithm(int) Get an algorithm Declaration public static EncryptionAlgorithmBase GetAlgorithm(int value) Parameters Type Name Description int value Algorithm value Returns Type Description EncryptionAlgorithmBase Algorithm | Edit this page View Source GetAlgorithm(string) Get an algorithm Declaration public static EncryptionAlgorithmBase GetAlgorithm(string name) Parameters Type Name Description string name Algorithm name Returns Type Description EncryptionAlgorithmBase Algorithm | Edit this page View Source GetDecryptionStream(Stream, Stream, CryptoOptions) Get a decryption stream Declaration public static DecryptionStreams GetDecryptionStream(Stream cipherData, Stream rawData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options Returns Type Description DecryptionStreams Decryption stream and transform | Edit this page View Source GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) Get a decryption stream Declaration public static Task<DecryptionStreams> GetDecryptionStreamAsync(Stream cipherData, Stream rawData, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<DecryptionStreams> Decryption stream and transform | Edit this page View Source GetDefaultOptions(CryptoOptions?) Get the default options used by the encryption helper Declaration public static CryptoOptions GetDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetEncryptionStream(Stream, Stream, MacStreams?, CryptoOptions) Get an encryption stream Declaration public static EncryptionStreams GetEncryptionStream(Stream rawData, Stream cipherData, MacStreams? macStream, CryptoOptions options) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data MacStreams macStream MAC stream CryptoOptions options Options Returns Type Description EncryptionStreams Encryption stream, transform and MAC | Edit this page View Source GetEncryptionStreamAsync(Stream, Stream, MacStreams?, CryptoOptions, CancellationToken) Get an encryption stream Declaration public static Task<EncryptionStreams> GetEncryptionStreamAsync(Stream rawData, Stream cipherData, MacStreams? macStream, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data MacStreams macStream MAC stream CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<EncryptionStreams> Encryption stream, transform and MAC | Edit this page View Source ReadOptions(Stream, Stream, byte[]?, CryptoOptions?) Read the options Declaration public static CryptoOptions ReadOptions(Stream cipherData, Stream rawData, byte[]? pwd = null, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options Returns Type Description CryptoOptions Red options | Edit this page View Source ReadOptions(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Read the options Declaration public static CryptoOptions ReadOptions(Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description CryptoOptions Red options | Edit this page View Source ReadOptionsAsync(Stream, Stream, byte[]?, CryptoOptions?, CancellationToken) Read the options Declaration public static Task<CryptoOptions> ReadOptionsAsync(Stream cipherData, Stream rawData, byte[]? pwd = null, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<CryptoOptions> Red options | Edit this page View Source ReadOptionsAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Read the options Declaration public static Task<CryptoOptions> ReadOptionsAsync(Stream cipherData, Stream rawData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream cipherData Cipher data Stream rawData Raw data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<CryptoOptions> Red options | Edit this page View Source ValidateStreams(Stream, Stream, bool, CryptoOptions?, bool) Validate streams Declaration public static bool ValidateStreams(Stream rawData, Stream cipherData, bool forEncryption, CryptoOptions? options = null, bool throwOnError = true) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data bool forEncryption For encryption? CryptoOptions options Options bool throwOnError Throw an exception on error? Returns Type Description bool Valid? | Edit this page View Source WriteOptions(Stream, Stream, byte[], CryptoOptions?) Write the options Declaration public static (CryptoOptions Options, MacStreams? MacStream) WriteOptions(Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options Returns Type Description (CryptoOptions Options, MacStreams MacStream) Written options and used MAC stream | Edit this page View Source WriteOptions(Stream, Stream, CryptoOptions) Write the options Declaration public static (CryptoOptions Options, MacStreams? MacStream) WriteOptions(Stream rawData, Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options Returns Type Description (CryptoOptions Options, MacStreams MacStream) Written options and used MAC stream | Edit this page View Source WriteOptions(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) Write the options Declaration public static (CryptoOptions Options, MacStreams? MacStream) WriteOptions(Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options Returns Type Description (CryptoOptions Options, MacStreams MacStream) Written options and used MAC stream | Edit this page View Source WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) Write the options Declaration public static Task<(CryptoOptions Options, MacStreams? MacStream)> WriteOptionsAsync(Stream rawData, Stream cipherData, byte[] pwd, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<(CryptoOptions Options, MacStreams MacStream)> Written options and used MAC stream | Edit this page View Source WriteOptionsAsync(Stream, Stream, CryptoOptions?, CancellationToken) Write the options Declaration public static Task<(CryptoOptions Options, MacStreams? MacStream)> WriteOptionsAsync(Stream rawData, Stream cipherData, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<(CryptoOptions Options, MacStreams MacStream)> Written options and used MAC stream | Edit this page View Source WriteOptionsAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) Write the options Declaration public static Task<(CryptoOptions Options, MacStreams? MacStream)> WriteOptionsAsync(Stream rawData, Stream cipherData, IAsymmetricPrivateKey key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream rawData Raw data Stream cipherData Cipher data IAsymmetricPrivateKey key Private key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<(CryptoOptions Options, MacStreams MacStream)> Written options and used MAC stream"
  },
  "api/wan24.Crypto.EncryptionStreams.html": {
    "href": "api/wan24.Crypto.EncryptionStreams.html",
    "title": "Class EncryptionStreams | wan24-Crypto",
    "keywords": "Class EncryptionStreams Encryption streams Inheritance object DisposableRecordBase EncryptionStreams Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<EncryptionStreams> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record EncryptionStreams : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<EncryptionStreams> Constructors | Edit this page View Source EncryptionStreams(Stream, ICryptoTransform, MacStreams?) Constructor Declaration public EncryptionStreams(Stream cryptoStream, ICryptoTransform transform, MacStreams? mac) Parameters Type Name Description Stream cryptoStream Crypto stream (written data will be written encrypted to the MAC or the target cipher stream (while the MAC stream writes to the target cipher stream)) ICryptoTransform transform Crypto transform MacStreams mac MAC streams Properties | Edit this page View Source CryptoStream Crypto stream (written data will be written encrypted to the MAC or the target cipher stream (while the MAC stream writes to the target cipher stream)) Declaration public Stream CryptoStream { get; } Property Value Type Description Stream | Edit this page View Source Mac MAC streams Declaration public MacStreams? Mac { get; } Property Value Type Description MacStreams | Edit this page View Source Transform Crypto transform Declaration public ICryptoTransform Transform { get; } Property Value Type Description ICryptoTransform Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.EncryptionVoidAlgorithm.html": {
    "href": "api/wan24.Crypto.EncryptionVoidAlgorithm.html",
    "title": "Class EncryptionVoidAlgorithm | wan24-Crypto",
    "keywords": "Class EncryptionVoidAlgorithm Symmetric void encryption algorithm (used when there's no algorithm available) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase EncryptionVoidAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<EncryptionVoidAlgorithm> Inherited Members EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record EncryptionVoidAlgorithm : EncryptionAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<EncryptionVoidAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"VOID\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = -1 Field Value Type Description int Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.BlockSize | Edit this page View Source Instance Instance Declaration public static EncryptionVoidAlgorithm Instance { get; } Property Value Type Description EncryptionVoidAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration public override bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Overrides EncryptionAlgorithmBase.EnsureAllowed(in bool) Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.EntropyHelper.Algorithms.html": {
    "href": "api/wan24.Crypto.EntropyHelper.Algorithms.html",
    "title": "Enum EntropyHelper.Algorithms | wan24-Crypto",
    "keywords": "Enum EntropyHelper.Algorithms Algorithms Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum EntropyHelper.Algorithms Fields Name Description ALL All algorithms Custom Custom None None ShannonBit Shannon bit ShannonByte Shannon byte"
  },
  "api/wan24.Crypto.EntropyHelper.EntropyAlgorithm_Delegate.html": {
    "href": "api/wan24.Crypto.EntropyHelper.EntropyAlgorithm_Delegate.html",
    "title": "Delegate EntropyHelper.EntropyAlgorithm_Delegate | wan24-Crypto",
    "keywords": "Delegate EntropyHelper.EntropyAlgorithm_Delegate Delegate for an entropy algorithm Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate double EntropyHelper.EntropyAlgorithm_Delegate(ReadOnlySpan<byte> data, int algo, bool throwOnInvalidAlgorithm = false) Parameters Type Name Description ReadOnlySpan<byte> data Data int algo Custom algorithm bits (excluding Custom) bool throwOnInvalidAlgorithm Throw an exception on an invalid value of algo? Returns Type Description double Entropy (MinValue, if str was empty; NaN, if algo was invalid)"
  },
  "api/wan24.Crypto.EntropyHelper.html": {
    "href": "api/wan24.Crypto.EntropyHelper.html",
    "title": "Class EntropyHelper | wan24-Crypto",
    "keywords": "Class EntropyHelper Entropy helper Inheritance object EntropyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class EntropyHelper Properties | Edit this page View Source CustomAlgorithm Custom entropy algorithm Declaration public static EntropyHelper.EntropyAlgorithm_Delegate? CustomAlgorithm { get; set; } Property Value Type Description EntropyHelper.EntropyAlgorithm_Delegate | Edit this page View Source DefaultAlgorithm Single default algorithm Declaration [CliConfig] public static EntropyHelper.Algorithms DefaultAlgorithm { get; set; } Property Value Type Description EntropyHelper.Algorithms | Edit this page View Source DefaultAlgorithms Default algorithms Declaration [CliConfig] public static EntropyHelper.Algorithms DefaultAlgorithms { get; set; } Property Value Type Description EntropyHelper.Algorithms | Edit this page View Source MinCustomEntropy Min. required custom entropy (zero to disable checks) Declaration [CliConfig] public static double MinCustomEntropy { get; set; } Property Value Type Description double | Edit this page View Source MinShannonBitEntropy Min. required Shannon bit entropy (zero to disable checks) Declaration [CliConfig] public static double MinShannonBitEntropy { get; set; } Property Value Type Description double | Edit this page View Source MinShannonByteEntropy Min. required Shannon byte entropy (zero to disable checks) Declaration [CliConfig] public static double MinShannonByteEntropy { get; set; } Property Value Type Description double Methods | Edit this page View Source CalculateEntropy(in ReadOnlySpan<byte>, Algorithms?) Get the entropy using a specific algorithm Declaration public static double CalculateEntropy(in ReadOnlySpan<byte> data, EntropyHelper.Algorithms? algo = null) Parameters Type Name Description ReadOnlySpan<byte> data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if data was empty) | Edit this page View Source CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool) Check if the entropy is valid Declaration public static bool CheckEntropy(in ReadOnlySpan<byte> data, EntropyHelper.Algorithms? algos = null, in bool throwOnError = false) Parameters Type Name Description ReadOnlySpan<byte> data Data EntropyHelper.Algorithms? algos Algorithms to use bool throwOnError If to throw an exception on error Returns Type Description bool If the entropy is valid (empty data or no algorithms is valid always!) Exceptions Type Condition InvalidDataException Invalid entropy | Edit this page View Source GetEntropy(byte[], in Algorithms?) Get the entropy Declaration public static double GetEntropy(this byte[] data, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description byte[] data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source GetEntropy(Memory<byte>, in Algorithms?) Get the entropy Declaration public static double GetEntropy(this Memory<byte> data, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description Memory<byte> data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source GetEntropy(ReadOnlyMemory<byte>, in Algorithms?) Get the entropy Declaration public static double GetEntropy(this ReadOnlyMemory<byte> data, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source GetEntropy(ReadOnlySpan<byte>, in Algorithms?) Get the entropy Declaration public static double GetEntropy(this ReadOnlySpan<byte> data, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description ReadOnlySpan<byte> data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source GetEntropy(Span<byte>, in Algorithms?) Get the entropy Declaration public static double GetEntropy(this Span<byte> data, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description Span<byte> data Data EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source GetEntropy(string, in Algorithms?) Get the entropy Declaration public static double GetEntropy(this string str, in EntropyHelper.Algorithms? algo = null) Parameters Type Name Description string str String EntropyHelper.Algorithms? algo Algorithm Returns Type Description double Entropy (MinValue, if str was empty) | Edit this page View Source ShannonBitEntropy(in ReadOnlySpan<byte>) Shannon bit entropy algorithm Declaration public static double ShannonBitEntropy(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data Returns Type Description double Entropy (MinValue, if data was empty) | Edit this page View Source ShannonByteEntropy(in ReadOnlySpan<byte>) Shannon byte entropy algorithm Declaration public static double ShannonByteEntropy(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data Returns Type Description double Entropy (MinValue, if data was empty)"
  },
  "api/wan24.Crypto.EntropyMonitor.html": {
    "href": "api/wan24.Crypto.EntropyMonitor.html",
    "title": "Class EntropyMonitor | wan24-Crypto",
    "keywords": "Class EntropyMonitor Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) Inheritance object RngBase EntropyMonitor Implements IRng Inherited Members RngBase.GetBytes(in int) RngBase.GetBytesAsync(int, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class EntropyMonitor : RngBase, IRng Remarks Constructor Constructors | Edit this page View Source EntropyMonitor(in IRng) Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) Declaration public EntropyMonitor(in IRng rng) Parameters Type Name Description IRng rng Entropy monitored RNG Remarks Constructor Properties | Edit this page View Source Algorithms Entropy algorithms to use Declaration public EntropyHelper.Algorithms? Algorithms { get; init; } Property Value Type Description EntropyHelper.Algorithms? | Edit this page View Source MaxRetries Max. number of retries to get RND with the required entropy (zero for no limit) Declaration public int MaxRetries { get; init; } Property Value Type Description int | Edit this page View Source MinRndlength Min. RND length required for monitoring Declaration public int MinRndlength { get; init; } Property Value Type Description int | Edit this page View Source RNG Entropy monitored RNG Declaration public IRng RNG { get; } Property Value Type Description IRng Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides RngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides RngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.FastPakeAuthClient.html": {
    "href": "api/wan24.Crypto.FastPakeAuthClient.html",
    "title": "Class FastPakeAuthClient | wan24-Crypto",
    "keywords": "Class FastPakeAuthClient Fast PAKE authentication client (will skip KDF after initialization) Inheritance object DisposableBase FastPakeAuthClient Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class FastPakeAuthClient : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source FastPakeAuthClient(in IPakeAuthRecord, in TimeSpan?, in TimeSpan?, in CryptoOptions?, in CryptoOptions?, in string?) Constructor Declaration public FastPakeAuthClient(in IPakeAuthRecord record, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in string? name = null) Parameters Type Name Description IPakeAuthRecord record PAKE authentication record TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) CryptoOptions options PAKE options (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) string name Client name | Edit this page View Source FastPakeAuthClient(in ISymmetricKeySuite, in byte[], in byte[], in byte[], in TimeSpan?, in TimeSpan?, in CryptoOptions?, in CryptoOptions?, in string?) Constructor Declaration public FastPakeAuthClient(in ISymmetricKeySuite key, in byte[] authKey, in byte[] secret, in byte[] signatureKey, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in string? name = null) Parameters Type Name Description ISymmetricKeySuite key Key (will be disposed!) byte[] authKey Authentication key (will be cleared!) byte[] secret Secret (will be cleared!) byte[] signatureKey Signature key (will be cleared!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) CryptoOptions options PAKE options (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) string name Client name | Edit this page View Source FastPakeAuthClient(in ISymmetricKeySuite, in TimeSpan?, in TimeSpan?, in CryptoOptions?, in CryptoOptions?, in string?) Constructor Declaration public FastPakeAuthClient(in ISymmetricKeySuite key, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in string? name = null) Parameters Type Name Description ISymmetricKeySuite key Key (will be disposed!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) CryptoOptions options PAKE options (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) string name Client name | Edit this page View Source FastPakeAuthClient(in Pake, out PakeSignup, out byte[], byte[]?, in TimeSpan?, in TimeSpan?, in string?, in PayloadFactory_Delegate?) Constructor Declaration public FastPakeAuthClient(in Pake pake, out PakeSignup signup, out byte[] sessionKey, byte[]? payload = null, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in string? name = null, in Pake.PayloadFactory_Delegate? payloadFactory = null) Parameters Type Name Description Pake pake PAKE instance (will be disposed!) PakeSignup signup PAKE signup (should be disposed!) byte[] sessionKey Session key (should be cleared!) byte[] payload Payload TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) string name Client name Pake.PayloadFactory_Delegate payloadFactory Payload factory Properties | Edit this page View Source AuthCount Authentication count (including errors) Declaration public int AuthCount { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Key Key Declaration public SecureValue Key { get; } Property Value Type Description SecureValue | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Secret Secret Declaration public SecureValue Secret { get; } Property Value Type Description SecureValue | Edit this page View Source SignatureKey Signature key Declaration public SecureValue SignatureKey { get; } Property Value Type Description SecureValue | Edit this page View Source State Status information Declaration public IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source CreateAuth(byte[]?, in bool, in PayloadFactory_Delegate?) Create an authentication Declaration public (PakeAuth Auth, byte[] SessionKey) CreateAuth(byte[]? payload = null, in bool encryptPayload = false, in Pake.PayloadFactory_Delegate? payloadFactory = null) Parameters Type Name Description byte[] payload Payload (max. MaxValue length; will be cleared!) bool encryptPayload Encrypt the payload? Pake.PayloadFactory_Delegate payloadFactory Payload factory Returns Type Description (PakeAuth Auth, byte[] SessionKey) Authentication (send this to the server and don't forget to dispose!) and session key (should be cleared!) | Edit this page View Source CreateAuthAsync(byte[]?, bool, PayloadFactory_Delegate?) Create an authentication Declaration public Task<(PakeAuth Auth, byte[] SessionKey)> CreateAuthAsync(byte[]? payload = null, bool encryptPayload = false, Pake.PayloadFactory_Delegate? payloadFactory = null) Parameters Type Name Description byte[] payload Payload (max. MaxValue length; will be cleared!) bool encryptPayload Encrypt the payload? Pake.PayloadFactory_Delegate payloadFactory Payload factory Returns Type Description Task<(PakeAuth Auth, byte[] SessionKey)> Authentication (send this to the server and don't forget to dispose!) and session key (should be cleared!) | Edit this page View Source CreateAuthRecord() Create a PAKE authentication record from this instance Declaration public PakeAuthRecord CreateAuthRecord() Returns Type Description PakeAuthRecord Record (don't forget to clear!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.FastPakeAuthServer.html": {
    "href": "api/wan24.Crypto.FastPakeAuthServer.html",
    "title": "Class FastPakeAuthServer | wan24-Crypto",
    "keywords": "Class FastPakeAuthServer Fast PAKE authentication server (will skip KDF after initialization) Inheritance object DisposableBase FastPakeAuthServer Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStatusProvider IChangeToken INotifyPropertyChanged Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class FastPakeAuthServer : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source FastPakeAuthServer(in IPakeRecord, in byte[], in byte[], in byte[], in TimeSpan?, in TimeSpan?, in CryptoOptions?, in CryptoOptions?, in string?) Constructor Declaration public FastPakeAuthServer(in IPakeRecord identity, in byte[] authKey, in byte[] secret, in byte[] signatureKey, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in string? name = null) Parameters Type Name Description IPakeRecord identity Identity (will be cleared/disposed!) byte[] authKey Authentication key (will be cleared!) byte[] secret Secret (will be cleared!) byte[] signatureKey Signature key (will be cleared!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) CryptoOptions options PAKE options (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) string name Server name | Edit this page View Source FastPakeAuthServer(in Pake, in PakeAuth, out byte[], out byte[], in bool, in TimeSpan?, in TimeSpan?, in string?, in PayloadProcessor_Delegate?) Constructor Declaration public FastPakeAuthServer(in Pake pake, in PakeAuth auth, out byte[] payload, out byte[] sessionKey, in bool decryptPayload = false, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in string? name = null, in Pake.PayloadProcessor_Delegate? payloadProcessor = null) Parameters Type Name Description Pake pake PAKE instance (will be disposed!) PakeAuth auth Authentication (will be disposed!) byte[] payload Payload (should be cleared!) byte[] sessionKey Session key (should be cleared!) bool decryptPayload Decrypt the payload (if any)? TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time; default is DefaultEncryptTimeout) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example; default is DefaultRecryptTimeout) string name Server name Pake.PayloadProcessor_Delegate payloadProcessor Payload processor | Edit this page View Source FastPakeAuthServer(in PakeSignup, out PakeRecord, out byte[], out byte[], in Pake?, in TimeSpan?, in TimeSpan?, in string?, in PayloadProcessor_Delegate?) Constructor Declaration public FastPakeAuthServer(in PakeSignup signup, out PakeRecord identity, out byte[] payload, out byte[] sessionKey, in Pake? pake = null, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in string? name = null, in Pake.PayloadProcessor_Delegate? payloadProcessor = null) Parameters Type Name Description PakeSignup signup Signup (will be disposed!) PakeRecord identity Identity (should be cleared!) byte[] payload Payload (should be cleared!) byte[] sessionKey Session key (should be cleared!) Pake pake PAKE instance (will be disposed!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example) string name Server name Pake.PayloadProcessor_Delegate payloadProcessor Payload processor Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source AuthCount Authentication count (including errors) Declaration public int AuthCount { get; } Property Value Type Description int | Edit this page View Source AuthErrorCount Authentication error count Declaration public int AuthErrorCount { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public bool HasChanged { get; } Property Value Type Description bool | Edit this page View Source Key Key Declaration public SecureValue Key { get; } Property Value Type Description SecureValue | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Pake PAKE instance Declaration public Pake Pake { get; } Property Value Type Description Pake | Edit this page View Source Secret Secret Declaration public SecureValue Secret { get; } Property Value Type Description SecureValue | Edit this page View Source SignatureKey Signature key Declaration public SecureValue SignatureKey { get; } Property Value Type Description SecureValue | Edit this page View Source State Status information Declaration public IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Sync External thread synchronization Declaration public SemaphoreSync Sync { get; } Property Value Type Description SemaphoreSync | Edit this page View Source UseSync Use the external thread synchronization during the HandleAuth* methods to synchronize any identity access? Declaration public bool UseSync { get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateAuthRecord() Create a PAKE authentication record from this instance Declaration public PakeAuthRecord CreateAuthRecord() Returns Type Description PakeAuthRecord Record (don't forget to clear!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source HandleAuth(in IPakeRequest, in bool, in PayloadProcessor_Delegate?) Handle an authentication Declaration public (byte[] Payload, byte[] SessionKey) HandleAuth(in IPakeRequest auth, in bool decryptPayload = false, in Pake.PayloadProcessor_Delegate? payloadProcessor = null) Parameters Type Name Description IPakeRequest auth Authentication (will be disposed!) bool decryptPayload Decrypt the payload, if any? (for this the identity must be available already when calling this method!) Pake.PayloadProcessor_Delegate payloadProcessor Payload processor Returns Type Description (byte[] Key, byte[] KeyExchangeData) Payload and session key (should be cleared!) Exceptions Type Condition InvalidDataException Invalid authentication record | Edit this page View Source HandleAuthAsync(IPakeRequest, bool, PayloadProcessor_Delegate?, CancellationToken) Handle an authentication Declaration public Task<(byte[] Payload, byte[] SessionKey)> HandleAuthAsync(IPakeRequest auth, bool decryptPayload = false, Pake.PayloadProcessor_Delegate? payloadProcessor = null, CancellationToken cancellationToken = default) Parameters Type Name Description IPakeRequest auth Authentication (will be disposed!) bool decryptPayload Decrypt the payload, if any? (for this the identity must be available already when calling this method!) Pake.PayloadProcessor_Delegate payloadProcessor Payload processor CancellationToken cancellationToken Cancellation token Returns Type Description Task<(byte[] Payload, byte[] SessionKey)> Payload and session key (should be cleared!) Exceptions Type Condition InvalidDataException Invalid authentication record | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public IDisposable RegisterChangeCallback(Action<object?> callback, object? state) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.FastPakeAuthServerTable.html": {
    "href": "api/wan24.Crypto.FastPakeAuthServerTable.html",
    "title": "Class FastPakeAuthServerTable | wan24-Crypto",
    "keywords": "Class FastPakeAuthServerTable Fast PAKE server table Inheritance object FastPakeAuthServerTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class FastPakeAuthServerTable Fields | Edit this page View Source Servers Servers (key is the GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, FastPakeAuthServer> Servers Field Value Type Description ConcurrentChangeTokenDictionary<string, FastPakeAuthServer>"
  },
  "api/wan24.Crypto.ForcePostQuantumEventArgs.html": {
    "href": "api/wan24.Crypto.ForcePostQuantumEventArgs.html",
    "title": "Class ForcePostQuantumEventArgs | wan24-Crypto",
    "keywords": "Class ForcePostQuantumEventArgs Event arguments for the OnForcePostQuantum event Inheritance object EventArgs ForcePostQuantumEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class ForcePostQuantumEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source ForcePostQuantumEventArgs(bool, bool) Event arguments for the OnForcePostQuantum event Declaration public ForcePostQuantumEventArgs(bool firstCall, bool strict) Parameters Type Name Description bool firstCall Is the first call? bool strict Strict post quantum-safety? Remarks Constructor Properties | Edit this page View Source FirstCall Is the first call? Declaration public bool FirstCall { get; } Property Value Type Description bool | Edit this page View Source Strict Strict post quantum-safety? Declaration public bool Strict { get; } Property Value Type Description bool"
  },
  "api/wan24.Crypto.HashAlgorithmBase.html": {
    "href": "api/wan24.Crypto.HashAlgorithmBase.html",
    "title": "Class HashAlgorithmBase | wan24-Crypto",
    "keywords": "Class HashAlgorithmBase Base class for a hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashMd5Algorithm HashSha1Algorithm HashSha256Algorithm HashSha384Algorithm HashSha3_256Algorithm HashSha3_384Algorithm HashSha3_512Algorithm HashSha512Algorithm HashShake128Algorithm HashShake256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> Inherited Members CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record HashAlgorithmBase : CryptoAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase> Constructors | Edit this page View Source HashAlgorithmBase(string, int) Constructor Declaration protected HashAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Fields | Edit this page View Source _DefaultOptions Default options Declaration protected readonly CryptoOptions _DefaultOptions Field Value Type Description CryptoOptions Properties | Edit this page View Source DefaultOptions Default options Declaration public CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source HashLength Hash length in bytes Declaration public abstract int HashLength { get; } Property Value Type Description int | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides CryptoAlgorithmBase.State Methods | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration public virtual CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetHashAlgorithm(CryptoOptions?) Get the hash algorithm Declaration public virtual HashAlgorithm GetHashAlgorithm(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected abstract HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm | Edit this page View Source GetHashStream(Stream?, bool, CryptoOptions?) Get a hash stream Declaration public virtual HashStreams GetHashStream(Stream? target = null, bool writable = true, CryptoOptions? options = null) Parameters Type Name Description Stream target Target stream bool writable Writable? CryptoOptions options Options Returns Type Description HashStreams Hash streams | Edit this page View Source Hash(byte[], CryptoOptions?) Create a hash Declaration public byte[] Hash(byte[] data, CryptoOptions? options = null) Parameters Type Name Description byte[] data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(Stream, CryptoOptions?) Create a hash Declaration public virtual byte[] Hash(Stream data, CryptoOptions? options = null) Parameters Type Name Description Stream data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions?) Create a hash Declaration public virtual Span<byte> Hash(ReadOnlySpan<byte> data, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> Hash | Edit this page View Source Hash(ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public virtual byte[] Hash(ReadOnlySpan<byte> data, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashAsync(Stream, CryptoOptions?, CancellationToken) Create a hash Declaration public virtual Task<byte[]> HashAsync(Stream data, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Hash Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashExtensions.html": {
    "href": "api/wan24.Crypto.HashExtensions.html",
    "title": "Class HashExtensions | wan24-Crypto",
    "keywords": "Class HashExtensions Hash extensions Inheritance object HashExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class HashExtensions Methods | Edit this page View Source Hash(Memory<byte>, Span<byte>, CryptoOptions?) Create a hash Declaration public static Span<byte> Hash(this Memory<byte> data, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> data Data Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> Hash | Edit this page View Source Hash(Memory<byte>, CryptoOptions?) Create a hash Declaration public static byte[] Hash(this Memory<byte> data, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(ReadOnlyMemory<byte>, Span<byte>, CryptoOptions?) Create a hash Declaration public static Span<byte> Hash(this ReadOnlyMemory<byte> data, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> Hash | Edit this page View Source Hash(ReadOnlyMemory<byte>, CryptoOptions?) Create a hash Declaration public static byte[] Hash(this ReadOnlyMemory<byte> data, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(Span<byte>, Span<byte>, CryptoOptions?) Create a hash Declaration public static Span<byte> Hash(this Span<byte> data, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description Span<byte> data Data Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> Hash | Edit this page View Source Hash(Span<byte>, CryptoOptions?) Create a hash Declaration public static byte[] Hash(this Span<byte> data, CryptoOptions? options = null) Parameters Type Name Description Span<byte> data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashSalted(Memory<byte>, ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public static byte[] HashSalted(this Memory<byte> data, ReadOnlySpan<byte> salt, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> data Data ReadOnlySpan<byte> salt Salt CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashSalted(ReadOnlyMemory<byte>, ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public static byte[] HashSalted(this ReadOnlyMemory<byte> data, ReadOnlySpan<byte> salt, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data ReadOnlySpan<byte> salt Salt CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashSalted(ReadOnlySpan<byte>, ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public static byte[] HashSalted(this ReadOnlySpan<byte> data, ReadOnlySpan<byte> salt, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data ReadOnlySpan<byte> salt Salt CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashSalted(Span<byte>, ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public static byte[] HashSalted(this Span<byte> data, ReadOnlySpan<byte> salt, CryptoOptions? options = null) Parameters Type Name Description Span<byte> data Data ReadOnlySpan<byte> salt Salt CryptoOptions options Options Returns Type Description byte[] Hash"
  },
  "api/wan24.Crypto.HashHelper.html": {
    "href": "api/wan24.Crypto.HashHelper.html",
    "title": "Class HashHelper | wan24-Crypto",
    "keywords": "Class HashHelper Hash helper Inheritance object HashHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class HashHelper Fields | Edit this page View Source Algorithms Registered hash algorithms Declaration public static readonly ConcurrentDictionary<string, HashAlgorithmBase> Algorithms Field Value Type Description ConcurrentDictionary<string, HashAlgorithmBase> Properties | Edit this page View Source DefaultAlgorithm Default hash algorithm Declaration public static HashAlgorithmBase DefaultAlgorithm { get; set; } Property Value Type Description HashAlgorithmBase | Edit this page View Source PostQuantum Post-quantum algorithms Declaration public static IEnumerable<HashAlgorithmBase> PostQuantum { get; } Property Value Type Description IEnumerable<HashAlgorithmBase> | Edit this page View Source PreQuantum Pre-quantum algorithms Declaration public static IEnumerable<HashAlgorithmBase> PreQuantum { get; } Property Value Type Description IEnumerable<HashAlgorithmBase> | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source GetAlgorithm(int) Get an algorithm Declaration public static HashAlgorithmBase GetAlgorithm(int value) Parameters Type Name Description int value Algorithm value Returns Type Description HashAlgorithmBase Algorithm | Edit this page View Source GetAlgorithm(string) Get an algorithm Declaration public static HashAlgorithmBase GetAlgorithm(string name) Parameters Type Name Description string name Algorithm name Returns Type Description HashAlgorithmBase Algorithm | Edit this page View Source GetAlgorithmName(int, params string[]) Get the matching hash algorithm for a digest length Declaration public static string GetAlgorithmName(int len, params string[] allowedAlgos) Parameters Type Name Description int len Digest length in byte string[] allowedAlgos Allowed hash algorithm names Returns Type Description string Hash algorithm name | Edit this page View Source GetDefaultOptions(CryptoOptions?) Get the default options used by the hash helper Declaration public static CryptoOptions GetDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetHashStream(Stream?, bool, CryptoOptions?) Get a hash stream Declaration public static HashStreams GetHashStream(Stream? target = null, bool writable = true, CryptoOptions? options = null) Parameters Type Name Description Stream target Target stream bool writable Writable? CryptoOptions options Options Returns Type Description HashStreams Hash streams | Edit this page View Source Hash(byte[], CryptoOptions?) Create a hash Declaration public static byte[] Hash(this byte[] data, CryptoOptions? options = null) Parameters Type Name Description byte[] data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(Stream, CryptoOptions?) Create a hash Declaration public static byte[] Hash(this Stream data, CryptoOptions? options = null) Parameters Type Name Description Stream data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions?) Create a hash Declaration public static Span<byte> Hash(this ReadOnlySpan<byte> data, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> Hash | Edit this page View Source Hash(ReadOnlySpan<byte>, CryptoOptions?) Create a hash Declaration public static byte[] Hash(this ReadOnlySpan<byte> data, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data CryptoOptions options Options Returns Type Description byte[] Hash | Edit this page View Source HashAsync(Stream, CryptoOptions?, CancellationToken) Create a hash Declaration public static Task<byte[]> HashAsync(this Stream data, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Hash | Edit this page View Source TryGetAlgorithmName(int, out string?, params string[]) Get the matching hash algorithm for a digest length Declaration public static bool TryGetAlgorithmName(int len, out string? algo, params string[] allowedAlgos) Parameters Type Name Description int len Digest length in byte string algo Hash algorithm name string[] allowedAlgos Allowed hash algorithm names Returns Type Description bool If succeed"
  },
  "api/wan24.Crypto.HashMd5Algorithm.html": {
    "href": "api/wan24.Crypto.HashMd5Algorithm.html",
    "title": "Class HashMd5Algorithm | wan24-Crypto",
    "keywords": "Class HashMd5Algorithm MD5 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashMd5Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashMd5Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashMd5Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashMd5Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"MD5\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"MD5\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 16 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashMd5Algorithm Instance { get; } Property Value Type Description HashMd5Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha1Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha1Algorithm.html",
    "title": "Class HashSha1Algorithm | wan24-Crypto",
    "keywords": "Class HashSha1Algorithm SHA1 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha1Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha1Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha1Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha1Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA1\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA1\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 20 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha1Algorithm Instance { get; } Property Value Type Description HashSha1Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha256Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha256Algorithm.html",
    "title": "Class HashSha256Algorithm | wan24-Crypto",
    "keywords": "Class HashSha256Algorithm SHA256 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha256Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha256Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 2 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA256\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha256Algorithm Instance { get; } Property Value Type Description HashSha256Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha384Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha384Algorithm.html",
    "title": "Class HashSha384Algorithm | wan24-Crypto",
    "keywords": "Class HashSha384Algorithm SHA384 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha384Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha384Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 3 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA384\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha384Algorithm Instance { get; } Property Value Type Description HashSha384Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha3_256Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha3_256Algorithm.html",
    "title": "Class HashSha3_256Algorithm | wan24-Crypto",
    "keywords": "Class HashSha3_256Algorithm SHA3-256 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha3_256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha3_256Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha3_256Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha3_256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-256\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha3_256Algorithm Instance { get; } Property Value Type Description HashSha3_256Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha3_384Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha3_384Algorithm.html",
    "title": "Class HashSha3_384Algorithm | wan24-Crypto",
    "keywords": "Class HashSha3_384Algorithm SHA3-384 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha3_384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha3_384Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha3_384Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha3_384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-384\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha3_384Algorithm Instance { get; } Property Value Type Description HashSha3_384Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha3_512Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha3_512Algorithm.html",
    "title": "Class HashSha3_512Algorithm | wan24-Crypto",
    "keywords": "Class HashSha3_512Algorithm SHA3-512 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha3_512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha3_512Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha3_512Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha3_512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 7 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-512\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha3_512Algorithm Instance { get; } Property Value Type Description HashSha3_512Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashSha512Algorithm.html": {
    "href": "api/wan24.Crypto.HashSha512Algorithm.html",
    "title": "Class HashSha512Algorithm | wan24-Crypto",
    "keywords": "Class HashSha512Algorithm SHA512 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashSha512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashSha512Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashSha512Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashSha512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 4 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA512\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashSha512Algorithm Instance { get; } Property Value Type Description HashSha512Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashShake128Algorithm.html": {
    "href": "api/wan24.Crypto.HashShake128Algorithm.html",
    "title": "Class HashShake128Algorithm | wan24-Crypto",
    "keywords": "Class HashShake128Algorithm SHAKE128 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashShake128Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashShake128Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashShake128Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashShake128Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHAKE128\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 8 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Shake128\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashShake128Algorithm Instance { get; } Property Value Type Description HashShake128Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashShake256Algorithm.html": {
    "href": "api/wan24.Crypto.HashShake256Algorithm.html",
    "title": "Class HashShake256Algorithm | wan24-Crypto",
    "keywords": "Class HashShake256Algorithm SHAKE256 hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase HashShake256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<HashShake256Algorithm> Inherited Members HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashShake256Algorithm : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<HashShake256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHAKE256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 9 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Shake256\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides HashAlgorithmBase.HashLength | Edit this page View Source Instance Instance Declaration public static HashShake256Algorithm Instance { get; } Property Value Type Description HashShake256Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HashStreams.html": {
    "href": "api/wan24.Crypto.HashStreams.html",
    "title": "Class HashStreams | wan24-Crypto",
    "keywords": "Class HashStreams Hash streams Inheritance object DisposableRecordBase HashStreams Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<HashStreams> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record HashStreams : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<HashStreams> Constructors | Edit this page View Source HashStreams(in CryptoStream, in HashAlgorithm) Constructor Declaration public HashStreams(in CryptoStream stream, in HashAlgorithm transform) Parameters Type Name Description CryptoStream stream Stream HashAlgorithm transform Transform Properties | Edit this page View Source Hash Hash Declaration public byte[] Hash { get; } Property Value Type Description byte[] | Edit this page View Source Stream Stream Declaration public CryptoStream Stream { get; } Property Value Type Description CryptoStream | Edit this page View Source Transform Transform Declaration public HashAlgorithm Transform { get; } Property Value Type Description HashAlgorithm Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source FinalizeHash(in bool) Finalize the hash Declaration public void FinalizeHash(in bool transformFinal = false) Parameters Type Name Description bool transformFinal Transform the final block? | Edit this page View Source FinalizeHashAsync(bool) Finalize the hash Declaration public Task FinalizeHashAsync(bool transformFinal = false) Parameters Type Name Description bool transformFinal Transform the final block? Returns Type Description Task Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.HavegeRng.html": {
    "href": "api/wan24.Crypto.HavegeRng.html",
    "title": "Class HavegeRng | wan24-Crypto",
    "keywords": "Class HavegeRng Havege RNG Inheritance object DisposableBase DisposableRngBase HavegeRng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class HavegeRng : DisposableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IRng Remarks Constructor Constructors | Edit this page View Source HavegeRng(in int) Havege RNG Declaration public HavegeRng(in int capacity) Parameters Type Name Description int capacity Random data stream pool capacity Remarks Constructor Fields | Edit this page View Source HAVEGE Havege RNG command Declaration public const string HAVEGE = \"/usr/sbin/haveged\" Field Value Type Description string Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.HybridAlgorithmHelper.html": {
    "href": "api/wan24.Crypto.HybridAlgorithmHelper.html",
    "title": "Class HybridAlgorithmHelper | wan24-Crypto",
    "keywords": "Class HybridAlgorithmHelper Hybrid algorithm helper Inheritance object HybridAlgorithmHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class HybridAlgorithmHelper Properties | Edit this page View Source KdfAlgorithm KDF algorithm Declaration public static KdfAlgorithmBase? KdfAlgorithm { get; set; } Property Value Type Description KdfAlgorithmBase | Edit this page View Source KeyExchangeAlgorithm Key exchange algorithm Declaration public static IAsymmetricAlgorithm? KeyExchangeAlgorithm { get; set; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source MacAlgorithm MAC algorithm Declaration public static MacAlgorithmBase? MacAlgorithm { get; set; } Property Value Type Description MacAlgorithmBase | Edit this page View Source SignatureAlgorithm Signature algorithm Declaration public static IAsymmetricAlgorithm? SignatureAlgorithm { get; set; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source ComputeMac(CryptoOptions) Compute a hybrid MAC (will be set to Mac) Declaration public static void ComputeMac(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options | Edit this page View Source DeriveKey(KeyExchangeDataContainer, CryptoOptions) Derive a hybrid key (will be set to Password) Declaration public static void DeriveKey(KeyExchangeDataContainer keyExchangeData, CryptoOptions options) Parameters Type Name Description KeyExchangeDataContainer keyExchangeData Key exchange data CryptoOptions options Options | Edit this page View Source GetEncryptionOptions(CryptoOptions?) Get hybrid encryption options Declaration public static CryptoOptions GetEncryptionOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Hybrid encryption options | Edit this page View Source GetKeyExchangeData(KeyExchangeDataContainer, CryptoOptions) Get hybrid key exchange data (password will be set to Password) Declaration public static void GetKeyExchangeData(KeyExchangeDataContainer keyExchangeData, CryptoOptions options) Parameters Type Name Description KeyExchangeDataContainer keyExchangeData Key exchange data CryptoOptions options Options | Edit this page View Source GetKeyExchangeOptions(CryptoOptions?) Get hybrid key exchange options Declaration public static CryptoOptions GetKeyExchangeOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Hybrid key exchange options | Edit this page View Source GetSignatureOptions(CryptoOptions?) Get hybrid signature options Declaration public static CryptoOptions GetSignatureOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Hybrid signature options | Edit this page View Source Sign(SignatureContainer, CryptoOptions) Sign hybrid (will set the counter signature to CounterSignature) Declaration public static void Sign(SignatureContainer signature, CryptoOptions options) Parameters Type Name Description SignatureContainer signature Signature CryptoOptions options Options | Edit this page View Source StretchPassword(CryptoOptions) Stretch a password hybrid (will be set to Password) Declaration public static void StretchPassword(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options | Edit this page View Source ValidateCounterSignature(SignatureContainer) Validate a counter signature Declaration public static bool ValidateCounterSignature(SignatureContainer signature) Parameters Type Name Description SignatureContainer signature Signature Returns Type Description bool If the counter signature is valid"
  },
  "api/wan24.Crypto.IAsymmetricAlgorithm.html": {
    "href": "api/wan24.Crypto.IAsymmetricAlgorithm.html",
    "title": "Interface IAsymmetricAlgorithm | wan24-Crypto",
    "keywords": "Interface IAsymmetricAlgorithm Interface for an asymmetric algorithm Inherited Members ICryptoAlgorithm.Name ICryptoAlgorithm.Value ICryptoAlgorithm.IsPostQuantum ICryptoAlgorithm.DisplayName ICryptoAlgorithm.UsesTpm ICryptoAlgorithm.IsSupported ICryptoAlgorithm.EnsureAllowed(in bool) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IAsymmetricAlgorithm : ICryptoAlgorithm, IStatusProvider Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> | Edit this page View Source CanExchangeKey Can exchange a key? Declaration bool CanExchangeKey { get; } Property Value Type Description bool | Edit this page View Source CanSign Can sign? Declaration bool CanSign { get; } Property Value Type Description bool | Edit this page View Source DefaultAlgorithmOptions Default algorithm options Declaration string? DefaultAlgorithmOptions { get; } Property Value Type Description string | Edit this page View Source DefaultKeySize Default key size in bits Declaration int DefaultKeySize { get; } Property Value Type Description int | Edit this page View Source DefaultOptions Default options Declaration CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source IsDenied Was this allogithm denied (still usable for key derivation and signature validation, but not for key exchange initialization and signature)? Declaration bool IsDenied { get; } Property Value Type Description bool | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool | Edit this page View Source KeyPool Key pool (key is the key size, value the key pool) Declaration Dictionary<int, IAsymmetricKeyPool>? KeyPool { get; set; } Property Value Type Description Dictionary<int, IAsymmetricKeyPool> | Edit this page View Source PrivateKeyType Private key type Declaration Type PrivateKeyType { get; } Property Value Type Description Type | Edit this page View Source PublicKeyType Public key type Declaration Type PublicKeyType { get; } Property Value Type Description Type | Edit this page View Source Usages Key usages Declaration AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Methods | Edit this page View Source CanHandleNetAlgorithm(AsymmetricAlgorithm) Determine if this asymmetric algorithm can handle a .NET asymmetric algorithm Declaration bool CanHandleNetAlgorithm(AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Asymmetric algorithm Returns Type Description bool If this asymmetric algorithm can handle the .NET asymmetric algorithm | Edit this page View Source CreateKeyPair(CryptoOptions?) Create a new key pair Declaration IAsymmetricPrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description IAsymmetricPrivateKey Private key | Edit this page View Source CreateKeyPairAsync(CryptoOptions?, CancellationToken) Create a new key pair Declaration Task<IAsymmetricPrivateKey> CreateKeyPairAsync(CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricPrivateKey> Private key | Edit this page View Source DeriveKey(byte[], CryptoOptions?) Get the derived PFS key from received key exchange data Declaration byte[] DeriveKey(byte[] keyExchangeData, CryptoOptions? options = null) Parameters Type Name Description byte[] keyExchangeData Key exchange data CryptoOptions options Options Returns Type Description byte[] Derived PFS key | Edit this page View Source DeserializePrivateKey(byte[]) Deserialize a private key from a stream Declaration IAsymmetricPrivateKey DeserializePrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description IAsymmetricPrivateKey Private key | Edit this page View Source DeserializePublicKey(byte[]) Deserialize a public key from a stream Declaration IAsymmetricPublicKey DeserializePublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description IAsymmetricPublicKey Public key | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options Extension Methods CryptoExtensions.CreateKeyPools(IAsymmetricAlgorithm, int, bool) CryptoExtensions.CreateKeyPoolsAsync(IAsymmetricAlgorithm, int, bool, CancellationToken) CryptoExtensions.GetPooledKey(IAsymmetricAlgorithm, in CryptoOptions?) CryptoExtensions.GetPooledKeyAsync(IAsymmetricAlgorithm, CryptoOptions?, CancellationToken)"
  },
  "api/wan24.Crypto.IAsymmetricKey.html": {
    "href": "api/wan24.Crypto.IAsymmetricKey.html",
    "title": "Interface IAsymmetricKey | wan24-Crypto",
    "keywords": "Interface IAsymmetricKey Interface for an asymmetric key Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IAsymmetricKey : IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider Properties | Edit this page View Source Algorithm Algorithm name Declaration IAsymmetricAlgorithm Algorithm { get; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source Bits Key size in bits Declaration int Bits { get; } Property Value Type Description int | Edit this page View Source ID Key ID Declaration byte[] ID { get; } Property Value Type Description byte[] | Edit this page View Source KeyData Key data Declaration SecureByteArray KeyData { get; } Property Value Type Description SecureByteArray Methods | Edit this page View Source Export() Export the key data Declaration byte[] Export() Returns Type Description byte[] Key data"
  },
  "api/wan24.Crypto.IAsymmetricKeyPool.html": {
    "href": "api/wan24.Crypto.IAsymmetricKeyPool.html",
    "title": "Interface IAsymmetricKeyPool | wan24-Crypto",
    "keywords": "Interface IAsymmetricKeyPool Interface for an asymmetric private key pool Inherited Members IInstancePool.GetOneObject() IInstancePool.GetOneObjectAsync(CancellationToken) IInstancePool.GetManyObjects(int, CancellationToken) IInstancePool.GetManyObjectsAsync(int, CancellationToken) IInstancePool.Capacity IInstancePool.Available IInstancePool.Created IInstancePool.CreatedOnDemand IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IAsymmetricKeyPool : IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Algorithm Algorithm Declaration IAsymmetricAlgorithm Algorithm { get; } Property Value Type Description IAsymmetricAlgorithm | Edit this page View Source Options Options (returns a clone of the used options) Declaration CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source GetKey() Get a key Declaration IAsymmetricPrivateKey GetKey() Returns Type Description IAsymmetricPrivateKey Asymmetric private key | Edit this page View Source GetKeyAsync(CancellationToken) Get a key Declaration Task<IAsymmetricPrivateKey> GetKeyAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricPrivateKey> Asymmetric private key"
  },
  "api/wan24.Crypto.IAsymmetricPrivateKey.html": {
    "href": "api/wan24.Crypto.IAsymmetricPrivateKey.html",
    "title": "Interface IAsymmetricPrivateKey | wan24-Crypto",
    "keywords": "Interface IAsymmetricPrivateKey Interface for an asymmetric private key Inherited Members IAsymmetricKey.ID IAsymmetricKey.Algorithm IAsymmetricKey.Bits IAsymmetricKey.KeyData IAsymmetricKey.Export() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IAsymmetricPrivateKey : IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider Properties | Edit this page View Source PublicKey Public key (don't dispose - will be disposed, when the private key instance is disposing!) Declaration IAsymmetricPublicKey PublicKey { get; } Property Value Type Description IAsymmetricPublicKey Methods | Edit this page View Source GetCopy() Get a copy Declaration IAsymmetricPrivateKey GetCopy() Returns Type Description IAsymmetricPrivateKey Copy"
  },
  "api/wan24.Crypto.IAsymmetricPublicKey.html": {
    "href": "api/wan24.Crypto.IAsymmetricPublicKey.html",
    "title": "Interface IAsymmetricPublicKey | wan24-Crypto",
    "keywords": "Interface IAsymmetricPublicKey Interface for an asymmetric public key Inherited Members IAsymmetricKey.ID IAsymmetricKey.Algorithm IAsymmetricKey.Bits IAsymmetricKey.KeyData IAsymmetricKey.Export() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IAsymmetricPublicKey : IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider Methods | Edit this page View Source GetCopy() Get a copy Declaration IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy"
  },
  "api/wan24.Crypto.IBinaryPayloadContainer.html": {
    "href": "api/wan24.Crypto.IBinaryPayloadContainer.html",
    "title": "Interface IBinaryPayloadContainer | wan24-Crypto",
    "keywords": "Interface IBinaryPayloadContainer Interface for a binary payload container Inherited Members IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IBinaryPayloadContainer : IStreamSerializerVersion, IStreamSerializer Properties | Edit this page View Source MaxPayloadLength Maximum payload length in bytes Declaration int MaxPayloadLength { get; } Property Value Type Description int | Edit this page View Source MinPayloadLength Minimum payload length in bytes Declaration int MinPayloadLength { get; } Property Value Type Description int | Edit this page View Source Payload Payload Declaration byte[] Payload { get; } Property Value Type Description byte[]"
  },
  "api/wan24.Crypto.ICryptoAlgorithm.html": {
    "href": "api/wan24.Crypto.ICryptoAlgorithm.html",
    "title": "Interface ICryptoAlgorithm | wan24-Crypto",
    "keywords": "Interface ICryptoAlgorithm Interface for a cryptographic algorithm Inherited Members IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ICryptoAlgorithm : IStatusProvider Properties | Edit this page View Source DisplayName Display name Declaration string DisplayName { get; } Property Value Type Description string | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration bool IsPostQuantum { get; } Property Value Type Description bool | Edit this page View Source IsSupported Is supported? Declaration bool IsSupported { get; } Property Value Type Description bool | Edit this page View Source Name Algorithm name Declaration string Name { get; } Property Value Type Description string | Edit this page View Source UsesTpm Uses a TPM? Declaration bool UsesTpm { get; } Property Value Type Description bool | Edit this page View Source Value Algorithm value Declaration int Value { get; } Property Value Type Description int Methods | Edit this page View Source EnsureAllowed(in bool) Ensure this algorithm is allowed in the current configuration Declaration bool EnsureAllowed(in bool throwIfDenied = true) Parameters Type Name Description bool throwIfDenied Throw an exception, if this algorithm isn't allowed? Returns Type Description bool If this algorithm is allowed in the current configuration Exceptions Type Condition CryptographicException This algorithm is not allowed in the current configuration"
  },
  "api/wan24.Crypto.IEncryptProperties.html": {
    "href": "api/wan24.Crypto.IEncryptProperties.html",
    "title": "Interface IEncryptProperties | wan24-Crypto",
    "keywords": "Interface IEncryptProperties Interface for an object which has encrypted properties (DekAttribute and EncryptAttribute) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IEncryptProperties Extension Methods ObjectEncryption.DecryptObject<T>(T, in byte[]?, in byte[]?, in CryptoOptions?) ObjectEncryption.EncryptObject<T>(T, in byte[]?, in int, in byte[]?, in CryptoOptions?) ObjectEncryption.GetDek<T>(T) ObjectEncryption.GetDek<T>(T, in byte[], in CryptoOptions?) ObjectEncryption.HasDek<T>(T)"
  },
  "api/wan24.Crypto.IEncryptPropertiesExt.html": {
    "href": "api/wan24.Crypto.IEncryptPropertiesExt.html",
    "title": "Interface IEncryptPropertiesExt | wan24-Crypto",
    "keywords": "Interface IEncryptPropertiesExt Interface for an object which contains methods for extended en-/decryption Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IEncryptPropertiesExt : IEncryptProperties Methods | Edit this page View Source AfterDecrypt(byte[]?, byte[]?, CryptoOptions?) Called after decryption Declaration void AfterDecrypt(byte[]? pwd, byte[]? dataEncryptionKey, CryptoOptions? options) Parameters Type Name Description byte[] pwd Key encryption key (KEK; required when there's a DEK property) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options | Edit this page View Source AfterEncrypt(byte[]?, int, byte[]?, CryptoOptions?) Called after encryption Declaration void AfterEncrypt(byte[]? pwd, int dekLength, byte[]? dataEncryptionKey, CryptoOptions? options) Parameters Type Name Description byte[] pwd Key encryption key (KEK; required when there's a DEK property) int dekLength Generated DEK length in bytes byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options | Edit this page View Source BeforeDecrypt(byte[]?, byte[]?, CryptoOptions?) Called before decryption Declaration void BeforeDecrypt(byte[]? pwd, byte[]? dataEncryptionKey, CryptoOptions? options) Parameters Type Name Description byte[] pwd Key encryption key (KEK; required when there's a DEK property) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options | Edit this page View Source BeforeEncrypt(byte[]?, int, byte[]?, CryptoOptions?) Called before encryption Declaration void BeforeEncrypt(byte[]? pwd, int dekLength, byte[]? dataEncryptionKey, CryptoOptions? options) Parameters Type Name Description byte[] pwd Key encryption key (KEK; required when there's a DEK property) int dekLength Generated DEK length in bytes byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options Extension Methods ObjectEncryption.DecryptObject<T>(T, in byte[]?, in byte[]?, in CryptoOptions?) ObjectEncryption.EncryptObject<T>(T, in byte[]?, in int, in byte[]?, in CryptoOptions?) ObjectEncryption.GetDek<T>(T) ObjectEncryption.GetDek<T>(T, in byte[], in CryptoOptions?) ObjectEncryption.HasDek<T>(T)"
  },
  "api/wan24.Crypto.IEncryptPropertiesKek.html": {
    "href": "api/wan24.Crypto.IEncryptPropertiesKek.html",
    "title": "Interface IEncryptPropertiesKek | wan24-Crypto",
    "keywords": "Interface IEncryptPropertiesKek Interface for an encryptable object which provides the key encryption key (KEK) which is going to be used to en-/decrypt the data encryption key (DEK) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IEncryptPropertiesKek : IEncryptProperties Methods | Edit this page View Source GetKeyEncryptionKey() Get the key encryption key (KEK) Declaration SecureByteArray GetKeyEncryptionKey() Returns Type Description SecureByteArray Key encryption key (don't forget to dispose!) Extension Methods ObjectEncryption.AutoDecryptObject<T>(T, in CryptoOptions?) ObjectEncryption.AutoEncryptObject<T>(T, in int, in CryptoOptions?) ObjectEncryption.DecryptObject<T>(T, in byte[]?, in byte[]?, in CryptoOptions?) ObjectEncryption.EncryptObject<T>(T, in byte[]?, in int, in byte[]?, in CryptoOptions?) ObjectEncryption.GetDek<T>(T) ObjectEncryption.GetDek<T>(T, in byte[], in CryptoOptions?) ObjectEncryption.HasDek<T>(T)"
  },
  "api/wan24.Crypto.IKeyExchange.html": {
    "href": "api/wan24.Crypto.IKeyExchange.html",
    "title": "Interface IKeyExchange | wan24-Crypto",
    "keywords": "Interface IKeyExchange Interface for an object which can be used to perform a key exchange Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IKeyExchange Methods | Edit this page View Source DeriveKey(byte[]) Derive a key from key exchange data Declaration byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Key exchange data (will be cleared!) Returns Type Description byte[] Derived key | Edit this page View Source GetKeyExchangeData() Get a key and the key exchange data Declaration (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData() Returns Type Description (byte[] Key, byte[] KeyExchangeData) Key and key exchange data"
  },
  "api/wan24.Crypto.IKeyExchangePrivateKey.html": {
    "href": "api/wan24.Crypto.IKeyExchangePrivateKey.html",
    "title": "Interface IKeyExchangePrivateKey | wan24-Crypto",
    "keywords": "Interface IKeyExchangePrivateKey Key exchange private key Inherited Members IAsymmetricPrivateKey.PublicKey IAsymmetricPrivateKey.GetCopy() IAsymmetricKey.ID IAsymmetricKey.Algorithm IAsymmetricKey.Bits IAsymmetricKey.KeyData IAsymmetricKey.Export() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State IKeyExchange.GetKeyExchangeData() IKeyExchange.DeriveKey(byte[]) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IKeyExchangePrivateKey : IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange Methods | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Get the derived key from a public key Declaration byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Public key (won't be disposed) Returns Type Description byte[] Derived key | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Get key exchange data Declaration (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey Peer public key (won't be disposed) CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Derived key and key exchange data"
  },
  "api/wan24.Crypto.IPakeHttpRequestFactory.html": {
    "href": "api/wan24.Crypto.IPakeHttpRequestFactory.html",
    "title": "Interface IPakeHttpRequestFactory | wan24-Crypto",
    "keywords": "Interface IPakeHttpRequestFactory Interface for a PAKE request factory Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IPakeHttpRequestFactory : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Options Encryption options (won't be cleared) Declaration CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in Dictionary<string, string>?, in Dictionary<string, string[]>?, in bool) Create a request Declaration PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in Dictionary<string, string>? param = null, in Dictionary<string, string[]>? headers = null, in bool pakeResponse = true) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Dictionary<string, string> param Request parameters Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in Stream, in bool, in Dictionary<string, string[]>?, in bool, in TaskScheduler?, in CancellationToken) Create a request Declaration PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in Stream body, in bool longRunning, in Dictionary<string, string[]>? headers = null, in bool pakeResponse = true, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Stream body Request body (won't be disposed) bool longRunning If the sending process will take longer time Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? TaskScheduler scheduler Task scheduler to use CancellationToken cancellationToken Cancellation token Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in HttpContent, in bool) Create a request Declaration PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in HttpContent content, in bool pakeResponse = true) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path HttpContent content Content (will be disposed!) bool pakeResponse Require PAKE response? Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequestAsync(Uri, HttpMethod, string, Stream, Dictionary<string, string[]>?, bool, CancellationToken) Create a request Declaration Task<PakeRequest> CreateRequestAsync(Uri uri, HttpMethod method, string path, Stream body, Dictionary<string, string[]>? headers = null, bool pakeResponse = true, CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Stream body Request body (won't be disposed) Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRequest> PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequestAsync(Uri, HttpMethod, string, HttpContent, bool, CancellationToken) Create a request Declaration Task<PakeRequest> CreateRequestAsync(Uri uri, HttpMethod method, string path, HttpContent content, bool pakeResponse = true, CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path HttpContent content Content (will be disposed!) bool pakeResponse Require PAKE response? CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRequest> PAKE request (don't forget to dispose!)"
  },
  "api/wan24.Crypto.IPakeRecord.html": {
    "href": "api/wan24.Crypto.IPakeRecord.html",
    "title": "Interface IPakeRecord | wan24-Crypto",
    "keywords": "Interface IPakeRecord Interface for a PAKE record Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IPakeRecord Properties | Edit this page View Source Identifier Identifier (will be cleared!) Declaration byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Secret Secret (protected with the authentication key; this is sensitive data and should be stored encrypted; will be cleared!) Declaration byte[] Secret { get; } Property Value Type Description byte[] | Edit this page View Source SignatureKey Signature key (this is sensitive data and should be stored encrypted; will be cleared!) Declaration byte[] SignatureKey { get; } Property Value Type Description byte[] Extension Methods PakeRecordExtensions.DeriveSessionKey(IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeRecordExtensions.Dispose(IPakeRecord) PakeRecordExtensions.DisposeAsync(IPakeRecord)"
  },
  "api/wan24.Crypto.IPakeRequest.html": {
    "href": "api/wan24.Crypto.IPakeRequest.html",
    "title": "Interface IPakeRequest | wan24-Crypto",
    "keywords": "Interface IPakeRequest Interface for a PAKE request (all values will be cleared!) Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IPakeRequest : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Identifier Identifier Declaration byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Key Key (XORed with the signature key, when authenticating) Declaration byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source Payload Payload Declaration byte[] Payload { get; } Property Value Type Description byte[] | Edit this page View Source Random Random bytes Declaration byte[] Random { get; } Property Value Type Description byte[] | Edit this page View Source Signature Signature Declaration byte[] Signature { get; } Property Value Type Description byte[]"
  },
  "api/wan24.Crypto.IRng.html": {
    "href": "api/wan24.Crypto.IRng.html",
    "title": "Interface IRng | wan24-Crypto",
    "keywords": "Interface IRng Interface for an RNG Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface IRng Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.ISecureValue.html": {
    "href": "api/wan24.Crypto.ISecureValue.html",
    "title": "Interface ISecureValue | wan24-Crypto",
    "keywords": "Interface ISecureValue Interface for a secure value Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISecureValue : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Value Value (should/will be cleared!) Declaration byte[] Value { get; set; } Property Value Type Description byte[]"
  },
  "api/wan24.Crypto.ISeedConsumer.html": {
    "href": "api/wan24.Crypto.ISeedConsumer.html",
    "title": "Interface ISeedConsumer | wan24-Crypto",
    "keywords": "Interface ISeedConsumer Interface for a seed consumer (usually a RNG) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISeedConsumer Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.ISeedableRng.html": {
    "href": "api/wan24.Crypto.ISeedableRng.html",
    "title": "Interface ISeedableRng | wan24-Crypto",
    "keywords": "Interface ISeedableRng Interface for a seedable IRng Inherited Members IRng.GetBytes(in int) IRng.GetBytesAsync(int, CancellationToken) IRng.FillBytes(in Span<byte>) IRng.FillBytesAsync(Memory<byte>, CancellationToken) ISeedConsumer.AddSeed(ReadOnlySpan<byte>) ISeedConsumer.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISeedableRng : IRng, ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.ISignaturePrivateKey.html": {
    "href": "api/wan24.Crypto.ISignaturePrivateKey.html",
    "title": "Interface ISignaturePrivateKey | wan24-Crypto",
    "keywords": "Interface ISignaturePrivateKey Signature private key Inherited Members IAsymmetricPrivateKey.PublicKey IAsymmetricPrivateKey.GetCopy() IAsymmetricKey.ID IAsymmetricKey.Algorithm IAsymmetricKey.Bits IAsymmetricKey.KeyData IAsymmetricKey.Export() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISignaturePrivateKey : IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider Methods | Edit this page View Source SignData(byte[], string?, CryptoOptions?) Sign data Declaration SignatureContainer SignData(byte[] data, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description byte[] data Data string purpose Purpose CryptoOptions options Options Returns Type Description SignatureContainer Signature | Edit this page View Source SignData(Stream, string?, CryptoOptions?) Sign data Declaration SignatureContainer SignData(Stream data, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description Stream data Data string purpose Purpose CryptoOptions options Options Returns Type Description SignatureContainer Signature | Edit this page View Source SignDataAsync(Stream, string?, CryptoOptions?, CancellationToken) Sign data Declaration Task<SignatureContainer> SignDataAsync(Stream data, string? purpose = null, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data string purpose Purpose CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<SignatureContainer> Signature | Edit this page View Source SignHash(byte[], string?, CryptoOptions?) Sign a hash Declaration SignatureContainer SignHash(byte[] hash, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description byte[] hash Hash string purpose Purpose CryptoOptions options Options Returns Type Description SignatureContainer Signature | Edit this page View Source SignHashRaw(byte[]) Sign a hash Declaration byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Hash Returns Type Description byte[] Signature (RFC 3279 DER sequence)"
  },
  "api/wan24.Crypto.ISignaturePublicKey.html": {
    "href": "api/wan24.Crypto.ISignaturePublicKey.html",
    "title": "Interface ISignaturePublicKey | wan24-Crypto",
    "keywords": "Interface ISignaturePublicKey Signature public key Inherited Members IAsymmetricPublicKey.GetCopy() IAsymmetricKey.ID IAsymmetricKey.Algorithm IAsymmetricKey.Bits IAsymmetricKey.KeyData IAsymmetricKey.Export() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStreamSerializerVersion.ObjectVersion IStreamSerializerVersion.SerializedObjectVersion IStreamSerializerVersion.SerializerVersion IStreamSerializer.Serialize(Stream) IStreamSerializer.SerializeAsync(Stream, CancellationToken) IStreamSerializer.Deserialize(Stream, int) IStreamSerializer.DeserializeAsync(Stream, int, CancellationToken) IStatusProvider.State Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISignaturePublicKey : IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider Methods | Edit this page View Source ValidateSignature(SignatureContainer, byte[]?, bool) Validate a signature which was created using the private key Declaration bool ValidateSignature(SignatureContainer signature, byte[]? data = null, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature byte[] data Signed raw data bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid | Edit this page View Source ValidateSignature(SignatureContainer, Stream, bool) Validate a signature which was created using the private key Declaration bool ValidateSignature(SignatureContainer signature, Stream data, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature Stream data Signed raw data bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid | Edit this page View Source ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) Validate a signature which was created using the private key Declaration Task<bool> ValidateSignatureAsync(SignatureContainer signature, Stream data, bool throwOnError = true, CancellationToken cancellationToken = default) Parameters Type Name Description SignatureContainer signature Signature Stream data Signed raw data bool throwOnError Throw an exception on validation error? CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the signature is valid | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Validate a raw signature (RFC 3279 DER sequence) Declaration bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature Signature (RFC 3279 DER sequence) byte[] signedHash Signed hash bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid"
  },
  "api/wan24.Crypto.ISymmetricKeySuite.html": {
    "href": "api/wan24.Crypto.ISymmetricKeySuite.html",
    "title": "Interface ISymmetricKeySuite | wan24-Crypto",
    "keywords": "Interface ISymmetricKeySuite Interface for a symmetric key suite Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public interface ISymmetricKeySuite : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source ExpandedKey Expanded symmetric key (private!; used for en-/decryption and authentication; will be disposed!) Declaration SecureByteArray ExpandedKey { get; } Property Value Type Description SecureByteArray | Edit this page View Source Identifier Identifier (public; used for identification during authentication; will be cleared!) Declaration byte[]? Identifier { get; } Property Value Type Description byte[] Extension Methods SymmetricKeySuiteExtensions.CreateSignup(ISymmetricKeySuite, in byte[]?, in CryptoOptions?) SymmetricKeySuiteExtensions.DeriveSessionKey(ISymmetricKeySuite, in byte[]?, in CryptoOptions?, in CryptoOptions?, in bool)"
  },
  "api/wan24.Crypto.JsonObjectWrapper.html": {
    "href": "api/wan24.Crypto.JsonObjectWrapper.html",
    "title": "Class JsonObjectWrapper | wan24-Crypto",
    "keywords": "Class JsonObjectWrapper JSON object wrapper Inheritance object JsonObjectWrapper Implements IEquatable<JsonObjectWrapper> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record JsonObjectWrapper : IEquatable<JsonObjectWrapper> Constructors | Edit this page View Source JsonObjectWrapper() Constructor Declaration public JsonObjectWrapper() | Edit this page View Source JsonObjectWrapper(object?) Constructor Declaration public JsonObjectWrapper(object? obj) Parameters Type Name Description object obj Object Properties | Edit this page View Source HostedObject Hosted object Declaration public byte[]? HostedObject { get; set; } Property Value Type Description byte[] | Edit this page View Source HostedObjectType Hosted object type name Declaration [MinLength(1)] [MaxLength(255)] public string? HostedObjectType { get; set; } Property Value Type Description string Methods | Edit this page View Source GetHostedObject() Get hosted object Declaration public object? GetHostedObject() Returns Type Description object Object | Edit this page View Source GetHostedObject<T>() Get hosted object Declaration public T? GetHostedObject<T>() Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source SetHostedObject(object?) Set the hosted object Declaration public void SetHostedObject(object? obj) Parameters Type Name Description object obj Object Operators | Edit this page View Source explicit operator JsonObjectWrapper(byte[]) Cast from serialized data Declaration public static explicit operator JsonObjectWrapper(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description JsonObjectWrapper | Edit this page View Source implicit operator byte[](JsonObjectWrapper) Cast as serialized data Declaration public static implicit operator byte[](JsonObjectWrapper wrapper) Parameters Type Name Description JsonObjectWrapper wrapper JSON object wrapper Returns Type Description byte[] Implements IEquatable<T>"
  },
  "api/wan24.Crypto.KdfAlgorithmBase.html": {
    "href": "api/wan24.Crypto.KdfAlgorithmBase.html",
    "title": "Class KdfAlgorithmBase | wan24-Crypto",
    "keywords": "Class KdfAlgorithmBase Base class for a KDF algorithm Inheritance object CryptoAlgorithmBase KdfAlgorithmBase KdfPbKdf2Algorithm KdfSp800_108HmacCtrKbKdfAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<KdfAlgorithmBase> Inherited Members CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record KdfAlgorithmBase : CryptoAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<KdfAlgorithmBase> Constructors | Edit this page View Source KdfAlgorithmBase(string, int) Constructor Declaration protected KdfAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Fields | Edit this page View Source _DefaultOptions Default options Declaration protected readonly CryptoOptions _DefaultOptions Field Value Type Description CryptoOptions Properties | Edit this page View Source DefaultIterations Default number of iterations Declaration public abstract int DefaultIterations { get; set; } Property Value Type Description int | Edit this page View Source DefaultKdfOptions Default KDF options Declaration public string? DefaultKdfOptions { get; set; } Property Value Type Description string | Edit this page View Source DefaultOptions Default options Declaration public virtual CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source MinIterations Minimum number of iterations Declaration public abstract int MinIterations { get; } Property Value Type Description int | Edit this page View Source MinSaltLength Minimum salt length in bytes Declaration public abstract int MinSaltLength { get; } Property Value Type Description int | Edit this page View Source SaltLength Salt length in bytes Declaration public abstract int SaltLength { get; } Property Value Type Description int | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides CryptoAlgorithmBase.State Methods | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration public virtual CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source Stretch(byte[], int, byte[]?, CryptoOptions?) Stretch a password Declaration public abstract (byte[] Stretched, byte[] Salt) Stretch(byte[] pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt | Edit this page View Source ValidateOptions(string?, bool) Validate KDF options for this algorithm Declaration public virtual bool ValidateOptions(string? kdfOptions, bool throwOnError = true) Parameters Type Name Description string kdfOptions KDF options bool throwOnError Throw an exception on error? Returns Type Description bool If the options are valid Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.KdfExtensions.html": {
    "href": "api/wan24.Crypto.KdfExtensions.html",
    "title": "Class KdfExtensions | wan24-Crypto",
    "keywords": "Class KdfExtensions KDF extensions Inheritance object KdfExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class KdfExtensions Methods | Edit this page View Source Stretch(Memory<char>, int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this Memory<char> pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description Memory<char> pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt | Edit this page View Source Stretch(ReadOnlyMemory<char>, int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this ReadOnlyMemory<char> pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<char> pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt | Edit this page View Source Stretch(ReadOnlySpan<char>, int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this ReadOnlySpan<char> pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<char> pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt | Edit this page View Source Stretch(Span<char>, int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this Span<char> pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description Span<char> pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt | Edit this page View Source Stretch(string, int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this string pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description string pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt"
  },
  "api/wan24.Crypto.KdfHelper.html": {
    "href": "api/wan24.Crypto.KdfHelper.html",
    "title": "Class KdfHelper | wan24-Crypto",
    "keywords": "Class KdfHelper KDF helper Inheritance object KdfHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class KdfHelper Fields | Edit this page View Source Algorithms Registered KDF algorithms Declaration public static readonly ConcurrentDictionary<string, KdfAlgorithmBase> Algorithms Field Value Type Description ConcurrentDictionary<string, KdfAlgorithmBase> Properties | Edit this page View Source DefaultAlgorithm Default KDF algorithm Declaration public static KdfAlgorithmBase DefaultAlgorithm { get; set; } Property Value Type Description KdfAlgorithmBase | Edit this page View Source PostQuantum Post-quantum algorithms Declaration public static IEnumerable<KdfAlgorithmBase> PostQuantum { get; } Property Value Type Description IEnumerable<KdfAlgorithmBase> | Edit this page View Source PreQuantum Pre-quantum algorithms Declaration public static IEnumerable<KdfAlgorithmBase> PreQuantum { get; } Property Value Type Description IEnumerable<KdfAlgorithmBase> | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source GetAlgorithm(int) Get an algorithm Declaration public static KdfAlgorithmBase GetAlgorithm(int value) Parameters Type Name Description int value Algorithm value Returns Type Description KdfAlgorithmBase Algorithm | Edit this page View Source GetAlgorithm(string) Get an algorithm Declaration public static KdfAlgorithmBase GetAlgorithm(string name) Parameters Type Name Description string name Algorithm name Returns Type Description KdfAlgorithmBase Algorithm | Edit this page View Source GetDefaultOptions(CryptoOptions?) Get the default options used by the KDF helper Declaration public static CryptoOptions GetDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source Stretch(byte[], int, byte[]?, CryptoOptions?) Stretch a password Declaration public static (byte[] Stretched, byte[] Salt) Stretch(this byte[] pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt"
  },
  "api/wan24.Crypto.KdfPbKdf2Algorithm.html": {
    "href": "api/wan24.Crypto.KdfPbKdf2Algorithm.html",
    "title": "Class KdfPbKdf2Algorithm | wan24-Crypto",
    "keywords": "Class KdfPbKdf2Algorithm PBKDF#2 KDF algorithm Inheritance object CryptoAlgorithmBase KdfAlgorithmBase KdfPbKdf2Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<KdfAlgorithmBase> IEquatable<KdfPbKdf2Algorithm> Inherited Members KdfAlgorithmBase.DefaultKdfOptions KdfAlgorithmBase.EnsureDefaultOptions(CryptoOptions) KdfAlgorithmBase.ValidateOptions(string, bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record KdfPbKdf2Algorithm : KdfAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<KdfAlgorithmBase>, IEquatable<KdfPbKdf2Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"PBKDF2\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DEFAULT_ITERATIONS Default iterations Declaration public const int DEFAULT_ITERATIONS = 250000 Field Value Type Description int | Edit this page View Source DEFAULT_SALT_LEN Default salt bytes length Declaration public const int DEFAULT_SALT_LEN = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"PBKDF#2\" Field Value Type Description string | Edit this page View Source MIN_ITERATIONS Min. iterations Declaration public const int MIN_ITERATIONS = 210000 Field Value Type Description int | Edit this page View Source MIN_SALT_LEN Min. salt bytes length Declaration public const int MIN_SALT_LEN = 16 Field Value Type Description int Properties | Edit this page View Source DefaultIterations Default number of iterations Declaration public override int DefaultIterations { get; set; } Property Value Type Description int Overrides KdfAlgorithmBase.DefaultIterations | Edit this page View Source DefaultOptions Default options Declaration public override CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions Overrides KdfAlgorithmBase.DefaultOptions | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static KdfPbKdf2Algorithm Instance { get; } Property Value Type Description KdfPbKdf2Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MinIterations Minimum number of iterations Declaration public override int MinIterations { get; } Property Value Type Description int Overrides KdfAlgorithmBase.MinIterations | Edit this page View Source MinSaltLength Minimum salt length in bytes Declaration public override int MinSaltLength { get; } Property Value Type Description int Overrides KdfAlgorithmBase.MinSaltLength | Edit this page View Source SaltLength Salt length in bytes Declaration public override int SaltLength { get; } Property Value Type Description int Overrides KdfAlgorithmBase.SaltLength | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides KdfAlgorithmBase.State Methods | Edit this page View Source Stretch(byte[], int, byte[]?, CryptoOptions?) Stretch a password Declaration public override (byte[] Stretched, byte[] Salt) Stretch(byte[] pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt Overrides KdfAlgorithmBase.Stretch(byte[], int, byte[]?, CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.KdfPbKdf2Options.html": {
    "href": "api/wan24.Crypto.KdfPbKdf2Options.html",
    "title": "Class KdfPbKdf2Options | wan24-Crypto",
    "keywords": "Class KdfPbKdf2Options PBKDF#2 KDF algorithm options Inheritance object KdfPbKdf2Options Implements IEquatable<KdfPbKdf2Options> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record KdfPbKdf2Options : IEquatable<KdfPbKdf2Options> Constructors | Edit this page View Source KdfPbKdf2Options() Constructor Declaration public KdfPbKdf2Options() | Edit this page View Source KdfPbKdf2Options(in string) Constructor Declaration public KdfPbKdf2Options(in string json) Parameters Type Name Description string json JSON string Fields | Edit this page View Source DEFAULT_HASH_ALGORITHM Default hash algorithm name (SHA3-384) Declaration public const string DEFAULT_HASH_ALGORITHM = \"SHA3-384\" Field Value Type Description string Properties | Edit this page View Source DefaultHashAlgorithm Default hash algorithm name Declaration public static string DefaultHashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source HashAlgorithm Hash algorithm name Declaration [Required] [MinLength(1)] [MaxLength(255)] public string HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source HashName Hash name Declaration [JsonIgnore] [Required] public HashAlgorithmName HashName { get; set; } Property Value Type Description HashAlgorithmName Methods | Edit this page View Source GetCopy() Get a copy of this instance Declaration public KdfPbKdf2Options GetCopy() Returns Type Description KdfPbKdf2Options Instance copy | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator KdfPbKdf2Options?(in string?) Cast as options Declaration public static implicit operator KdfPbKdf2Options?(in string? json) Parameters Type Name Description string json JSON string Returns Type Description KdfPbKdf2Options | Edit this page View Source implicit operator string(in KdfPbKdf2Options) Cast as JSON string Declaration public static implicit operator string(in KdfPbKdf2Options options) Parameters Type Name Description KdfPbKdf2Options options Options Returns Type Description string | Edit this page View Source implicit operator CryptoOptions(in KdfPbKdf2Options) Cast as CryptoOptions Declaration public static implicit operator CryptoOptions(in KdfPbKdf2Options options) Parameters Type Name Description KdfPbKdf2Options options Options Returns Type Description CryptoOptions Implements IEquatable<T>"
  },
  "api/wan24.Crypto.KdfSp800_108HmacCtrKbKdfAlgorithm.html": {
    "href": "api/wan24.Crypto.KdfSp800_108HmacCtrKbKdfAlgorithm.html",
    "title": "Class KdfSp800_108HmacCtrKbKdfAlgorithm | wan24-Crypto",
    "keywords": "Class KdfSp800_108HmacCtrKbKdfAlgorithm SP 800-108 HMAC CTR KBKDF algorithm Inheritance object CryptoAlgorithmBase KdfAlgorithmBase KdfSp800_108HmacCtrKbKdfAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<KdfAlgorithmBase> IEquatable<KdfSp800_108HmacCtrKbKdfAlgorithm> Inherited Members KdfAlgorithmBase.DefaultOptions KdfAlgorithmBase.DefaultKdfOptions KdfAlgorithmBase.EnsureDefaultOptions(CryptoOptions) KdfAlgorithmBase.ValidateOptions(string, bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record KdfSp800_108HmacCtrKbKdfAlgorithm : KdfAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<KdfAlgorithmBase>, IEquatable<KdfSp800_108HmacCtrKbKdfAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SP800_108HMACCTRKBKDF\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 2 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SP 800-108 HMAC CTR KBKDF\" Field Value Type Description string Properties | Edit this page View Source DefaultIterations Default number of iterations Declaration public override int DefaultIterations { get; set; } Property Value Type Description int Overrides KdfAlgorithmBase.DefaultIterations | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static KdfSp800_108HmacCtrKbKdfAlgorithm Instance { get; } Property Value Type Description KdfSp800_108HmacCtrKbKdfAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source MinIterations Minimum number of iterations Declaration public override int MinIterations { get; } Property Value Type Description int Overrides KdfAlgorithmBase.MinIterations | Edit this page View Source MinSaltLength Minimum salt length in bytes Declaration public override int MinSaltLength { get; } Property Value Type Description int Overrides KdfAlgorithmBase.MinSaltLength | Edit this page View Source SaltLength Salt length in bytes Declaration public override int SaltLength { get; } Property Value Type Description int Overrides KdfAlgorithmBase.SaltLength | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides KdfAlgorithmBase.State Methods | Edit this page View Source Stretch(byte[], int, byte[]?, CryptoOptions?) Stretch a password Declaration public override (byte[] Stretched, byte[] Salt) Stretch(byte[] pwd, int len, byte[]? salt = null, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password int len Required password length byte[] salt Salt CryptoOptions options Options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Stretched password and the used salt Overrides KdfAlgorithmBase.Stretch(byte[], int, byte[]?, CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.KdfSp800_801HmacKbKdfOptions.html": {
    "href": "api/wan24.Crypto.KdfSp800_801HmacKbKdfOptions.html",
    "title": "Class KdfSp800_801HmacKbKdfOptions | wan24-Crypto",
    "keywords": "Class KdfSp800_801HmacKbKdfOptions SP 800-108 HMAC CTR KBKDF algorithm options Inheritance object KdfSp800_801HmacKbKdfOptions Implements IEquatable<KdfSp800_801HmacKbKdfOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record KdfSp800_801HmacKbKdfOptions : IEquatable<KdfSp800_801HmacKbKdfOptions> Constructors | Edit this page View Source KdfSp800_801HmacKbKdfOptions() Constructor Declaration public KdfSp800_801HmacKbKdfOptions() | Edit this page View Source KdfSp800_801HmacKbKdfOptions(in string) Constructor Declaration public KdfSp800_801HmacKbKdfOptions(in string json) Parameters Type Name Description string json JSON string Fields | Edit this page View Source DEFAULT_HASH_ALGORITHM Default hash algorithm name (SHA3-384) Declaration public const string DEFAULT_HASH_ALGORITHM = \"SHA3-384\" Field Value Type Description string Properties | Edit this page View Source Context Context Declaration [MaxLength(255)] public string Context { get; set; } Property Value Type Description string | Edit this page View Source DefaultHashAlgorithm Default hash algorithm name Declaration public static string DefaultHashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source HashAlgorithm Hash algorithm name Declaration [Required] [MinLength(1)] [MaxLength(255)] public string HashAlgorithm { get; set; } Property Value Type Description string | Edit this page View Source HashName Hash name Declaration [JsonIgnore] public HashAlgorithmName HashName { get; set; } Property Value Type Description HashAlgorithmName | Edit this page View Source Label Label Declaration [MaxLength(255)] public string Label { get; set; } Property Value Type Description string Methods | Edit this page View Source GetCopy() Get a copy of this instance Declaration public KdfSp800_801HmacKbKdfOptions GetCopy() Returns Type Description KdfSp800_801HmacKbKdfOptions Instance copy | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator KdfSp800_801HmacKbKdfOptions?(in string?) Cast as options Declaration public static implicit operator KdfSp800_801HmacKbKdfOptions?(in string? json) Parameters Type Name Description string json JSON string Returns Type Description KdfSp800_801HmacKbKdfOptions | Edit this page View Source implicit operator string(in KdfSp800_801HmacKbKdfOptions) Cast as JSON string Declaration public static implicit operator string(in KdfSp800_801HmacKbKdfOptions options) Parameters Type Name Description KdfSp800_801HmacKbKdfOptions options Options Returns Type Description string | Edit this page View Source implicit operator CryptoOptions(in KdfSp800_801HmacKbKdfOptions) Cast as CryptoOptions Declaration public static implicit operator CryptoOptions(in KdfSp800_801HmacKbKdfOptions options) Parameters Type Name Description KdfSp800_801HmacKbKdfOptions options Options Returns Type Description CryptoOptions Implements IEquatable<T>"
  },
  "api/wan24.Crypto.KeyExchangeDataContainer.html": {
    "href": "api/wan24.Crypto.KeyExchangeDataContainer.html",
    "title": "Class KeyExchangeDataContainer | wan24-Crypto",
    "keywords": "Class KeyExchangeDataContainer Key exchange data container Inheritance object ValidatableRecordBase StreamSerializerRecordBase KeyExchangeDataContainer Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> ICloneable IEquatable<KeyExchangeDataContainer> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record KeyExchangeDataContainer : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, ICloneable, IEquatable<KeyExchangeDataContainer> Constructors | Edit this page View Source KeyExchangeDataContainer() Constructor Declaration public KeyExchangeDataContainer() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source CounterKeyExchangeData Counter key exchange data Declaration [RuntimeCountLimit(\"wan24.Crypto.KeyExchangeDataContainer.MaxKeyExchangeDataLength\", 1)] public byte[]? CounterKeyExchangeData { get; set; } Property Value Type Description byte[] | Edit this page View Source KeyExchangeData Key exchange data Declaration [RuntimeCountLimit(\"wan24.Crypto.KeyExchangeDataContainer.MaxKeyExchangeDataLength\", 1)] public byte[] KeyExchangeData { get; set; } Property Value Type Description byte[] | Edit this page View Source MaxKeyExchangeDataLength Max. key exchange data length in bytes Declaration public static int MaxKeyExchangeDataLength { get; set; } Property Value Type Description int Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source GetCopy() Get a copy of this instance Declaration public KeyExchangeDataContainer GetCopy() Returns Type Description KeyExchangeDataContainer Instance copy | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator KeyExchangeDataContainer(byte[]) Cast from serialized data Declaration public static explicit operator KeyExchangeDataContainer(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description KeyExchangeDataContainer | Edit this page View Source implicit operator byte[](KeyExchangeDataContainer) Cast as serialized data Declaration public static implicit operator byte[](KeyExchangeDataContainer keyExchangeData) Parameters Type Name Description KeyExchangeDataContainer keyExchangeData Key exchange data Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> ICloneable IEquatable<T>"
  },
  "api/wan24.Crypto.KeyRing.html": {
    "href": "api/wan24.Crypto.KeyRing.html",
    "title": "Class KeyRing | wan24-Crypto",
    "keywords": "Class KeyRing Key ring Inheritance object DisposableBase DisposableStreamSerializerBase KeyRing Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class KeyRing : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject Remarks Constructor Constructors | Edit this page View Source KeyRing() Key ring Declaration public KeyRing() Remarks Constructor | Edit this page View Source KeyRing(in bool) Constructor Declaration public KeyRing(in bool ignoreSerializationErrors) Parameters Type Name Description bool ignoreSerializationErrors If to ignore serialization errors when deserializing Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Count Number of stored objects Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[string] Get a key type Declaration public KeyTypes this[string name] { get; } Parameters Type Name Description string name Key name Property Value Type Description KeyTypes Key type | Edit this page View Source MaxCount Max. number of stored keys Declaration public static int MaxCount { get; set; } Property Value Type Description int | Edit this page View Source MaxSymmetricKeyLength Max. symmetric key length in bytes Declaration public static int MaxSymmetricKeyLength { get; set; } Property Value Type Description int | Edit this page View Source Names Stored key names Declaration public IEnumerable<string> Names { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source SerializedCount Number of serialized objects (if after deserialization the number is different from Count, some incompatible objects have been skipped) Declaration public int SerializedCount { get; } Property Value Type Description int Methods | Edit this page View Source Clear() Clear all keys Declaration public void Clear() | Edit this page View Source ClearAsync() Clear all keys Declaration public Task ClearAsync() Returns Type Description Task | Edit this page View Source Decrypt(byte[], byte[], CryptoOptions?) Decrypt a private key suite cipher and deserialize to a private key suite instance Declaration public static KeyRing Decrypt(byte[] cipher, byte[] key, CryptoOptions? options = null) Parameters Type Name Description byte[] cipher Cipher byte[] key Key CryptoOptions options Options Returns Type Description KeyRing Private key suite | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source Encrypt(byte[], CryptoOptions?) Serialize and encrypt this private key suite for physical cold storage Declaration public byte[] Encrypt(byte[] key, CryptoOptions? options = null) Parameters Type Name Description byte[] key Key CryptoOptions options Options Returns Type Description byte[] Cipher | Edit this page View Source GetCount(in KeyTypes) Get the number of stored keys Declaration public int GetCount(in KeyTypes keyType) Parameters Type Name Description KeyTypes keyType Key type Returns Type Description int Number of stored keys | Edit this page View Source GetNames(in KeyTypes) Get stored key names Declaration public IEnumerable<string> GetNames(in KeyTypes keyType) Parameters Type Name Description KeyTypes keyType Key type Returns Type Description IEnumerable<string> Stored key names | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source TryAdd(in string, in byte[]) Try adding a key Declaration public bool TryAdd(in string name, in byte[] key) Parameters Type Name Description string name Name byte[] key Key (will be cleared) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in CryptoOptions) Try adding crypto options Declaration public bool TryAdd(in string name, in CryptoOptions options) Parameters Type Name Description string name Name CryptoOptions options Options (won't be cleared) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in IAsymmetricKey) Try adding a key Declaration public bool TryAdd(in string name, in IAsymmetricKey key) Parameters Type Name Description string name Name IAsymmetricKey key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PakeRecord) Try adding a key Declaration public bool TryAdd(in string name, in PakeRecord key) Parameters Type Name Description string name Name PakeRecord key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PakeRecordStore) Try adding a key Declaration public bool TryAdd(in string name, in PakeRecordStore key) Parameters Type Name Description string name Name PakeRecordStore key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PrivateKeySuite) Try adding a key Declaration public bool TryAdd(in string name, in PrivateKeySuite key) Parameters Type Name Description string name Name PrivateKeySuite key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PrivateKeySuiteStore) Try adding a key Declaration public bool TryAdd(in string name, in PrivateKeySuiteStore key) Parameters Type Name Description string name Name PrivateKeySuiteStore key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PublicKeySuite) Try adding a key Declaration public bool TryAdd(in string name, in PublicKeySuite key) Parameters Type Name Description string name Name PublicKeySuite key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in PublicKeySuiteStore) Try adding a key Declaration public bool TryAdd(in string name, in PublicKeySuiteStore key) Parameters Type Name Description string name Name PublicKeySuiteStore key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAdd(in string, in SignedPkiStore) Try adding a key Declaration public bool TryAdd(in string name, in SignedPkiStore key) Parameters Type Name Description string name Name SignedPkiStore key Key (will be disposed) Returns Type Description bool If added | Edit this page View Source TryAddAsync(string, byte[], CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, byte[] key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name byte[] key Key (will be cleared) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, CryptoOptions, CancellationToken) Try adding crypto options Declaration public Task<bool> TryAddAsync(string name, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CryptoOptions options Options (won't be cleared) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, IAsymmetricKey, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, IAsymmetricKey key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name IAsymmetricKey key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PakeRecord, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PakeRecord key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PakeRecord key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PakeRecordStore, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PakeRecordStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PakeRecordStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PrivateKeySuite, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PrivateKeySuite key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PrivateKeySuite key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PrivateKeySuiteStore, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PrivateKeySuiteStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PrivateKeySuiteStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PublicKeySuite, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PublicKeySuite key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PublicKeySuite key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, PublicKeySuiteStore, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, PublicKeySuiteStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PublicKeySuiteStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryAddAsync(string, SignedPkiStore, CancellationToken) Try adding a key Declaration public Task<bool> TryAddAsync(string name, SignedPkiStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name SignedPkiStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If added | Edit this page View Source TryGetAsymmetricPrivate(in string) Try getting a key Declaration public IAsymmetricPrivateKey? TryGetAsymmetricPrivate(in string name) Parameters Type Name Description string name Name Returns Type Description IAsymmetricPrivateKey Key | Edit this page View Source TryGetAsymmetricPrivateAsync(string, CancellationToken) Try getting a key Declaration public Task<IAsymmetricPrivateKey?> TryGetAsymmetricPrivateAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricPrivateKey> Key | Edit this page View Source TryGetAsymmetricPublic(in string) Try getting a key Declaration public IAsymmetricPublicKey? TryGetAsymmetricPublic(in string name) Parameters Type Name Description string name Name Returns Type Description IAsymmetricPublicKey Key | Edit this page View Source TryGetAsymmetricPublicAsync(string, CancellationToken) Try getting a key Declaration public Task<IAsymmetricPublicKey?> TryGetAsymmetricPublicAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricPublicKey> Key | Edit this page View Source TryGetOptions(in string) Try getting options Declaration public CryptoOptions? TryGetOptions(in string name) Parameters Type Name Description string name Name Returns Type Description CryptoOptions Options | Edit this page View Source TryGetOptionsAsync(string, CancellationToken) Try getting options Declaration public Task<CryptoOptions?> TryGetOptionsAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<CryptoOptions> Options | Edit this page View Source TryGetPakeRecord(in string) Try getting a key Declaration public PakeRecord? TryGetPakeRecord(in string name) Parameters Type Name Description string name Name Returns Type Description PakeRecord Key | Edit this page View Source TryGetPakeRecordAsync(string, CancellationToken) Try getting a key Declaration public Task<PakeRecord?> TryGetPakeRecordAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRecord> Key | Edit this page View Source TryGetPakeRecordStore(in string) Try getting a key Declaration public PakeRecordStore? TryGetPakeRecordStore(in string name) Parameters Type Name Description string name Name Returns Type Description PakeRecordStore Key | Edit this page View Source TryGetPakeRecordStoreAsync(string, CancellationToken) Try getting a key Declaration public Task<PakeRecordStore?> TryGetPakeRecordStoreAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRecordStore> Key | Edit this page View Source TryGetPki(in string) Try getting a key Declaration public SignedPkiStore? TryGetPki(in string name) Parameters Type Name Description string name Name Returns Type Description SignedPkiStore Key | Edit this page View Source TryGetPkiAsync(string, CancellationToken) Try getting a key Declaration public Task<SignedPkiStore?> TryGetPkiAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<SignedPkiStore> Key | Edit this page View Source TryGetPrivateKey(in string) Try getting a key Declaration public PrivateKeySuite? TryGetPrivateKey(in string name) Parameters Type Name Description string name Name Returns Type Description PrivateKeySuite Key | Edit this page View Source TryGetPrivateKeyAsync(string, CancellationToken) Try getting a key Declaration public Task<PrivateKeySuite?> TryGetPrivateKeyAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PrivateKeySuite> Key | Edit this page View Source TryGetPrivateKeySuites(in string) Try getting a key Declaration public PrivateKeySuiteStore? TryGetPrivateKeySuites(in string name) Parameters Type Name Description string name Name Returns Type Description PrivateKeySuiteStore Key | Edit this page View Source TryGetPrivateKeySuitesAsync(string, CancellationToken) Try getting a key Declaration public Task<PrivateKeySuiteStore?> TryGetPrivateKeySuitesAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PrivateKeySuiteStore> Key | Edit this page View Source TryGetPublicKey(in string) Try getting a key Declaration public PublicKeySuite? TryGetPublicKey(in string name) Parameters Type Name Description string name Name Returns Type Description PublicKeySuite Key | Edit this page View Source TryGetPublicKeyAsync(string, CancellationToken) Try getting a key Declaration public Task<PublicKeySuite?> TryGetPublicKeyAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PublicKeySuite> Key | Edit this page View Source TryGetPublicKeySuites(in string) Try getting a key Declaration public PublicKeySuiteStore? TryGetPublicKeySuites(in string name) Parameters Type Name Description string name Name Returns Type Description PublicKeySuiteStore Key | Edit this page View Source TryGetPublicKeySuitesAsync(string, CancellationToken) Try getting a key Declaration public Task<PublicKeySuiteStore?> TryGetPublicKeySuitesAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PublicKeySuiteStore> Key | Edit this page View Source TryGetSymmetric(in string) Try getting a key Declaration public byte[]? TryGetSymmetric(in string name) Parameters Type Name Description string name Name Returns Type Description byte[] Key | Edit this page View Source TryGetSymmetricAsync(string, CancellationToken) Try getting a key Declaration public Task<byte[]?> TryGetSymmetricAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Key | Edit this page View Source TryRemoveAsymmetric(in string) Try removing a key Declaration public IAsymmetricKey? TryRemoveAsymmetric(in string name) Parameters Type Name Description string name Name Returns Type Description IAsymmetricKey Removed key (don't forget to dispose) | Edit this page View Source TryRemoveAsymmetricAsync(string, CancellationToken) Try removing a key Declaration public Task<IAsymmetricKey?> TryRemoveAsymmetricAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<IAsymmetricKey> Removed key (don't forget to dispose) | Edit this page View Source TryRemoveOptions(in string) Try removing opions Declaration public CryptoOptions? TryRemoveOptions(in string name) Parameters Type Name Description string name Name Returns Type Description CryptoOptions Removed options | Edit this page View Source TryRemoveOptionsAsync(string, CancellationToken) Try removing opions Declaration public Task<CryptoOptions?> TryRemoveOptionsAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<CryptoOptions> Removed options | Edit this page View Source TryRemovePakeRecord(in string) Try removing a key Declaration public PakeRecord? TryRemovePakeRecord(in string name) Parameters Type Name Description string name Name Returns Type Description PakeRecord Removed key (don't forget to dispose) | Edit this page View Source TryRemovePakeRecordAsnyc(string, CancellationToken) Try removing a key Declaration public Task<PakeRecord?> TryRemovePakeRecordAsnyc(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRecord> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePakeRecordStore(in string) Try removing a key Declaration public PakeRecordStore? TryRemovePakeRecordStore(in string name) Parameters Type Name Description string name Name Returns Type Description PakeRecordStore Removed key (don't forget to dispose) | Edit this page View Source TryRemovePakeRecordStoreAsync(string, CancellationToken) Try removing a key Declaration public Task<PakeRecordStore?> TryRemovePakeRecordStoreAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRecordStore> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePki(in string) Try removing a key Declaration public SignedPkiStore? TryRemovePki(in string name) Parameters Type Name Description string name Name Returns Type Description SignedPkiStore Removed key (don't forget to dispose) | Edit this page View Source TryRemovePkiAsync(string, CancellationToken) Try removing a key Declaration public Task<SignedPkiStore?> TryRemovePkiAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<SignedPkiStore> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePrivateKeySuite(in string) Try removing a key Declaration public PrivateKeySuite? TryRemovePrivateKeySuite(in string name) Parameters Type Name Description string name Name Returns Type Description PrivateKeySuite Removed key (don't forget to dispose) | Edit this page View Source TryRemovePrivateKeySuiteAsync(string, CancellationToken) Try removing a key Declaration public Task<PrivateKeySuite?> TryRemovePrivateKeySuiteAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PrivateKeySuite> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePrivateKeySuiteStore(in string) Try removing a key Declaration public PrivateKeySuiteStore? TryRemovePrivateKeySuiteStore(in string name) Parameters Type Name Description string name Name Returns Type Description PrivateKeySuiteStore Removed key (don't forget to dispose) | Edit this page View Source TryRemovePrivateKeySuiteStoreAsync(string, CancellationToken) Try removing a key Declaration public Task<PrivateKeySuiteStore?> TryRemovePrivateKeySuiteStoreAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PrivateKeySuiteStore> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePublicKeySuite(in string) Try removing a key Declaration public PublicKeySuite? TryRemovePublicKeySuite(in string name) Parameters Type Name Description string name Name Returns Type Description PublicKeySuite Removed key (don't forget to dispose) | Edit this page View Source TryRemovePublicKeySuiteAsync(string, CancellationToken) Try removing a key Declaration public Task<PublicKeySuite?> TryRemovePublicKeySuiteAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PublicKeySuite> Removed key (don't forget to dispose) | Edit this page View Source TryRemovePublicKeySuiteStore(in string) Try removing a key Declaration public PublicKeySuiteStore? TryRemovePublicKeySuiteStore(in string name) Parameters Type Name Description string name Name Returns Type Description PublicKeySuiteStore Removed key (don't forget to dispose) | Edit this page View Source TryRemovePublicKeySuiteStoreAsync(string, CancellationToken) Try removing a key Declaration public Task<PublicKeySuiteStore?> TryRemovePublicKeySuiteStoreAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<PublicKeySuiteStore> Removed key (don't forget to dispose) | Edit this page View Source TryRemoveSymmetric(in string) Try removing a key Declaration public byte[]? TryRemoveSymmetric(in string name) Parameters Type Name Description string name Name Returns Type Description byte[] Removed key (don't forget to clear) | Edit this page View Source TryRemoveSymmetricAsync(string, CancellationToken) Try removing a key Declaration public Task<byte[]?> TryRemoveSymmetricAsync(string name, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Removed key (don't forget to clear) | Edit this page View Source TryUpdate(in string, in byte[], out byte[]?) Try updating a key Declaration public bool TryUpdate(in string name, in byte[] key, out byte[]? existing) Parameters Type Name Description string name Name byte[] key Key (will be cleared) byte[] existing Existing key (don't forget to clear) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in CryptoOptions, out CryptoOptions?) Try updating options Declaration public bool TryUpdate(in string name, in CryptoOptions options, out CryptoOptions? existing) Parameters Type Name Description string name Name CryptoOptions options Options CryptoOptions existing Existing options Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in IAsymmetricKey, out IAsymmetricKey?) Try updating a key Declaration public bool TryUpdate(in string name, in IAsymmetricKey key, out IAsymmetricKey? existing) Parameters Type Name Description string name Name IAsymmetricKey key Key (will be disposed) IAsymmetricKey existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PakeRecord, out PakeRecord?) Try updating a key Declaration public bool TryUpdate(in string name, in PakeRecord key, out PakeRecord? existing) Parameters Type Name Description string name Name PakeRecord key Key (will be disposed) PakeRecord existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PakeRecordStore, out PakeRecordStore?) Try updating a key Declaration public bool TryUpdate(in string name, in PakeRecordStore key, out PakeRecordStore? existing) Parameters Type Name Description string name Name PakeRecordStore key Key (will be disposed) PakeRecordStore existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PrivateKeySuite, out PrivateKeySuite?) Try updating a key Declaration public bool TryUpdate(in string name, in PrivateKeySuite key, out PrivateKeySuite? existing) Parameters Type Name Description string name Name PrivateKeySuite key Key (will be disposed) PrivateKeySuite existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PrivateKeySuiteStore, out PrivateKeySuiteStore?) Try updating a key Declaration public bool TryUpdate(in string name, in PrivateKeySuiteStore key, out PrivateKeySuiteStore? existing) Parameters Type Name Description string name Name PrivateKeySuiteStore key Key (will be disposed) PrivateKeySuiteStore existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PublicKeySuite, out PublicKeySuite?) Try updating a key Declaration public bool TryUpdate(in string name, in PublicKeySuite key, out PublicKeySuite? existing) Parameters Type Name Description string name Name PublicKeySuite key Key (will be disposed) PublicKeySuite existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in PublicKeySuiteStore, out PublicKeySuiteStore?) Try updating a key Declaration public bool TryUpdate(in string name, in PublicKeySuiteStore key, out PublicKeySuiteStore? existing) Parameters Type Name Description string name Name PublicKeySuiteStore key Key (will be disposed) PublicKeySuiteStore existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdate(in string, in SignedPkiStore, out SignedPkiStore?) Try updating a key Declaration public bool TryUpdate(in string name, in SignedPkiStore key, out SignedPkiStore? existing) Parameters Type Name Description string name Name SignedPkiStore key Key (will be disposed) SignedPkiStore existing Existing key (don't forget to dispose) Returns Type Description bool If updated | Edit this page View Source TryUpdateAsync(string, byte[], CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<byte[]>> TryUpdateAsync(string name, byte[] key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name byte[] key Key (will be cleared) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<byte[]>> Result (don't forget to clear) | Edit this page View Source TryUpdateAsync(string, CryptoOptions, CancellationToken) Try updating options Declaration public Task<TryAsyncResult<CryptoOptions>> TryUpdateAsync(string name, CryptoOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<CryptoOptions>> If updated | Edit this page View Source TryUpdateAsync(string, IAsymmetricKey, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<IAsymmetricKey>> TryUpdateAsync(string name, IAsymmetricKey key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name IAsymmetricKey key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<IAsymmetricKey>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PakeRecord, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PakeRecord>> TryUpdateAsync(string name, PakeRecord key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PakeRecord key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PakeRecord>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PakeRecordStore, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PakeRecordStore>> TryUpdateAsync(string name, PakeRecordStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PakeRecordStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PakeRecordStore>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PrivateKeySuite, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PrivateKeySuite>> TryUpdateAsync(string name, PrivateKeySuite key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PrivateKeySuite key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PrivateKeySuite>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PrivateKeySuiteStore, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PrivateKeySuiteStore>> TryUpdateAsync(string name, PrivateKeySuiteStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PrivateKeySuiteStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PrivateKeySuiteStore>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PublicKeySuite, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PublicKeySuite>> TryUpdateAsync(string name, PublicKeySuite key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PublicKeySuite key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PublicKeySuite>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, PublicKeySuiteStore, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<PublicKeySuiteStore>> TryUpdateAsync(string name, PublicKeySuiteStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name PublicKeySuiteStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<PublicKeySuiteStore>> If updated (don't forget to dispose) | Edit this page View Source TryUpdateAsync(string, SignedPkiStore, CancellationToken) Try updating a key Declaration public Task<TryAsyncResult<SignedPkiStore>> TryUpdateAsync(string name, SignedPkiStore key, CancellationToken cancellationToken = default) Parameters Type Name Description string name Name SignedPkiStore key Key (will be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<SignedPkiStore>> If updated (don't forget to dispose) Operators | Edit this page View Source explicit operator KeyRing(byte[]) Cast from serialized data Declaration public static explicit operator KeyRing(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description KeyRing | Edit this page View Source implicit operator byte[](KeyRing) Cast as serialized data Declaration public static implicit operator byte[](KeyRing suite) Parameters Type Name Description KeyRing suite Private key suite Returns Type Description byte[] Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject"
  },
  "api/wan24.Crypto.KeyTypes.html": {
    "href": "api/wan24.Crypto.KeyTypes.html",
    "title": "Enum KeyTypes | wan24-Crypto",
    "keywords": "Enum KeyTypes Key types enumeration Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum KeyTypes : byte Fields Name Description Asymmetric Asymmetric key AsymmetricPrivate Asymmetric private key (IAsymmetricPrivateKey) AsymmetricPublic Asymmetric public key (IAsymmetricPublicKey) FLAGS All flags None None Options Crypto options (CryptoOptions) Pake PAKE record (PakeRecord) PakeStore PAKE record store (PakeRecordStore) Pki PKI (SignedPkiStore) Private Private key PrivateSuite Private suite (PrivateKeySuite) PrivateSuiteStore Private site store (PrivateKeySuiteStore) Public Public key PublicSuite Public suite (PublicKeySuite) PublicSuiteStore Public suite store (PublicKeySuiteStore) Store Key store Suite Key suite Symmetric Symmetric key (byte sequence) Extension Methods CryptoExtensions.IsPrivate(KeyTypes) CryptoExtensions.IsPublic(KeyTypes) CryptoExtensions.IsStore(KeyTypes)"
  },
  "api/wan24.Crypto.MacAlgorithmBase.html": {
    "href": "api/wan24.Crypto.MacAlgorithmBase.html",
    "title": "Class MacAlgorithmBase | wan24-Crypto",
    "keywords": "Class MacAlgorithmBase Base class for an MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha1Algorithm MacHmacSha256Algorithm MacHmacSha384Algorithm MacHmacSha3_256Algorithm MacHmacSha3_384Algorithm MacHmacSha3_512Algorithm MacHmacSha512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> Inherited Members CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record MacAlgorithmBase : CryptoAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase> Constructors | Edit this page View Source MacAlgorithmBase(string, int) Constructor Declaration protected MacAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Fields | Edit this page View Source _DefaultOptions Default options Declaration protected readonly CryptoOptions _DefaultOptions Field Value Type Description CryptoOptions Properties | Edit this page View Source DefaultOptions Default options Declaration public CryptoOptions DefaultOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source MacLength MAC length in bytes Declaration public abstract int MacLength { get; } Property Value Type Description int | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides CryptoAlgorithmBase.State Methods | Edit this page View Source EnsureDefaultOptions(CryptoOptions?) Ensure that the given options include the default options for this algorithm Declaration public virtual CryptoOptions EnsureDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetMacAlgorithm(byte[], CryptoOptions?) Get the MAC algorithm Declaration public virtual KeyedHashAlgorithm GetMacAlgorithm(byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected abstract KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm | Edit this page View Source GetMacStream(byte[], Stream?, bool, CryptoOptions?) Get a MAC stream Declaration public virtual MacStreams GetMacStream(byte[] pwd, Stream? target = null, bool writable = true, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password Stream target Target stream bool writable Writable? CryptoOptions options Options Returns Type Description MacStreams MAC stream and crypto transform | Edit this page View Source Mac(Stream, byte[], CryptoOptions?) Create an MAC Declaration public virtual byte[] Mac(Stream data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Stream data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions?) Create an MAC Declaration public virtual Span<byte> Mac(ReadOnlySpan<byte> data, byte[] pwd, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data byte[] pwd Password Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> MAC | Edit this page View Source Mac(ReadOnlySpan<byte>, byte[], CryptoOptions?) Create an MAC Declaration public virtual byte[] Mac(ReadOnlySpan<byte> data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) Create an MAC Declaration public virtual Task<byte[]> MacAsync(Stream data, byte[] pwd, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> MAC Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacExtensions.html": {
    "href": "api/wan24.Crypto.MacExtensions.html",
    "title": "Class MacExtensions | wan24-Crypto",
    "keywords": "Class MacExtensions MAC extensions Inheritance object MacExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class MacExtensions Methods | Edit this page View Source Mac(Memory<byte>, byte[], Span<byte>, CryptoOptions?) Create a MAC Declaration public static Span<byte> Mac(this Memory<byte> data, byte[] pwd, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> data Data byte[] pwd Password Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> MAC | Edit this page View Source Mac(Memory<byte>, byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this Memory<byte> data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Memory<byte> data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source Mac(ReadOnlyMemory<byte>, byte[], Span<byte>, CryptoOptions?) Create a MAC Declaration public static Span<byte> Mac(this ReadOnlyMemory<byte> data, byte[] pwd, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data byte[] pwd Password Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> MAC | Edit this page View Source Mac(ReadOnlyMemory<byte>, byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this ReadOnlyMemory<byte> data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlyMemory<byte> data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source Mac(Span<byte>, byte[], Span<byte>, CryptoOptions?) Create a MAC Declaration public static Span<byte> Mac(this Span<byte> data, byte[] pwd, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description Span<byte> data Data byte[] pwd Password Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> MAC | Edit this page View Source Mac(Span<byte>, byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this Span<byte> data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Span<byte> data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC"
  },
  "api/wan24.Crypto.MacHelper.html": {
    "href": "api/wan24.Crypto.MacHelper.html",
    "title": "Class MacHelper | wan24-Crypto",
    "keywords": "Class MacHelper MAC helper Inheritance object MacHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class MacHelper Fields | Edit this page View Source Algorithms Registered MAC algorithms Declaration public static readonly ConcurrentDictionary<string, MacAlgorithmBase> Algorithms Field Value Type Description ConcurrentDictionary<string, MacAlgorithmBase> Properties | Edit this page View Source DefaultAlgorithm Default MAC algorithm Declaration public static MacAlgorithmBase DefaultAlgorithm { get; set; } Property Value Type Description MacAlgorithmBase | Edit this page View Source PostQuantum Post-quantum algorithms Declaration public static IEnumerable<MacAlgorithmBase> PostQuantum { get; } Property Value Type Description IEnumerable<MacAlgorithmBase> | Edit this page View Source PreQuantum Pre-quantum algorithms Declaration public static IEnumerable<MacAlgorithmBase> PreQuantum { get; } Property Value Type Description IEnumerable<MacAlgorithmBase> | Edit this page View Source SyncObject An object for thread synchronization Declaration public static object SyncObject { get; } Property Value Type Description object | Edit this page View Source TpmAlgorithms TPM algorithms Declaration public static IEnumerable<MacAlgorithmBase> TpmAlgorithms { get; } Property Value Type Description IEnumerable<MacAlgorithmBase> Methods | Edit this page View Source GetAlgorithm(int) Get an algorithm Declaration public static MacAlgorithmBase GetAlgorithm(int value) Parameters Type Name Description int value Algorithm value Returns Type Description MacAlgorithmBase Algorithm | Edit this page View Source GetAlgorithm(string) Get an algorithm Declaration public static MacAlgorithmBase GetAlgorithm(string name) Parameters Type Name Description string name Algorithm name Returns Type Description MacAlgorithmBase Algorithm | Edit this page View Source GetAlgorithmName(int, params string[]) Get the matching MAC algorithm for a digest length Declaration public static string GetAlgorithmName(int len, params string[] allowedAlgos) Parameters Type Name Description int len Digest length in byte string[] allowedAlgos Allowed MAC algorithm names Returns Type Description string MAC algorithm name | Edit this page View Source GetDefaultOptions(CryptoOptions?) Get the default options used by the MAC helper Declaration public static CryptoOptions GetDefaultOptions(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Options Returns Type Description CryptoOptions Options | Edit this page View Source GetMacStream(byte[], Stream?, bool, CryptoOptions?) Get a MAC stream Declaration public static MacStreams GetMacStream(byte[] pwd, Stream? target = null, bool writable = true, CryptoOptions? options = null) Parameters Type Name Description byte[] pwd Password Stream target Target stream bool writable Writable? CryptoOptions options Options Returns Type Description MacStreams MAC streams | Edit this page View Source Mac(byte[], byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this byte[] data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description byte[] data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source Mac(Stream, byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this Stream data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description Stream data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions?) Create a MAC Declaration public static Span<byte> Mac(this ReadOnlySpan<byte> data, byte[] pwd, Span<byte> outputBuffer, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data byte[] pwd Password Span<byte> outputBuffer Output buffer CryptoOptions options Options Returns Type Description Span<byte> MAC | Edit this page View Source Mac(ReadOnlySpan<byte>, byte[], CryptoOptions?) Create a MAC Declaration public static byte[] Mac(this ReadOnlySpan<byte> data, byte[] pwd, CryptoOptions? options = null) Parameters Type Name Description ReadOnlySpan<byte> data Data byte[] pwd Password CryptoOptions options Options Returns Type Description byte[] MAC | Edit this page View Source MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) Create a MAC Declaration public static Task<byte[]> MacAsync(this Stream data, byte[] pwd, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Data byte[] pwd Password CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> MAC | Edit this page View Source TryGetAlgorithmName(int, out string?, params string[]) Get the matching MAC algorithm for a digest length Declaration public static bool TryGetAlgorithmName(int len, out string? algo, params string[] allowedAlgos) Parameters Type Name Description int len Digest length in byte string algo MAC algorithm name string[] allowedAlgos Allowed MAC algorithm names Returns Type Description bool If succeed"
  },
  "api/wan24.Crypto.MacHmacSha1Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha1Algorithm.html",
    "title": "Class MacHmacSha1Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha1Algorithm HMAC-SHA1 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha1Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha1Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha1Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha1Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA1\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA1\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 20 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha1Algorithm Instance { get; } Property Value Type Description MacHmacSha1Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha256Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha256Algorithm.html",
    "title": "Class MacHmacSha256Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha256Algorithm HMAC-SHA256 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha256Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha256Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 1 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA256\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha256Algorithm Instance { get; } Property Value Type Description MacHmacSha256Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha384Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha384Algorithm.html",
    "title": "Class MacHmacSha384Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha384Algorithm HMAC-SHA384 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha384Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha384Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 2 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA384\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha384Algorithm Instance { get; } Property Value Type Description MacHmacSha384Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha3_256Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha3_256Algorithm.html",
    "title": "Class MacHmacSha3_256Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha3_256Algorithm HMAC-SHA3-256 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha3_256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha3_256Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha3_256Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha3_256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 4 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-256\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha3_256Algorithm Instance { get; } Property Value Type Description MacHmacSha3_256Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha3_384Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha3_384Algorithm.html",
    "title": "Class MacHmacSha3_384Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha3_384Algorithm HMAC-SHA3-384 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha3_384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha3_384Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha3_384Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha3_384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-384\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha3_384Algorithm Instance { get; } Property Value Type Description MacHmacSha3_384Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha3_512Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha3_512Algorithm.html",
    "title": "Class MacHmacSha3_512Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha3_512Algorithm HMAC-SHA3-512 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha3_512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha3_512Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha3_512Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha3_512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-512\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha3_512Algorithm Instance { get; } Property Value Type Description MacHmacSha3_512Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IsSupported Is supported? Declaration public override bool IsSupported { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsSupported | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacHmacSha512Algorithm.html": {
    "href": "api/wan24.Crypto.MacHmacSha512Algorithm.html",
    "title": "Class MacHmacSha512Algorithm | wan24-Crypto",
    "keywords": "Class MacHmacSha512Algorithm HMAC-SHA512 MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase MacHmacSha512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<MacHmacSha512Algorithm> Inherited Members MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacHmacSha512Algorithm : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<MacHmacSha512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 3 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA512\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides CryptoAlgorithmBase.DisplayName | Edit this page View Source Instance Instance Declaration public static MacHmacSha512Algorithm Instance { get; } Property Value Type Description MacHmacSha512Algorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions?) Implements ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacSignature.html": {
    "href": "api/wan24.Crypto.MacSignature.html",
    "title": "Class MacSignature | wan24-Crypto",
    "keywords": "Class MacSignature MAC signature helper Inheritance object DisposableRecordBase MacSignature Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<MacSignature> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacSignature : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<MacSignature> Constructors | Edit this page View Source MacSignature(in byte[], in bool, in CryptoOptions?) Constructor Declaration public MacSignature(in byte[] key, in bool isSharedKey, in CryptoOptions? options = null) Parameters Type Name Description byte[] key Key (won't be cleared, if it's not the shared key) bool isSharedKey Is the key the shared key? CryptoOptions options Options (won't be cleared) Properties | Edit this page View Source Options Options Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions | Edit this page View Source SharedKey Shared key (should be stored encrypted at the validator!) Declaration [SensitiveData] [NoValidation(false)] public SecureByteArray SharedKey { get; } Property Value Type Description SecureByteArray Methods | Edit this page View Source AuthenticateSignedData(in ReadOnlySpan<byte>, in ReadOnlySpan<byte>) Authenticate signed data (won't authenticate the signer!) Declaration public static bool AuthenticateSignedData(in ReadOnlySpan<byte> signedData, in ReadOnlySpan<byte> dataSignature) Parameters Type Name Description ReadOnlySpan<byte> signedData Signed data ReadOnlySpan<byte> dataSignature Signature Returns Type Description bool If the signature is valid for the signed data (won't authenticate the signer!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source Sign(in ReadOnlySpan<byte>) Create a signature Declaration public byte[] Sign(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data to sign Returns Type Description byte[] Signature | Edit this page View Source SignAsync(ReadOnlyMemory<byte>) Create a signature Declaration public Task<byte[]> SignAsync(ReadOnlyMemory<byte> data) Parameters Type Name Description ReadOnlyMemory<byte> data Data to sign Returns Type Description Task<byte[]> Signature | Edit this page View Source Validate(in ReadOnlySpan<byte>, in ReadOnlySpan<byte>) Validate a signature (and authenticate the signer) Declaration public bool Validate(in ReadOnlySpan<byte> signedData, in ReadOnlySpan<byte> dataSignature) Parameters Type Name Description ReadOnlySpan<byte> signedData Signed data ReadOnlySpan<byte> dataSignature Signature Returns Type Description bool If the signature is valid for the signed data, and the signer is authenticated Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.MacStreams.html": {
    "href": "api/wan24.Crypto.MacStreams.html",
    "title": "Class MacStreams | wan24-Crypto",
    "keywords": "Class MacStreams MAC streams Inheritance object DisposableRecordBase MacStreams Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IEquatable<MacStreams> Inherited Members DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record MacStreams : DisposableRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IEquatable<MacStreams> Constructors | Edit this page View Source MacStreams(in CryptoStream, in KeyedHashAlgorithm) Constructor Declaration public MacStreams(in CryptoStream stream, in KeyedHashAlgorithm transform) Parameters Type Name Description CryptoStream stream Stream KeyedHashAlgorithm transform Transform Properties | Edit this page View Source Mac MAC Declaration public byte[] Mac { get; } Property Value Type Description byte[] | Edit this page View Source Stream Stream Declaration public CryptoStream Stream { get; } Property Value Type Description CryptoStream | Edit this page View Source Transform Transform Declaration public KeyedHashAlgorithm Transform { get; } Property Value Type Description KeyedHashAlgorithm Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source FinalizeMac(in bool) Finalize the MAC Declaration public void FinalizeMac(in bool transformFinal = true) Parameters Type Name Description bool transformFinal Transform the final block? | Edit this page View Source FinalizeMacAsync(bool) Finalize the MAC Declaration public Task FinalizeMacAsync(bool transformFinal = true) Parameters Type Name Description bool transformFinal Transform the final block? Returns Type Description Task Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.NetKeyExtensions.html": {
    "href": "api/wan24.Crypto.NetKeyExtensions.html",
    "title": "Class NetKeyExtensions | wan24-Crypto",
    "keywords": "Class NetKeyExtensions .NET asymmetric keys extensions Inheritance object NetKeyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class NetKeyExtensions Methods | Edit this page View Source GetAsymmetricAlgorithm(AsymmetricAlgorithm) Get the asymmetric algorithm Declaration public static IAsymmetricAlgorithm? GetAsymmetricAlgorithm(this AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Algorithm Returns Type Description IAsymmetricAlgorithm Algorithm | Edit this page View Source GetAsymmetricPrivateKey(AsymmetricAlgorithm) Get a private key instance Declaration public static IAsymmetricPrivateKey GetAsymmetricPrivateKey(this AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Algorithm Returns Type Description IAsymmetricPrivateKey Private key (don't forget to dispose!) | Edit this page View Source GetAsymmetricPublicKey(AsymmetricAlgorithm) Get a public key instance Declaration public static IAsymmetricPublicKey GetAsymmetricPublicKey(this AsymmetricAlgorithm algo) Parameters Type Name Description AsymmetricAlgorithm algo Algorithm Returns Type Description IAsymmetricPublicKey Public key (don't forget to dispose!)"
  },
  "api/wan24.Crypto.NetShake128HashAlgorithmAdapter.html": {
    "href": "api/wan24.Crypto.NetShake128HashAlgorithmAdapter.html",
    "title": "Class NetShake128HashAlgorithmAdapter | wan24-Crypto",
    "keywords": "Class NetShake128HashAlgorithmAdapter .NET HashAlgorithm adapter for Shake128 Inheritance object HashAlgorithm NetShake128HashAlgorithmAdapter Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class NetShake128HashAlgorithmAdapter : HashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source NetShake128HashAlgorithmAdapter(int) Constructor Declaration public NetShake128HashAlgorithmAdapter(int outputLength = 32) Parameters Type Name Description int outputLength Output length in bytes (a multiple of 8) Properties | Edit this page View Source CanReuseTransform Gets a value indicating whether the current transform can be reused. Declaration public override bool CanReuseTransform { get; } Property Value Type Description bool Always true. Overrides HashAlgorithm.CanReuseTransform Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the HashAlgorithm and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides HashAlgorithm.Dispose(bool) | Edit this page View Source HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) | Edit this page View Source HashCore(ReadOnlySpan<byte>) Routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source The input to compute the hash code for. Overrides HashAlgorithm.HashCore(ReadOnlySpan<byte>) | Edit this page View Source HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic hash algorithm. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() | Edit this page View Source Initialize() Resets the hash algorithm to its initial state. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() | Edit this page View Source TryHashFinal(Span<byte>, out int) Attempts to finalize the hash computation after the last data is processed by the hash algorithm. Declaration protected override bool TryHashFinal(Span<byte> destination, out int bytesWritten) Parameters Type Name Description Span<byte> destination The buffer to receive the hash value. int bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description bool true if destination is long enough to receive the hash value; otherwise, false. Overrides HashAlgorithm.TryHashFinal(Span<byte>, out int) Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.NetShake256HashAlgorithmAdapter.html": {
    "href": "api/wan24.Crypto.NetShake256HashAlgorithmAdapter.html",
    "title": "Class NetShake256HashAlgorithmAdapter | wan24-Crypto",
    "keywords": "Class NetShake256HashAlgorithmAdapter .NET HashAlgorithm adapter for Shake256 Inheritance object HashAlgorithm NetShake256HashAlgorithmAdapter Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class NetShake256HashAlgorithmAdapter : HashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source NetShake256HashAlgorithmAdapter(int) Constructor Declaration public NetShake256HashAlgorithmAdapter(int outputLength = 64) Parameters Type Name Description int outputLength Output length in bytes (a multiple of 8) Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the HashAlgorithm and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides HashAlgorithm.Dispose(bool) | Edit this page View Source HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) | Edit this page View Source HashCore(ReadOnlySpan<byte>) Routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source The input to compute the hash code for. Overrides HashAlgorithm.HashCore(ReadOnlySpan<byte>) | Edit this page View Source HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic hash algorithm. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() | Edit this page View Source Initialize() Resets the hash algorithm to its initial state. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() | Edit this page View Source TryHashFinal(Span<byte>, out int) Attempts to finalize the hash computation after the last data is processed by the hash algorithm. Declaration protected override bool TryHashFinal(Span<byte> destination, out int bytesWritten) Parameters Type Name Description Span<byte> destination The buffer to receive the hash value. int bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description bool true if destination is long enough to receive the hash value; otherwise, false. Overrides HashAlgorithm.TryHashFinal(Span<byte>, out int) Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.ObjectEncryption.html": {
    "href": "api/wan24.Crypto.ObjectEncryption.html",
    "title": "Class ObjectEncryption | wan24-Crypto",
    "keywords": "Class ObjectEncryption Object encryption helper Inheritance object ObjectEncryption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class ObjectEncryption Methods | Edit this page View Source AutoDecryptObject<T>(T, in CryptoOptions?) Decrypt raw property values (EncryptAttribute) using the data encryption key (DEK; DekAttribute) property value Declaration public static T AutoDecryptObject<T>(this T obj, in CryptoOptions? options = null) where T : IEncryptPropertiesKek Parameters Type Name Description T obj Object CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source AutoEncryptObject<T>(T, in int, in CryptoOptions?) Encrypt raw property values (EncryptAttribute) and the data encryption key (DEK; DekAttribute) property value Declaration public static T AutoEncryptObject<T>(this T obj, in int dekLength = 0, in CryptoOptions? options = null) where T : IEncryptPropertiesKek Parameters Type Name Description T obj Object int dekLength Generated DEK length in bytes (or 0 to use the Length value) CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source DecryptObject<T>(T, in byte[]?, in byte[]?, in CryptoOptions?) Decrypt raw property values (EncryptAttribute) optional using the data encryption key (DEK; DekAttribute) property value Declaration public static T DecryptObject<T>(this T obj, in byte[]? pwd = null, in byte[]? dataEncryptionKey = null, in CryptoOptions? options = null) where T : IEncryptProperties Parameters Type Name Description T obj Object byte[] pwd Key encryption key (KEK; required when there's a DEK property) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source DecryptProperties<T>(in T, in byte[]?, in byte[]?, in CryptoOptions?) Decrypt raw property values (EncryptAttribute) optional using the data encryption key (DEK; DekAttribute) property value Declaration public static T DecryptProperties<T>(in T obj, in byte[]? pwd = null, in byte[]? dataEncryptionKey = null, in CryptoOptions? options = null) where T : notnull Parameters Type Name Description T obj Object byte[] pwd Key encryption key (KEK; required when there's a DEK property) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source EncryptObject<T>(T, in byte[]?, in int, in byte[]?, in CryptoOptions?) Encrypt raw property values (EncryptAttribute) and optional the data encryption key (DEK; DekAttribute) property value Declaration public static T EncryptObject<T>(this T obj, in byte[]? pwd = null, in int dekLength = 0, in byte[]? dataEncryptionKey = null, in CryptoOptions? options = null) where T : IEncryptProperties Parameters Type Name Description T obj Object byte[] pwd Key encryption key (KEK; required when there's a DEK property) int dekLength Generated DEK length in bytes (or 0 to use the Length value) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source EncryptProperties<T>(in T, in byte[]?, int, in byte[]?, in CryptoOptions?) Encrypt raw property values (EncryptAttribute) and optional the data encryption key (DEK; DekAttribute) property value Declaration public static T EncryptProperties<T>(in T obj, in byte[]? pwd = null, int dekLength = 0, in byte[]? dataEncryptionKey = null, in CryptoOptions? options = null) where T : notnull Parameters Type Name Description T obj Object byte[] pwd Key encryption key (KEK; required when there's a DEK property) int dekLength Generated DEK length in bytes (or 0 to use the Length value) byte[] dataEncryptionKey DEK to use (no DEK property required) CryptoOptions options Options Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source GetDek<T>(T) Get the data encryption key (DEK) of an object (won't be decrypted!) Declaration public static byte[]? GetDek<T>(this T obj) where T : IEncryptProperties Parameters Type Name Description T obj Object Returns Type Description byte[] DEK Type Parameters Name Description T Object type | Edit this page View Source GetDek<T>(T, in byte[], in CryptoOptions?) Get the data encryption key (DEK) of an object Declaration public static byte[]? GetDek<T>(this T obj, in byte[] pwd, in CryptoOptions? options = null) where T : IEncryptProperties Parameters Type Name Description T obj Object byte[] pwd Key encryption key (KEK) CryptoOptions options Options Returns Type Description byte[] DEK Type Parameters Name Description T Object type | Edit this page View Source HasDek<T>(T) Determine if a DEK property is available Declaration public static bool HasDek<T>(this T obj) where T : IEncryptProperties Parameters Type Name Description T obj Object Returns Type Description bool If a DEK property is available Type Parameters Name Description T Object type"
  },
  "api/wan24.Crypto.Pake.PakeServerEventArgs.html": {
    "href": "api/wan24.Crypto.Pake.PakeServerEventArgs.html",
    "title": "Class Pake.PakeServerEventArgs | wan24-Crypto",
    "keywords": "Class Pake.PakeServerEventArgs PAKE server event arguments Inheritance object EventArgs Pake.PakeServerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class Pake.PakeServerEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source PakeServerEventArgs(in IPakeRequest, in byte[]?, in Exception?) PAKE server event arguments Declaration public PakeServerEventArgs(in IPakeRequest request, in byte[]? payload = null, in Exception? ex = null) Parameters Type Name Description IPakeRequest request Request byte[] payload Decrypted payload, if any Exception ex Exception Remarks Constructor Properties | Edit this page View Source Exception Exception Declaration public Exception? Exception { get; } Property Value Type Description Exception | Edit this page View Source NewIdentity New PAKE identity record to use for the current process (being ignored in case this instance is used as arguments for the OnAuthError event!) Declaration public IPakeRecord? NewIdentity { get; set; } Property Value Type Description IPakeRecord | Edit this page View Source Payload Decrypted payload, if any Declaration public byte[]? Payload { get; } Property Value Type Description byte[] | Edit this page View Source Request Request Declaration public IPakeRequest Request { get; } Property Value Type Description IPakeRequest"
  },
  "api/wan24.Crypto.Pake.PakeServer_Delegate.html": {
    "href": "api/wan24.Crypto.Pake.PakeServer_Delegate.html",
    "title": "Delegate Pake.PakeServer_Delegate | wan24-Crypto",
    "keywords": "Delegate Pake.PakeServer_Delegate Delegate for a PAKE server event handler delegate Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void Pake.PakeServer_Delegate(Pake pake, Pake.PakeServerEventArgs e) Parameters Type Name Description Pake pake PAKE Pake.PakeServerEventArgs e Arguments"
  },
  "api/wan24.Crypto.Pake.PayloadFactory_Delegate.html": {
    "href": "api/wan24.Crypto.Pake.PayloadFactory_Delegate.html",
    "title": "Delegate Pake.PayloadFactory_Delegate | wan24-Crypto",
    "keywords": "Delegate Pake.PayloadFactory_Delegate Payload factory delegate Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate byte[]? Pake.PayloadFactory_Delegate(Pake pake, byte[] random, byte[]? payload) Parameters Type Name Description Pake pake PAKE instance byte[] random Random data byte[] payload Given payload Returns Type Description byte[] Payload to use"
  },
  "api/wan24.Crypto.Pake.PayloadProcessor_Delegate.html": {
    "href": "api/wan24.Crypto.Pake.PayloadProcessor_Delegate.html",
    "title": "Delegate Pake.PayloadProcessor_Delegate | wan24-Crypto",
    "keywords": "Delegate Pake.PayloadProcessor_Delegate Payload processor (called after payload decryption to process the payload before returning) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate byte[] Pake.PayloadProcessor_Delegate(Pake pake, byte[] random, byte[] payload) Parameters Type Name Description Pake pake PAKE byte[] random Random data byte[] payload Payload Returns Type Description byte[] Payload to return (if this is the given payload, the return value should be a copy!)"
  },
  "api/wan24.Crypto.Pake.html": {
    "href": "api/wan24.Crypto.Pake.html",
    "title": "Class Pake | wan24-Crypto",
    "keywords": "Class Pake PAKE Inheritance object DisposableBase Pake Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IKeyExchange Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class Pake : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IKeyExchange Constructors | Edit this page View Source Pake(in CryptoOptions?, in CryptoOptions?) Constructor Declaration public Pake(in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null) Parameters Type Name Description CryptoOptions options Options with KDF and MAC settings (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) | Edit this page View Source Pake(in IPakeRecord, in CryptoOptions?, in CryptoOptions?) Constructor Declaration public Pake(in IPakeRecord identity, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null) Parameters Type Name Description IPakeRecord identity Identity (initializes server operations; will be cleared (and disposed, if possible)!) CryptoOptions options Options with KDF and MAC settings (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) | Edit this page View Source Pake(in ISymmetricKeySuite, in CryptoOptions?, in CryptoOptions?) Constructor Declaration public Pake(in ISymmetricKeySuite key, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null) Parameters Type Name Description ISymmetricKeySuite key Private key (requires an identifier; initializes client operations; will be disposed!) CryptoOptions options Options with KDF and MAC settings (will be cleared!) CryptoOptions cryptoOptions Options for encryption (will be cleared!) Properties | Edit this page View Source CryptoOptions Options for encryption settings (will be cleared!) Declaration public CryptoOptions CryptoOptions { get; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultCryptoOptions Default options for encryption (should/will be cleared!) Declaration public static CryptoOptions DefaultCryptoOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source DefaultOptions Default options (should/will be cleared!) Declaration public static CryptoOptions DefaultOptions { get; set; } Property Value Type Description CryptoOptions | Edit this page View Source HasSession Determine if this instance contains a session key Declaration public bool HasSession { get; } Property Value Type Description bool | Edit this page View Source Identifier Identifier (will be cleared!) Declaration public byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Identity Identity (will be cleared (and disposed, if possible)!) Declaration [SensitiveData] public IPakeRecord? Identity { get; } Property Value Type Description IPakeRecord | Edit this page View Source Options Options with KDF and MAC settings (will be cleared!) Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions | Edit this page View Source SessionKey Session key (available after signup/authentication; will be cleared!) Declaration [SensitiveData] public byte[] SessionKey { get; } Property Value Type Description byte[] | Edit this page View Source SkipSignatureKeyValidation Skip the signature key validation (KDF) during authentication? Declaration public static bool SkipSignatureKeyValidation { get; set; } Property Value Type Description bool Methods | Edit this page View Source ClearSessionKey() Clear the session key Declaration public void ClearSessionKey() | Edit this page View Source CreateAuth(byte[]?, in bool, in PayloadFactory_Delegate?) Create an authentication (client) Declaration public PakeAuth CreateAuth(byte[]? payload = null, in bool encryptPayload = false, in Pake.PayloadFactory_Delegate? payloadFactory = null) Parameters Type Name Description byte[] payload Payload (max. MaxValue length; will be cleared!) bool encryptPayload Encrypt the payload? Pake.PayloadFactory_Delegate payloadFactory Payload factory Returns Type Description PakeAuth Authentication (send this to the server and don't forget to dispose!) | Edit this page View Source CreateSignup(byte[]?, in PayloadFactory_Delegate?) Create a signup (client) Declaration public PakeSignup CreateSignup(byte[]? payload = null, in Pake.PayloadFactory_Delegate? payloadFactory = null) Parameters Type Name Description byte[] payload Payload (max. MaxValue length; will be cleared!) Pake.PayloadFactory_Delegate payloadFactory Payload factory Returns Type Description PakeSignup Signup (send this to the server and don't forget to dispose!) | Edit this page View Source DeriveSessionKey(in IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) Derive a session key Declaration public static (byte[] SessionKey, byte[] Payload) DeriveSessionKey(in IPakeRecord identity, in PakeAuth auth, in Action<Pake>? initializer = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in bool decryptPayload = false) Parameters Type Name Description IPakeRecord identity Identity (will be cleared/disposed!) PakeAuth auth Authentication (will be disposed!) Action<Pake> initializer PAKE instance initializer CryptoOptions options Options CryptoOptions cryptoOptions Options for encryption bool decryptPayload Decrypt the payload? Returns Type Description (byte[] Key, byte[] KeyExchangeData) Session key and payload | Edit this page View Source DeriveSessionKey(in PakeSignup, in Action<Pake>?, in CryptoOptions?) Derive a session key Declaration public static (byte[] SessionKey, byte[] Payload, IPakeRecord Identity) DeriveSessionKey(in PakeSignup signup, in Action<Pake>? initializer = null, in CryptoOptions? options = null) Parameters Type Name Description PakeSignup signup Signup (will be disposed!) Action<Pake> initializer PAKE instance initializer CryptoOptions options Options Returns Type Description (byte[] SessionKey, byte[] Payload, IPakeRecord Identity) Session key, payload and identity | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source HandleAuth(in IPakeRequest, in bool, in bool, in PayloadProcessor_Delegate?) Handle an authentication (server) Declaration public byte[] HandleAuth(in IPakeRequest auth, in bool decryptPayload = false, in bool skipSignatureKeyValidation = false, in Pake.PayloadProcessor_Delegate? payloadProcessor = null) Parameters Type Name Description IPakeRequest auth Authentication (will be disposed!) bool decryptPayload Decrypt the payload, if any? (for this the identity must be available already when calling this method!) bool skipSignatureKeyValidation Skip the signature key validation (KDF)? Pake.PayloadProcessor_Delegate payloadProcessor Payload processor Returns Type Description byte[] Payload Exceptions Type Condition InvalidDataException Invalid authentication record | Edit this page View Source HandleSignup(in PakeSignup, in PayloadProcessor_Delegate?) Handle a signup (server) Declaration public byte[] HandleSignup(in PakeSignup signup, in Pake.PayloadProcessor_Delegate? payloadProcessor = null) Parameters Type Name Description PakeSignup signup Signup (will be disposed!) Pake.PayloadProcessor_Delegate payloadProcessor Payload processor Returns Type Description byte[] Payload Exceptions Type Condition InvalidDataException Invalid signup record | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Events | Edit this page View Source OnAuth Raised on authentication Declaration public event Pake.PakeServer_Delegate? OnAuth Event Type Type Description Pake.PakeServer_Delegate | Edit this page View Source OnAuthError Raised on authentication Declaration public event Pake.PakeServer_Delegate? OnAuthError Event Type Type Description Pake.PakeServer_Delegate | Edit this page View Source OnSignup Raised on signup Declaration public event Pake.PakeServer_Delegate? OnSignup Event Type Type Description Pake.PakeServer_Delegate Operators | Edit this page View Source operator +(in Pake, in PakeAuth) Get the payload Declaration public static byte[] operator +(in Pake pake, in PakeAuth auth) Parameters Type Name Description Pake pake Pake PakeAuth auth PakeAuth (will be disposed!) Returns Type Description byte[] Payload | Edit this page View Source operator +(in Pake, in PakeSignup) Get the payload Declaration public static byte[] operator +(in Pake pake, in PakeSignup signup) Parameters Type Name Description Pake pake Pake PakeSignup signup PakeSignup (will be disposed!) Returns Type Description byte[] Payload | Edit this page View Source implicit operator bool(in Pake) Cast as existing session flag Declaration public static implicit operator bool(in Pake pake) Parameters Type Name Description Pake pake Pake Returns Type Description bool | Edit this page View Source implicit operator byte[](in Pake) Cast as session key (should be cleared!) Declaration public static implicit operator byte[](in Pake pake) Parameters Type Name Description Pake pake Pake Returns Type Description byte[] Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IKeyExchange"
  },
  "api/wan24.Crypto.PakeAuth.html": {
    "href": "api/wan24.Crypto.PakeAuth.html",
    "title": "Class PakeAuth | wan24-Crypto",
    "keywords": "Class PakeAuth PAKE authentication information (needs to be sent to the server, wrapped using a PFS protocol!) Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase PakeAuth Implements IWillDispose IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IPakeRequest IDisposableObject IDisposable IAsyncDisposable IEquatable<PakeAuth> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record PakeAuth : DisposableStreamSerializerRecordBase, IWillDispose, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IPakeRequest, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<PakeAuth> Constructors | Edit this page View Source PakeAuth() Constructor Declaration public PakeAuth() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Identifier Identifier Declaration [CountLimit(1, 255)] public byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Key Key (XORed with the signature key, when authenticating) Declaration [CountLimit(1, 255)] [SensitiveData] public byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source Payload Payload Declaration [CountLimit(0, 65535)] [SensitiveData] public byte[] Payload { get; } Property Value Type Description byte[] | Edit this page View Source Random Random bytes Declaration [CountLimit(1, 255)] public byte[] Random { get; } Property Value Type Description byte[] | Edit this page View Source Signature Signature Declaration [CountLimit(1, 255)] public byte[] Signature { get; } Property Value Type Description byte[] Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator PakeAuth(in byte[]) Cast from serialized data Declaration public static explicit operator PakeAuth(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description PakeAuth | Edit this page View Source implicit operator byte[](in PakeAuth) Cast as serialized data Declaration public static implicit operator byte[](in PakeAuth auth) Parameters Type Name Description PakeAuth auth PakeAuth Returns Type Description byte[] Implements wan24.Core.IWillDispose IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IPakeRequest wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T>"
  },
  "api/wan24.Crypto.PakeHttpRequestFactory-1.html": {
    "href": "api/wan24.Crypto.PakeHttpRequestFactory-1.html",
    "title": "Class PakeHttpRequestFactory<T> | wan24-Crypto",
    "keywords": "Class PakeHttpRequestFactory<T> PAKE http request factory Inheritance object DisposableBase PakeHttpRequestFactory<T> PakeHttpRequestFactory Implements IWillDispose IPakeHttpRequestFactory IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PakeHttpRequestFactory<T> : DisposableBase, IWillDispose, IPakeHttpRequestFactory, IDisposableObject, IDisposable, IAsyncDisposable where T : PakeRequest.PakeRequestDto Type Parameters Name Description T Pake request DTO type Remarks Constructor Constructors | Edit this page View Source PakeHttpRequestFactory(in byte[], in byte[]) Constructor Declaration public PakeHttpRequestFactory(in byte[] id, in byte[] key) Parameters Type Name Description byte[] id ID (will be cleared!) byte[] key Key (will be cleared!) | Edit this page View Source PakeHttpRequestFactory(in FastPakeAuthClient) PAKE http request factory Declaration public PakeHttpRequestFactory(in FastPakeAuthClient client) Parameters Type Name Description FastPakeAuthClient client PAKE client (will be disposed!) Remarks Constructor | Edit this page View Source PakeHttpRequestFactory(in ISymmetricKeySuite) Constructor Declaration public PakeHttpRequestFactory(in ISymmetricKeySuite keySuite) Parameters Type Name Description ISymmetricKeySuite keySuite Key suite (will be disposed!) Fields | Edit this page View Source Client PAKE client Declaration protected readonly FastPakeAuthClient Client Field Value Type Description FastPakeAuthClient | Edit this page View Source PakeContentType PAKE content type Declaration protected static readonly MediaTypeHeaderValue PakeContentType Field Value Type Description MediaTypeHeaderValue Properties | Edit this page View Source Options Encryption options (won't be cleared) Declaration public CryptoOptions Options { get; init; } Property Value Type Description CryptoOptions Methods | Edit this page View Source CreateDto(in HttpMethod, in string, in Dictionary<string, string[]>?, in Stream?, in bool) Create a PAKE request DTO Declaration protected virtual T CreateDto(in HttpMethod method, in string path, in Dictionary<string, string[]>? headers, in Stream? body, in bool pakeResponse) Parameters Type Name Description HttpMethod method http method string path Request path Dictionary<string, string[]> headers Request http headers Stream body Body stream bool pakeResponse Awaiting PAKE response? Returns Type Description T PAKE request DTO | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in Dictionary<string, string>?, in Dictionary<string, string[]>?, in bool) Create a request Declaration public virtual PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in Dictionary<string, string>? param = null, in Dictionary<string, string[]>? headers = null, in bool pakeResponse = true) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Dictionary<string, string> param Request parameters Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in Stream, in bool, in Dictionary<string, string[]>?, in bool, in TaskScheduler?, in CancellationToken) Create a request Declaration public virtual PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in Stream body, in bool longRunning, in Dictionary<string, string[]>? headers = null, in bool pakeResponse = true, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Stream body Request body (won't be disposed) bool longRunning If the sending process will take longer time Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? TaskScheduler scheduler Task scheduler to use CancellationToken cancellationToken Cancellation token Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequest(in Uri, in HttpMethod, in string, in HttpContent, in bool) Create a request Declaration public virtual PakeRequest CreateRequest(in Uri uri, in HttpMethod method, in string path, in HttpContent content, in bool pakeResponse = true) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path HttpContent content Content (will be disposed!) bool pakeResponse Require PAKE response? Returns Type Description PakeRequest PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequestAsync(Uri, HttpMethod, string, Stream, Dictionary<string, string[]>?, bool, CancellationToken) Create a request Declaration public virtual Task<PakeRequest> CreateRequestAsync(Uri uri, HttpMethod method, string path, Stream body, Dictionary<string, string[]>? headers = null, bool pakeResponse = true, CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path Stream body Request body (won't be disposed) Dictionary<string, string[]> headers Headers bool pakeResponse Require PAKE response? CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRequest> PAKE request (don't forget to dispose!) | Edit this page View Source CreateRequestAsync(Uri, HttpMethod, string, HttpContent, bool, CancellationToken) Create a request Declaration public virtual Task<PakeRequest> CreateRequestAsync(Uri uri, HttpMethod method, string path, HttpContent content, bool pakeResponse = true, CancellationToken cancellationToken = default) Parameters Type Name Description Uri uri URI HttpMethod method http method string path Request path HttpContent content Content (will be disposed!) bool pakeResponse Require PAKE response? CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeRequest> PAKE request (don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() Implements wan24.Core.IWillDispose IPakeHttpRequestFactory wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.PakeHttpRequestFactory.html": {
    "href": "api/wan24.Crypto.PakeHttpRequestFactory.html",
    "title": "Class PakeHttpRequestFactory | wan24-Crypto",
    "keywords": "Class PakeHttpRequestFactory PAKE http request factory Inheritance object DisposableBase PakeHttpRequestFactory<PakeRequest.PakeRequestDto> PakeHttpRequestFactory Implements IWillDispose IPakeHttpRequestFactory IDisposableObject IDisposable IAsyncDisposable Inherited Members PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateRequest(in Uri, in HttpMethod, in string, in Dictionary<string, string>, in Dictionary<string, string[]>, in bool) PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateRequest(in Uri, in HttpMethod, in string, in HttpContent, in bool) PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateRequestAsync(Uri, HttpMethod, string, HttpContent, bool, CancellationToken) PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateRequest(in Uri, in HttpMethod, in string, in Stream, in bool, in Dictionary<string, string[]>, in bool, in TaskScheduler, in CancellationToken) PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateRequestAsync(Uri, HttpMethod, string, Stream, Dictionary<string, string[]>, bool, CancellationToken) PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.Options DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class PakeHttpRequestFactory : PakeHttpRequestFactory<PakeRequest.PakeRequestDto>, IWillDispose, IPakeHttpRequestFactory, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source PakeHttpRequestFactory(in byte[], in byte[]) Constructor Declaration public PakeHttpRequestFactory(in byte[] id, in byte[] key) Parameters Type Name Description byte[] id ID (will be cleared!) byte[] key Key (will be cleared!) | Edit this page View Source PakeHttpRequestFactory(in FastPakeAuthClient) Constructor Declaration public PakeHttpRequestFactory(in FastPakeAuthClient client) Parameters Type Name Description FastPakeAuthClient client PAKE client (will be disposed!) | Edit this page View Source PakeHttpRequestFactory(in ISymmetricKeySuite) Constructor Declaration public PakeHttpRequestFactory(in ISymmetricKeySuite keySuite) Parameters Type Name Description ISymmetricKeySuite keySuite Key suite (will be disposed!) Properties | Edit this page View Source Instance Default instance Declaration public static PakeHttpRequestFactory? Instance { get; set; } Property Value Type Description PakeHttpRequestFactory Methods | Edit this page View Source CreateDto(in HttpMethod, in string, in Dictionary<string, string[]>?, in Stream?, in bool) Create a PAKE request DTO Declaration protected override PakeRequest.PakeRequestDto CreateDto(in HttpMethod method, in string path, in Dictionary<string, string[]>? headers, in Stream? stream, in bool pakeResponse) Parameters Type Name Description HttpMethod method http method string path Request path Dictionary<string, string[]> headers Request http headers Stream stream bool pakeResponse Awaiting PAKE response? Returns Type Description PakeRequest.PakeRequestDto PAKE request DTO Overrides PakeHttpRequestFactory<PakeRequest.PakeRequestDto>.CreateDto(in HttpMethod, in string, in Dictionary<string, string[]>, in Stream, in bool) Implements wan24.Core.IWillDispose IPakeHttpRequestFactory wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.PakeRecord.html": {
    "href": "api/wan24.Crypto.PakeRecord.html",
    "title": "Class PakeRecord | wan24-Crypto",
    "keywords": "Class PakeRecord PAKE record (keep the contents secret!) Inheritance object ValidatableRecordBase StreamSerializerRecordBase PakeRecord Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IPakeRecord IEquatable<PakeRecord> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record PakeRecord : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IPakeRecord, IEquatable<PakeRecord> Constructors | Edit this page View Source PakeRecord() Constructor Declaration public PakeRecord() | Edit this page View Source PakeRecord(in byte[], in byte[], in byte[]) Constructor Declaration public PakeRecord(in byte[] identifier, in byte[] secret, in byte[] signatureKey) Parameters Type Name Description byte[] identifier Identifier (will be cleared!) byte[] secret Secret (will be cleared!) byte[] signatureKey Signature key (will be cleared!) | Edit this page View Source PakeRecord(in IPakeRecord) Constructor Declaration public PakeRecord(in IPakeRecord existing) Parameters Type Name Description IPakeRecord existing Existing PAKE record (values will be copied) | Edit this page View Source PakeRecord(in PakeSignup, in byte[]) Constructor Declaration public PakeRecord(in PakeSignup signup, in byte[] signatureKey) Parameters Type Name Description PakeSignup signup Signup byte[] signatureKey Signature key (will be cleared!) Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Identifier Identifier (will be cleared!) Declaration public byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Secret Secret (protected with the authentication key; this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] Secret { get; } Property Value Type Description byte[] | Edit this page View Source SignatureKey Signature key (this is sensitive data and should be stored encrypted; will be cleared!) Declaration [SensitiveData] public byte[] SignatureKey { get; } Property Value Type Description byte[] Methods | Edit this page View Source Clear() Clear the contents Declaration public void Clear() | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator PakeRecord(in byte[]) Cast from serialized data Declaration public static explicit operator PakeRecord(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description PakeRecord | Edit this page View Source implicit operator byte[](in PakeRecord) Cast as serialized data Declaration public static implicit operator byte[](in PakeRecord signup) Parameters Type Name Description PakeRecord signup PakeRecord Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IPakeRecord IEquatable<T> Extension Methods PakeRecordExtensions.DeriveSessionKey(IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) PakeRecordExtensions.Dispose(IPakeRecord) PakeRecordExtensions.DisposeAsync(IPakeRecord)"
  },
  "api/wan24.Crypto.PakeRecordExtensions.html": {
    "href": "api/wan24.Crypto.PakeRecordExtensions.html",
    "title": "Class PakeRecordExtensions | wan24-Crypto",
    "keywords": "Class PakeRecordExtensions IPakeRecord extensions Inheritance object PakeRecordExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class PakeRecordExtensions Methods | Edit this page View Source DeriveSessionKey(IPakeRecord, in PakeAuth, in Action<Pake>?, in CryptoOptions?, in CryptoOptions?, in bool) Derive a session key Declaration public static (byte[] SessionKey, byte[] Payload) DeriveSessionKey(this IPakeRecord record, in PakeAuth auth, in Action<Pake>? initializer = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in bool decryptPayload = false) Parameters Type Name Description IPakeRecord record Record (will be cleared/disposed!) PakeAuth auth Authentication (will be disposed!) Action<Pake> initializer PAKE instance initializer CryptoOptions options Options CryptoOptions cryptoOptions Options for encryption bool decryptPayload Decrypt the payload? Returns Type Description (byte[] Key, byte[] KeyExchangeData) Session key and payload | Edit this page View Source Dispose(IPakeRecord) Dispose the PAKE record Declaration public static void Dispose(this IPakeRecord record) Parameters Type Name Description IPakeRecord record Record | Edit this page View Source DisposeAsync(IPakeRecord) Dispose the PAKE record Declaration public static Task DisposeAsync(this IPakeRecord record) Parameters Type Name Description IPakeRecord record Record Returns Type Description Task"
  },
  "api/wan24.Crypto.PakeRecordStore-1.html": {
    "href": "api/wan24.Crypto.PakeRecordStore-1.html",
    "title": "Class PakeRecordStore<T> | wan24-Crypto",
    "keywords": "Class PakeRecordStore<T> PAKE record store Inheritance object DisposableBase DisposableStreamSerializerBase PakeRecordStore<T> PakeAuthRecordStore PakeRecordStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PakeRecordStore<T> : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged where T : notnull, IPakeRecord Type Parameters Name Description T Constructors | Edit this page View Source PakeRecordStore() Constructor Declaration public PakeRecordStore() Fields | Edit this page View Source ChangeToken Change token Declaration protected readonly DisposableChangeToken ChangeToken Field Value Type Description DisposableChangeToken | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int | Edit this page View Source _Records PAKE records (key is the identifier) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, T> _Records Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, T> Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public bool HasChanged { get; } Property Value Type Description bool | Edit this page View Source Records PAKE records (key is the identifier) Declaration public ConcurrentDictionary<EquatableArray<byte>, T> Records { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, T> | Edit this page View Source RecordsCount Number of PAKE records Declaration public virtual int RecordsCount { get; } Property Value Type Description int Methods | Edit this page View Source AddRecord(in T) Add a PAKE record Declaration public void AddRecord(in T record) Parameters Type Name Description T record PAKE record (will be cleared/disposed!) | Edit this page View Source AddRecordAsync(T) Add a PAKE record Declaration public Task AddRecordAsync(T record) Parameters Type Name Description T record PAKE record (will be cleared/disposed!) Returns Type Description Task | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source GetRecord(byte[]) Get a PAKE record Declaration public T? GetRecord(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier Returns Type Description T PAKE record (will be cleared/disposed) | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public IDisposable RegisterChangeCallback(Action<object?> callback, object? state) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. | Edit this page View Source RemoveRecord(byte[]) Remove and clear/dispose a PAKE record Declaration public void RemoveRecord(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier | Edit this page View Source RemoveRecordAsync(byte[]) Remove and clear/dispose a PAKE record Declaration public Task RemoveRecordAsync(byte[] identifier) Parameters Type Name Description byte[] identifier Identifier Returns Type Description Task | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetChanged(in string) Set changed Declaration protected virtual void SetChanged(in string propertyName) Parameters Type Name Description string propertyName Property name Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.PakeRecordStore.html": {
    "href": "api/wan24.Crypto.PakeRecordStore.html",
    "title": "Class PakeRecordStore | wan24-Crypto",
    "keywords": "Class PakeRecordStore PAKE record store Inheritance object DisposableBase DisposableStreamSerializerBase PakeRecordStore<IPakeRecord> PakeRecordStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members PakeRecordStore<IPakeRecord>.VERSION PakeRecordStore<IPakeRecord>.ChangeToken PakeRecordStore<IPakeRecord>._Records PakeRecordStore<IPakeRecord>.Records PakeRecordStore<IPakeRecord>.RecordsCount PakeRecordStore<IPakeRecord>.HasChanged PakeRecordStore<IPakeRecord>.ActiveChangeCallbacks PakeRecordStore<IPakeRecord>.AddRecord(in IPakeRecord) PakeRecordStore<IPakeRecord>.AddRecordAsync(IPakeRecord) PakeRecordStore<IPakeRecord>.GetRecord(byte[]) PakeRecordStore<IPakeRecord>.RemoveRecord(byte[]) PakeRecordStore<IPakeRecord>.RemoveRecordAsync(byte[]) PakeRecordStore<IPakeRecord>.RegisterChangeCallback(Action<object>, object) PakeRecordStore<IPakeRecord>.SetChanged(in string) PakeRecordStore<IPakeRecord>.Serialize(Stream) PakeRecordStore<IPakeRecord>.SerializeAsync(Stream, CancellationToken) PakeRecordStore<IPakeRecord>.Deserialize(Stream, int) PakeRecordStore<IPakeRecord>.DeserializeAsync(Stream, int, CancellationToken) PakeRecordStore<IPakeRecord>.Dispose(bool) PakeRecordStore<IPakeRecord>.DisposeCore() PakeRecordStore<IPakeRecord>.PropertyChanged DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PakeRecordStore : PakeRecordStore<IPakeRecord>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source PakeRecordStore() Constructor Declaration public PakeRecordStore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.PakeRequest.PakeRequestDto.html": {
    "href": "api/wan24.Crypto.PakeRequest.PakeRequestDto.html",
    "title": "Class PakeRequest.PakeRequestDto | wan24-Crypto",
    "keywords": "Class PakeRequest.PakeRequestDto PAKE request DTO Inheritance object ValidatableObjectBase StreamSerializerBase PakeRequest.PakeRequestDto Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PakeRequest.PakeRequestDto : StreamSerializerBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source PakeRequestDto() Constructor Declaration public PakeRequestDto() | Edit this page View Source PakeRequestDto(in int) Constructor Declaration protected PakeRequestDto(in int hlVersion) Parameters Type Name Description int hlVersion Higher level object version Fields | Edit this page View Source HeadersProperty Headers property Declaration protected static readonly PropertyInfo HeadersProperty Field Value Type Description PropertyInfo | Edit this page View Source HlVersion Higher level object version Declaration protected readonly int HlVersion Field Value Type Description int | Edit this page View Source SerializedHlVersion Serialized higher level object version Declaration protected int? SerializedHlVersion Field Value Type Description int? | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Headers Request headers Declaration [CountLimit(255)] [ItemStringLength(255, ItemValidationTargets.Key)] [ItemRequired(ItemValidationTargets.Key)] [ItemCountLimit(255, ItemValidationTargets.Item)] [ItemStringLength(32767, ItemValidationTargets.Item, ArrayLevel = 1)] public Dictionary<string, string[]>? Headers { get; set; } Property Value Type Description Dictionary<string, string[]> | Edit this page View Source Method Request method Declaration [StringLength(255)] [Required] public string Method { get; set; } Property Value Type Description string | Edit this page View Source PakeResponse Request PAKE secured response? Declaration public bool PakeResponse { get; set; } Property Value Type Description bool | Edit this page View Source Path Request path Declaration [StringLength(32767)] [Required] public string Path { get; set; } Property Value Type Description string Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.Crypto.PakeRequest.html": {
    "href": "api/wan24.Crypto.PakeRequest.html",
    "title": "Class PakeRequest | wan24-Crypto",
    "keywords": "Class PakeRequest PAKE request Inheritance object DisposableBase PakeRequest Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class PakeRequest : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source PakeRequest(in HttpRequestMessage, in Stream, in byte[]) PAKE request Declaration public PakeRequest(in HttpRequestMessage request, in Stream body, in byte[] key) Parameters Type Name Description HttpRequestMessage request http request message (will be disposed!) Stream body Request body stream (will be disposed!) byte[] key Encryption key (will be cleared!) Remarks Constructor Properties | Edit this page View Source Body Request body stream (will be disposed!) Declaration public Stream Body { get; } Property Value Type Description Stream | Edit this page View Source Key Encryption key (will be cleared!) Declaration public byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source Request http request (will be disposed!) Declaration public HttpRequestMessage Request { get; } Property Value Type Description HttpRequestMessage Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.PakeRequestExtensions.html": {
    "href": "api/wan24.Crypto.PakeRequestExtensions.html",
    "title": "Class PakeRequestExtensions | wan24-Crypto",
    "keywords": "Class PakeRequestExtensions PakeRequest extensions Inheritance object PakeRequestExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class PakeRequestExtensions Methods | Edit this page View Source SendPakeAsync(HttpClient, HttpMethod, string, Dictionary<string, string>?, Dictionary<string, string[]>?, Uri?, IPakeHttpRequestFactory?, CancellationToken) Send a PAKE request Declaration public static Task<PakeResponse> SendPakeAsync(this HttpClient client, HttpMethod method, string path, Dictionary<string, string>? param = null, Dictionary<string, string[]>? headers = null, Uri? uri = null, IPakeHttpRequestFactory? requestFactory = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient client Client HttpMethod method Method string path Path Dictionary<string, string> param Parameters Dictionary<string, string[]> headers Headers Uri uri Base URI (required, if BaseAddress wasn't set) IPakeHttpRequestFactory requestFactory PAKE http request factory (required, if Instance wasn't set; won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response | Edit this page View Source SendPakeAsync(HttpClient, HttpMethod, string, Stream, bool, Dictionary<string, string[]>?, Uri?, IPakeHttpRequestFactory?, TaskScheduler?, CancellationToken) Send a PAKE request Declaration public static Task<PakeResponse> SendPakeAsync(this HttpClient client, HttpMethod method, string path, Stream body, bool longRunning, Dictionary<string, string[]>? headers = null, Uri? uri = null, IPakeHttpRequestFactory? requestFactory = null, TaskScheduler? scheduler = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient client Client HttpMethod method Method string path Path Stream body Request body stream (won't be disposed) bool longRunning If the sending process will take longer time Dictionary<string, string[]> headers Headers Uri uri Base URI (required, if BaseAddress wasn't set) IPakeHttpRequestFactory requestFactory PAKE http request factory (required, if Instance wasn't set; won't be disposed) TaskScheduler scheduler Task scheduler to use CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response | Edit this page View Source SendPakeAsync(HttpClient, HttpMethod, string, Stream, Dictionary<string, string[]>?, Uri?, IPakeHttpRequestFactory?, CancellationToken) Send a PAKE request Declaration public static Task<PakeResponse> SendPakeAsync(this HttpClient client, HttpMethod method, string path, Stream body, Dictionary<string, string[]>? headers = null, Uri? uri = null, IPakeHttpRequestFactory? requestFactory = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient client Client HttpMethod method Method string path Path Stream body Request body (won't be disposed) Dictionary<string, string[]> headers Headers Uri uri Base URI (required, if BaseAddress wasn't set) IPakeHttpRequestFactory requestFactory PAKE http request factory (required, if Instance wasn't set; won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response | Edit this page View Source SendPakeAsync(HttpClient, HttpMethod, string, HttpContent, Uri?, IPakeHttpRequestFactory?, CancellationToken) Send a PAKE request Declaration public static Task<PakeResponse> SendPakeAsync(this HttpClient client, HttpMethod method, string path, HttpContent content, Uri? uri = null, IPakeHttpRequestFactory? requestFactory = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient client Client HttpMethod method Method string path Path HttpContent content Content (will be disposed!) Uri uri Base URI (required, if BaseAddress wasn't set) IPakeHttpRequestFactory requestFactory PAKE http request factory (required, if Instance wasn't set; won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response"
  },
  "api/wan24.Crypto.PakeRequestStream.html": {
    "href": "api/wan24.Crypto.PakeRequestStream.html",
    "title": "Class PakeRequestStream | wan24-Crypto",
    "keywords": "Class PakeRequestStream PAKE request stream Inheritance object MarshalByRefObject Stream StreamBase BlockingBufferStream BackgroundProcessingStreamBase PakeRequestStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members BackgroundProcessingStreamBase.Write(ReadOnlySpan<byte>) BackgroundProcessingStreamBase.WriteByte(byte) BackgroundProcessingStreamBase.TryWrite(ReadOnlySpan<byte>) BackgroundProcessingStreamBase.TryWriteAsync(ReadOnlyMemory<byte>, CancellationToken) BackgroundProcessingStreamBase.BeginWrite(byte[], int, int, AsyncCallback, object) BackgroundProcessingStreamBase.LastException BackgroundProcessingStreamBase.OnError BlockingBufferStream.SetIsEndOfFileAsync(CancellationToken) BlockingBufferStream.ReorganizeBuffer() BlockingBufferStream.ReorganizeBufferAsync(CancellationToken) BlockingBufferStream.WaitSpace(CancellationToken) BlockingBufferStream.WaitSpaceAsync(CancellationToken) BlockingBufferStream.WaitData(CancellationToken) BlockingBufferStream.WaitDataAsync(CancellationToken) BlockingBufferStream.Flush() BlockingBufferStream.FlushAsync(CancellationToken) BlockingBufferStream.Seek(long, SeekOrigin) BlockingBufferStream.ReadByte() BlockingBufferStream.Read(byte[], int, int) BlockingBufferStream.Read(Span<byte>) BlockingBufferStream.TryRead(Span<byte>) BlockingBufferStream.ReadAsync(byte[], int, int, CancellationToken) BlockingBufferStream.ReadAsync(Memory<byte>, CancellationToken) BlockingBufferStream.TryReadAsync(Memory<byte>, CancellationToken) BlockingBufferStream.SetLength(long) BlockingBufferStream.Write(byte[], int, int) BlockingBufferStream.WriteAsync(byte[], int, int, CancellationToken) BlockingBufferStream.BufferSize BlockingBufferStream.Available BlockingBufferStream.SpaceLeft BlockingBufferStream.AggressiveReadBlocking BlockingBufferStream.ReadIncomplete BlockingBufferStream.IsReadBlocked BlockingBufferStream.IsWriteBlocked BlockingBufferStream.AutoReorg BlockingBufferStream.UseFlush BlockingBufferStream.IsEndOfFile BlockingBufferStream.State BlockingBufferStream.CanRead BlockingBufferStream.CanSeek BlockingBufferStream.Length BlockingBufferStream.Position BlockingBufferStream.OnDataAvailable BlockingBufferStream.OnNeedData BlockingBufferStream.OnSpaceAvailable BlockingBufferStream.OnNeedSpace StreamBase.StackInfo StreamBase.Close() StreamBase.DisposeAsync() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class PakeRequestStream : BackgroundProcessingStreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source PakeRequestStream(in Stream, in int, in CancellationToken) PAKE request stream Declaration public PakeRequestStream(in Stream source, in int bufferSize, in CancellationToken cancellationToken = default) Parameters Type Name Description Stream source Source stream (contents will be copied to the Cipher which is going to be set using SetCipher(in Stream, in TaskScheduler?, in bool); won't be disposed) int bufferSize Buffer size in bytes CancellationToken cancellationToken Cancellation token Remarks Constructor Properties | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides wan24.Core.BackgroundProcessingStreamBase.CanWrite | Edit this page View Source Cipher Cipher stream (won't be disposed; unset after the copy process did finish) Declaration public Stream? Cipher { get; } Property Value Type Description Stream | Edit this page View Source Source Source stream (contents will be copied to the Cipher which is going to be set using SetCipher(in Stream, in TaskScheduler?, in bool); won't be disposed) Declaration public Stream Source { get; } Property Value Type Description Stream Methods | Edit this page View Source ProcessAsync(CancellationToken) Process (must use WriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) or TryWriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) for writing to the buffer!) Declaration protected override Task ProcessAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides BackgroundProcessingStreamBase.ProcessAsync(CancellationToken) | Edit this page View Source SetCipher(in Stream, in TaskScheduler?, in bool) Set the Cipher and start processing in the background Declaration public void SetCipher(in Stream cipher, in TaskScheduler? scheduler = null, in bool longRunning = true) Parameters Type Name Description Stream cipher Cipher stream (must use this instance as final output target stream; won't be disposed) TaskScheduler scheduler Task scheduler to use bool longRunning If long running | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides BackgroundProcessingStreamBase.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Implements wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.PakeResponse.PakeResponseDto.html": {
    "href": "api/wan24.Crypto.PakeResponse.PakeResponseDto.html",
    "title": "Class PakeResponse.PakeResponseDto | wan24-Crypto",
    "keywords": "Class PakeResponse.PakeResponseDto PAKE response DTO Inheritance object ValidatableObjectBase StreamSerializerBase PakeResponse.PakeResponseDto Implements IObjectValidatable IValidatableObject IStreamSerializerVersion IStreamSerializer Inherited Members StreamSerializerBase.BASE_VERSION StreamSerializerBase.SerializedObjectVersion StreamSerializerBase.SerializerVersion ValidatableObjectBase.Validate(ValidationContext) ValidatableObjectBase.ObjectValidatable(IObjectValidatable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PakeResponse.PakeResponseDto : StreamSerializerBase, IObjectValidatable, IValidatableObject, IStreamSerializerVersion, IStreamSerializer Constructors | Edit this page View Source PakeResponseDto() Constructor Declaration public PakeResponseDto() | Edit this page View Source PakeResponseDto(in int) Constructor Declaration protected PakeResponseDto(in int hlVersion) Parameters Type Name Description int hlVersion Higher level object version Fields | Edit this page View Source HeadersProperty Headers property Declaration protected static readonly PropertyInfo HeadersProperty Field Value Type Description PropertyInfo | Edit this page View Source HlVersion Higher level object version Declaration protected readonly int HlVersion Field Value Type Description int | Edit this page View Source SerializedHlVersion Serialized higher level object version Declaration protected int? SerializedHlVersion Field Value Type Description int? | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Headers Request headers Declaration [CountLimit(255)] [ItemStringLength(255, ItemValidationTargets.Key)] [ItemRequired(ItemValidationTargets.Key)] [ItemCountLimit(255, ItemValidationTargets.Item)] [ItemStringLength(32767, ItemValidationTargets.Item, ArrayLevel = 1)] public Dictionary<string, string[]>? Headers { get; set; } Property Value Type Description Dictionary<string, string[]> | Edit this page View Source Status http status Declaration public HttpStatusCode Status { get; set; } Property Value Type Description HttpStatusCode Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source EnsureSuccessStatusCode() Ensure a success status code Declaration public void EnsureSuccessStatusCode() Exceptions Type Condition HttpRequestException Error status code | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerBase.SerializeAsync(Stream, CancellationToken) Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer"
  },
  "api/wan24.Crypto.PakeResponse.html": {
    "href": "api/wan24.Crypto.PakeResponse.html",
    "title": "Class PakeResponse | wan24-Crypto",
    "keywords": "Class PakeResponse PAKE http response Inheritance object DisposableBase PakeResponse Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class PakeResponse : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source PakeResponse(in PakeResponseDto, in DecryptionStreams, in Stream) PAKE http response Declaration public PakeResponse(in PakeResponse.PakeResponseDto response, in DecryptionStreams body, in Stream responseStream) Parameters Type Name Description PakeResponse.PakeResponseDto response PAKE response message DecryptionStreams body Response body stream (will be disposed!) Stream responseStream Response stream (will be disposed) Remarks Constructor Properties | Edit this page View Source Body Response body Declaration public DecryptionStreams Body { get; } Property Value Type Description DecryptionStreams | Edit this page View Source Response PAKE response message Declaration public PakeResponse.PakeResponseDto Response { get; } Property Value Type Description PakeResponse.PakeResponseDto | Edit this page View Source ResponseStream Response stream Declaration public Stream ResponseStream { get; } Property Value Type Description Stream Methods | Edit this page View Source CreateAsync(Stream, byte[], CryptoOptions?, CancellationToken) Create a PAKE response from a stream Declaration public static Task<PakeResponse> CreateAsync(Stream stream, byte[] key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Source stream byte[] key PAKE session key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response | Edit this page View Source CreateAsync<T>(Stream, byte[], CryptoOptions?, CancellationToken) Create a PAKE response from a stream Declaration public static Task<PakeResponse> CreateAsync<T>(Stream stream, byte[] key, CryptoOptions? options = null, CancellationToken cancellationToken = default) where T : PakeResponse.PakeResponseDto Parameters Type Name Description Stream stream Source stream (will be disposed!) byte[] key PAKE session key CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response (don't forget to dispose!) Type Parameters Name Description T PAKE response DTO type | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.PakeResponseExtensions.html": {
    "href": "api/wan24.Crypto.PakeResponseExtensions.html",
    "title": "Class PakeResponseExtensions | wan24-Crypto",
    "keywords": "Class PakeResponseExtensions PAKE response extensions Inheritance object PakeResponseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class PakeResponseExtensions Methods | Edit this page View Source GetPakeResponseAsync(HttpResponseMessage, byte[], CryptoOptions?, CancellationToken) Get the PAKE response Declaration public static Task<PakeResponse> GetPakeResponseAsync(this HttpResponseMessage response, byte[] key, CryptoOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpResponseMessage response Response (won't be disposed) byte[] key PAKE session key that was used for the request (won't be cleared) CryptoOptions options Crypto options CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response (don't forget to dispose!) | Edit this page View Source GetPakeResponseAsync<T>(HttpResponseMessage, byte[], CryptoOptions?, CancellationToken) Get the PAKE response Declaration public static Task<PakeResponse> GetPakeResponseAsync<T>(this HttpResponseMessage response, byte[] key, CryptoOptions? options = null, CancellationToken cancellationToken = default) where T : PakeResponse.PakeResponseDto Parameters Type Name Description HttpResponseMessage response Response (won't be disposed) byte[] key PAKE session key that was used for the request (won't be cleared) CryptoOptions options Crypto options CancellationToken cancellationToken Cancellation token Returns Type Description Task<PakeResponse> PAKE response (don't forget to dispose!) Type Parameters Name Description T PAKE response DTO type"
  },
  "api/wan24.Crypto.PakeSignup.html": {
    "href": "api/wan24.Crypto.PakeSignup.html",
    "title": "Class PakeSignup | wan24-Crypto",
    "keywords": "Class PakeSignup PAKE signup information (needs to be sent to the server, wrapped using a PFS protocol!) Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase PakeSignup Implements IWillDispose IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IPakeRequest IDisposableObject IDisposable IAsyncDisposable IEquatable<PakeSignup> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record PakeSignup : DisposableStreamSerializerRecordBase, IWillDispose, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IPakeRequest, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<PakeSignup> Constructors | Edit this page View Source PakeSignup() Constructor Declaration public PakeSignup() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Identifier Identifier Declaration [CountLimit(1, 255)] public byte[] Identifier { get; } Property Value Type Description byte[] | Edit this page View Source Key Key (XORed with the signature key, when authenticating) Declaration [SensitiveData] [CountLimit(1, 255)] public byte[] Key { get; } Property Value Type Description byte[] | Edit this page View Source Payload Payload Declaration [SensitiveData] [CountLimit(0, 65535)] public byte[] Payload { get; } Property Value Type Description byte[] | Edit this page View Source Random Random bytes Declaration [CountLimit(1, 255)] public byte[] Random { get; } Property Value Type Description byte[] | Edit this page View Source Secret Secret (will be cleared!) Declaration [SensitiveData] [CountLimit(1, 255)] public byte[] Secret { get; } Property Value Type Description byte[] | Edit this page View Source Signature Signature Declaration [CountLimit(1, 255)] public byte[] Signature { get; } Property Value Type Description byte[] Methods | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator PakeSignup(in byte[]) Cast from serialized data Declaration public static explicit operator PakeSignup(in byte[] data) Parameters Type Name Description byte[] data Serialized data Returns Type Description PakeSignup | Edit this page View Source implicit operator byte[](in PakeSignup) Cast as serialized data Declaration public static implicit operator byte[](in PakeSignup signup) Parameters Type Name Description PakeSignup signup PakeSignup Returns Type Description byte[] Implements wan24.Core.IWillDispose IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IPakeRequest wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T>"
  },
  "api/wan24.Crypto.PasswordPostProcessor.html": {
    "href": "api/wan24.Crypto.PasswordPostProcessor.html",
    "title": "Class PasswordPostProcessor | wan24-Crypto",
    "keywords": "Class PasswordPostProcessor Base class for a password post-processor Inheritance object PasswordPostProcessor DefaultPasswordPostProcessor PasswordPostProcessorChain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract class PasswordPostProcessor Constructors | Edit this page View Source PasswordPostProcessor() Constructor Declaration protected PasswordPostProcessor() Properties | Edit this page View Source Instance Default instance to use Declaration public static PasswordPostProcessor Instance { get; set; } Property Value Type Description PasswordPostProcessor Methods | Edit this page View Source PostProcess(byte[]) Post-process a password Declaration public abstract byte[] PostProcess(byte[] pwd) Parameters Type Name Description byte[] pwd Password (won't be cleared) Returns Type Description byte[] Processed password (don't forget to clear!) | Edit this page View Source PreProcessAsyncEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) A CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate for pre-processing an encryption password Declaration [Obsolete(\"Use PreProcessEncryptionPasswordAsync instead\")] public Task PreProcessAsyncEncryptionPassword(EncryptionAlgorithmBase algo, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description EncryptionAlgorithmBase algo Encryption algorithm CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source PreProcessEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions) A CryptoOptions.EncryptionPasswordPreProcessor_Delegate for pre-processing an encryption password Declaration public virtual void PreProcessEncryptionPassword(EncryptionAlgorithmBase algo, CryptoOptions options) Parameters Type Name Description EncryptionAlgorithmBase algo Encryption algorithm CryptoOptions options Options | Edit this page View Source PreProcessEncryptionPasswordAsync(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) A CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate for pre-processing an encryption password Declaration public virtual Task PreProcessEncryptionPasswordAsync(EncryptionAlgorithmBase algo, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description EncryptionAlgorithmBase algo Encryption algorithm CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.PasswordPostProcessorChain.html": {
    "href": "api/wan24.Crypto.PasswordPostProcessorChain.html",
    "title": "Class PasswordPostProcessorChain | wan24-Crypto",
    "keywords": "Class PasswordPostProcessorChain Password post-processor chain Inheritance object PasswordPostProcessor PasswordPostProcessorChain Inherited Members PasswordPostProcessor.Instance PasswordPostProcessor.PreProcessEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions) PasswordPostProcessor.PreProcessAsyncEncryptionPassword(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) PasswordPostProcessor.PreProcessEncryptionPasswordAsync(EncryptionAlgorithmBase, CryptoOptions, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PasswordPostProcessorChain : PasswordPostProcessor Remarks Constructors Constructors | Edit this page View Source PasswordPostProcessorChain(params PasswordPostProcessor[]) Password post-processor chain Declaration public PasswordPostProcessorChain(params PasswordPostProcessor[] processors) Parameters Type Name Description PasswordPostProcessor[] processors Password post-processors to apply sequential Remarks Constructors Properties | Edit this page View Source Processors Sequential applied password post-processors Declaration public PasswordPostProcessor[] Processors { get; } Property Value Type Description PasswordPostProcessor[] Methods | Edit this page View Source PostProcess(byte[]) Post-process a password Declaration public override byte[] PostProcess(byte[] pwd) Parameters Type Name Description byte[] pwd Password (won't be cleared) Returns Type Description byte[] Processed password (don't forget to clear!) Overrides PasswordPostProcessor.PostProcess(byte[])"
  },
  "api/wan24.Crypto.PrivateKeySuite.html": {
    "href": "api/wan24.Crypto.PrivateKeySuite.html",
    "title": "Class PrivateKeySuite | wan24-Crypto",
    "keywords": "Class PrivateKeySuite Private key suite (for storing long term keys) Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase PrivateKeySuite Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> ICloneable IKeyExchange IEquatable<PrivateKeySuite> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record PrivateKeySuite : DisposableStreamSerializerRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, ICloneable, IKeyExchange, IEquatable<PrivateKeySuite> Constructors | Edit this page View Source PrivateKeySuite() Constructor Declaration public PrivateKeySuite() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 2 Field Value Type Description int Properties | Edit this page View Source CounterKeyExchangeKey Counter key exchange private key (will be disposed) Declaration [SensitiveData] public IKeyExchangePrivateKey? CounterKeyExchangeKey { get; set; } Property Value Type Description IKeyExchangePrivateKey | Edit this page View Source CounterSignatureKey Counter signature private key (will be disposed) Declaration [SensitiveData] public ISignaturePrivateKey? CounterSignatureKey { get; set; } Property Value Type Description ISignaturePrivateKey | Edit this page View Source KeyExchangeKey Key exchange private key (will be disposed) Declaration [SensitiveData] public IKeyExchangePrivateKey? KeyExchangeKey { get; set; } Property Value Type Description IKeyExchangePrivateKey | Edit this page View Source Public Public key suite (will be disposed when this instance is being disposed) Declaration public PublicKeySuite Public { get; } Property Value Type Description PublicKeySuite | Edit this page View Source SignatureKey Signature private key (will be disposed) Declaration [SensitiveData] public ISignaturePrivateKey? SignatureKey { get; set; } Property Value Type Description ISignaturePrivateKey | Edit this page View Source SignedPublicCounterKey Signed public counter key (will be disposed) Declaration public AsymmetricSignedPublicKey? SignedPublicCounterKey { get; set; } Property Value Type Description AsymmetricSignedPublicKey | Edit this page View Source SignedPublicKey Signed public key (will be disposed) Declaration public AsymmetricSignedPublicKey? SignedPublicKey { get; set; } Property Value Type Description AsymmetricSignedPublicKey | Edit this page View Source SymmetricKey Symmetric key (will be cleared) Declaration [SensitiveData] [CountLimit(1, 255)] public byte[]? SymmetricKey { get; set; } Property Value Type Description byte[] Methods | Edit this page View Source Create() Create a private key suite with new key exchange, signature and symmetric keys Declaration public static PrivateKeySuite Create() Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source CreateOptions() Create crypto options Declaration public CryptoOptions CreateOptions() Returns Type Description CryptoOptions Options | Edit this page View Source CreateWithCounterAlgorithms() Create a private key suite with new key exchange, signature and symmetric keys (and new counter algorithm keys) Declaration public static PrivateKeySuite CreateWithCounterAlgorithms() Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source Decrypt(byte[], byte[], CryptoOptions?) Decrypt a private key suite cipher and deserialize to a private key suite instance Declaration public static PrivateKeySuite Decrypt(byte[] cipher, byte[] key, CryptoOptions? options = null) Parameters Type Name Description byte[] cipher Cipher byte[] key Key CryptoOptions options Options Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source DeriveKey(byte[]) Derive a key from key exchange data Declaration public byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Key exchange data (will be cleared!) Returns Type Description byte[] Derived key | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source Encrypt(byte[], CryptoOptions?) Serialize and encrypt this private key suite for physical cold storage Declaration public byte[] Encrypt(byte[] key, CryptoOptions? options = null) Parameters Type Name Description byte[] key Key CryptoOptions options Options Returns Type Description byte[] Cipher | Edit this page View Source GetCopy() Get a copy of this instance Declaration public PrivateKeySuite GetCopy() Returns Type Description PrivateKeySuite Instance copy | Edit this page View Source GetKeyExchangeData() Get a key and the key exchange data Declaration public (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData() Returns Type Description (byte[] Key, byte[] KeyExchangeData) Key and key exchange data | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator PrivateKeySuite(byte[]) Cast from serialized data Declaration public static explicit operator PrivateKeySuite(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description PrivateKeySuite | Edit this page View Source implicit operator byte[](PrivateKeySuite) Cast as serialized data Declaration public static implicit operator byte[](PrivateKeySuite suite) Parameters Type Name Description PrivateKeySuite suite Private key suite Returns Type Description byte[] | Edit this page View Source implicit operator AsymmetricSignedPublicKey(PrivateKeySuite) Cast as asymmetric signed public key Declaration public static implicit operator AsymmetricSignedPublicKey(PrivateKeySuite suite) Parameters Type Name Description PrivateKeySuite suite Private key suite Returns Type Description AsymmetricSignedPublicKey | Edit this page View Source implicit operator PublicKeySuite(PrivateKeySuite) Cast as public key suite Declaration public static implicit operator PublicKeySuite(PrivateKeySuite suite) Parameters Type Name Description PrivateKeySuite suite Private key suite Returns Type Description PublicKeySuite Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> ICloneable IKeyExchange IEquatable<T> Extension Methods PrivateKeySuiteExtensions.WithCounterKeyExchangeKey(PrivateKeySuite, IKeyExchangePrivateKey?) PrivateKeySuiteExtensions.WithCounterSignatureKey(PrivateKeySuite, ISignaturePrivateKey?) PrivateKeySuiteExtensions.WithKeyExchangeKey(PrivateKeySuite, IKeyExchangePrivateKey?) PrivateKeySuiteExtensions.WithSignatureKey(PrivateKeySuite, ISignaturePrivateKey?) PrivateKeySuiteExtensions.WithSignedPublicKey(PrivateKeySuite, AsymmetricSignedPublicKey) PrivateKeySuiteExtensions.WithSymmetricKey(PrivateKeySuite, byte[]?) PrivateKeySuiteExtensions.WithSymmetricKey(PrivateKeySuite, int)"
  },
  "api/wan24.Crypto.PrivateKeySuiteExtensions.html": {
    "href": "api/wan24.Crypto.PrivateKeySuiteExtensions.html",
    "title": "Class PrivateKeySuiteExtensions | wan24-Crypto",
    "keywords": "Class PrivateKeySuiteExtensions Private key suite extensions Inheritance object PrivateKeySuiteExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class PrivateKeySuiteExtensions Methods | Edit this page View Source WithCounterKeyExchangeKey(PrivateKeySuite, IKeyExchangePrivateKey?) Set the (new) counter key exchange private key Declaration public static PrivateKeySuite WithCounterKeyExchangeKey(this PrivateKeySuite suite, IKeyExchangePrivateKey? key = null) Parameters Type Name Description PrivateKeySuite suite Private key suite IKeyExchangePrivateKey key Key exchange private key Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithCounterSignatureKey(PrivateKeySuite, ISignaturePrivateKey?) Set the (new) counter signature private key Declaration public static PrivateKeySuite WithCounterSignatureKey(this PrivateKeySuite suite, ISignaturePrivateKey? key = null) Parameters Type Name Description PrivateKeySuite suite Private key suite ISignaturePrivateKey key Signature private key Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithKeyExchangeKey(PrivateKeySuite, IKeyExchangePrivateKey?) Set the (new) key exchange private key Declaration public static PrivateKeySuite WithKeyExchangeKey(this PrivateKeySuite suite, IKeyExchangePrivateKey? key = null) Parameters Type Name Description PrivateKeySuite suite Private key suite IKeyExchangePrivateKey key Key exchange private key Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithSignatureKey(PrivateKeySuite, ISignaturePrivateKey?) Set the (new) signature private key Declaration public static PrivateKeySuite WithSignatureKey(this PrivateKeySuite suite, ISignaturePrivateKey? key = null) Parameters Type Name Description PrivateKeySuite suite Private key suite ISignaturePrivateKey key Signature private key Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithSignedPublicKey(PrivateKeySuite, AsymmetricSignedPublicKey) Set the (new) signed public key Declaration public static PrivateKeySuite WithSignedPublicKey(this PrivateKeySuite suite, AsymmetricSignedPublicKey key) Parameters Type Name Description PrivateKeySuite suite Private key suite AsymmetricSignedPublicKey key Signed public key Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithSymmetricKey(PrivateKeySuite, byte[]?) Set the (new) symmetric key Declaration public static PrivateKeySuite WithSymmetricKey(this PrivateKeySuite suite, byte[]? key = null) Parameters Type Name Description PrivateKeySuite suite Private key suite byte[] key Symmetric key (if null, a 64 byte random key will be generated) Returns Type Description PrivateKeySuite Private key suite | Edit this page View Source WithSymmetricKey(PrivateKeySuite, int) Set the (new) symmetric key Declaration public static PrivateKeySuite WithSymmetricKey(this PrivateKeySuite suite, int len) Parameters Type Name Description PrivateKeySuite suite Private key suite int len Length in bytes Returns Type Description PrivateKeySuite Private key suite"
  },
  "api/wan24.Crypto.PrivateKeySuiteStore.html": {
    "href": "api/wan24.Crypto.PrivateKeySuiteStore.html",
    "title": "Class PrivateKeySuiteStore | wan24-Crypto",
    "keywords": "Class PrivateKeySuiteStore Private key suite store Inheritance object DisposableBase DisposableStreamSerializerBase PrivateKeySuiteStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PrivateKeySuiteStore : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source PrivateKeySuiteStore() Constructor Declaration public PrivateKeySuiteStore() Fields | Edit this page View Source ChangeToken Change token Declaration protected readonly DisposableChangeToken ChangeToken Field Value Type Description DisposableChangeToken | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int | Edit this page View Source _Suites Private key suites (key is the suite revision) Declaration protected readonly ConcurrentDictionary<int, PrivateKeySuite> _Suites Field Value Type Description ConcurrentDictionary<int, PrivateKeySuite> Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public bool HasChanged { get; } Property Value Type Description bool | Edit this page View Source this[int] Get a revision Declaration public PrivateKeySuite this[in int revision] { get; } Parameters Type Name Description int revision Revision Property Value Type Description PrivateKeySuite Private key suite | Edit this page View Source LatestRevision Latest revision Declaration public int LatestRevision { get; } Property Value Type Description int | Edit this page View Source LatestSuite Latest private key suite Declaration public PrivateKeySuite LatestSuite { get; } Property Value Type Description PrivateKeySuite | Edit this page View Source SuiteCount Number of private key suites Declaration public virtual int SuiteCount { get; } Property Value Type Description int | Edit this page View Source Suites Private key suites (key is the suite revision) Declaration public ConcurrentDictionary<int, PrivateKeySuite> Suites { get; } Property Value Type Description ConcurrentDictionary<int, PrivateKeySuite> Methods | Edit this page View Source AddSuite(in PrivateKeySuite, in int) Add a private key suite Declaration public virtual void AddSuite(in PrivateKeySuite suite, in int revision) Parameters Type Name Description PrivateKeySuite suite Private key suite (will be disposed!) int revision Suite revision | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source GetSuite(byte[]) Get a private key suite Declaration public virtual PrivateKeySuite? GetSuite(byte[] id) Parameters Type Name Description byte[] id Signed public key ID Returns Type Description PrivateKeySuite Private key suite (will be disposed) | Edit this page View Source GetSuite(in int) Get a private key suite Declaration public virtual PrivateKeySuite? GetSuite(in int revision) Parameters Type Name Description int revision Suite revision Returns Type Description PrivateKeySuite Private key suite (will be disposed) | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public IDisposable RegisterChangeCallback(Action<object?> callback, object? state) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. | Edit this page View Source RemoveSuite(byte[]) Remove and dispose a private key suite Declaration public virtual void RemoveSuite(byte[] id) Parameters Type Name Description byte[] id Signed public key ID | Edit this page View Source RemoveSuite(in int) Remove and dispose a private key suite Declaration public virtual void RemoveSuite(in int revision) Parameters Type Name Description int revision Suite revision | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetChanged(in string) Set changed Declaration protected virtual void SetChanged(in string propertyName) Parameters Type Name Description string propertyName Property name Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.PublicKeySuite.html": {
    "href": "api/wan24.Crypto.PublicKeySuite.html",
    "title": "Class PublicKeySuite | wan24-Crypto",
    "keywords": "Class PublicKeySuite Public key suite Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase PublicKeySuite Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> ICloneable IEquatable<PublicKeySuite> Inherited Members DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.ToString() DisposableStreamSerializerRecordBase.GetHashCode() DisposableStreamSerializerRecordBase.Equals(object) DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.Equals(DisposableStreamSerializerRecordBase) DisposableStreamSerializerRecordBase.<Clone>$() DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record PublicKeySuite : DisposableStreamSerializerRecordBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, ICloneable, IEquatable<PublicKeySuite> Constructors | Edit this page View Source PublicKeySuite() Constructor Declaration public PublicKeySuite() Fields | Edit this page View Source VERSION Object version Declaration public const int VERSION = 2 Field Value Type Description int Properties | Edit this page View Source CounterKeyExchangeKey Counter key exchange key (will be disposed) Declaration public IAsymmetricPublicKey? CounterKeyExchangeKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source CounterSignatureKey Counter signature public key (will be disposed) Declaration public ISignaturePublicKey? CounterSignatureKey { get; set; } Property Value Type Description ISignaturePublicKey | Edit this page View Source KeyExchangeKey Key exchange key (will be disposed) Declaration public IAsymmetricPublicKey? KeyExchangeKey { get; set; } Property Value Type Description IAsymmetricPublicKey | Edit this page View Source Signature Public key suite signature Declaration public SignatureContainer? Signature { get; set; } Property Value Type Description SignatureContainer | Edit this page View Source SignatureKey Signature public key (will be disposed) Declaration public ISignaturePublicKey? SignatureKey { get; set; } Property Value Type Description ISignaturePublicKey | Edit this page View Source SignedPublicCounterKey Signed public counter key (will be disposed) Declaration public AsymmetricSignedPublicKey? SignedPublicCounterKey { get; set; } Property Value Type Description AsymmetricSignedPublicKey | Edit this page View Source SignedPublicKey Signed public key (will be disposed) Declaration public AsymmetricSignedPublicKey? SignedPublicKey { get; set; } Property Value Type Description AsymmetricSignedPublicKey Methods | Edit this page View Source CreateOptions() Create crypto options Declaration public CryptoOptions CreateOptions() Returns Type Description CryptoOptions Options | Edit this page View Source CreateSignedData() Create the signed data Declaration public byte[] CreateSignedData() Returns Type Description byte[] Signed data | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableRecordBase.DisposeCore() | Edit this page View Source GetCopy() Get a copy of this instance Declaration public PublicKeySuite GetCopy() Returns Type Description PublicKeySuite Instance copy | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) Operators | Edit this page View Source explicit operator PublicKeySuite(byte[]) Cast from serialized data Declaration public static explicit operator PublicKeySuite(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description PublicKeySuite | Edit this page View Source implicit operator byte[](PublicKeySuite) Cast as serialized data Declaration public static implicit operator byte[](PublicKeySuite suite) Parameters Type Name Description PublicKeySuite suite Public key suite Returns Type Description byte[] | Edit this page View Source implicit operator AsymmetricSignedPublicKey(PublicKeySuite) Cast as asymmetric signed public key Declaration public static implicit operator AsymmetricSignedPublicKey(PublicKeySuite suite) Parameters Type Name Description PublicKeySuite suite Public key suite Returns Type Description AsymmetricSignedPublicKey Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> ICloneable IEquatable<T>"
  },
  "api/wan24.Crypto.PublicKeySuiteStore.html": {
    "href": "api/wan24.Crypto.PublicKeySuiteStore.html",
    "title": "Class PublicKeySuiteStore | wan24-Crypto",
    "keywords": "Class PublicKeySuiteStore Public key suite store Inheritance object DisposableBase DisposableStreamSerializerBase PublicKeySuiteStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class PublicKeySuiteStore : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source PublicKeySuiteStore() Constructor Declaration public PublicKeySuiteStore() Fields | Edit this page View Source ChangeToken Change token Declaration protected readonly DisposableChangeToken ChangeToken Field Value Type Description DisposableChangeToken | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int | Edit this page View Source _Suites Public key suites (key is the signed public key ID) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, PublicKeySuite> _Suites Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, PublicKeySuite> Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public bool HasChanged { get; } Property Value Type Description bool | Edit this page View Source SuiteCount Number of public key suites Declaration public virtual int SuiteCount { get; } Property Value Type Description int | Edit this page View Source Suites Public key suites (key is the signed public key ID) Declaration public virtual ConcurrentDictionary<EquatableArray<byte>, PublicKeySuite> Suites { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, PublicKeySuite> Methods | Edit this page View Source AddSuite(in PublicKeySuite) Add a public key suite Declaration public virtual void AddSuite(in PublicKeySuite suite) Parameters Type Name Description PublicKeySuite suite Public key suite (requires a signed public key; will be disposed!) | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source GetSuite(byte[]) Get a public key suite Declaration public virtual PublicKeySuite? GetSuite(byte[] id) Parameters Type Name Description byte[] id Signed public key ID Returns Type Description PublicKeySuite Public key suite (will be disposed) | Edit this page View Source GetSuiteByAttribute(string, string) Get a public key suite by an attribute Declaration public virtual PublicKeySuite? GetSuiteByAttribute(string key, string value) Parameters Type Name Description string key Key string value Value Returns Type Description PublicKeySuite Public key suite (will be disposed) | Edit this page View Source GetSuitesByAttribute(string, string) Get a public key suites by an attribute Declaration public virtual IEnumerable<PublicKeySuite> GetSuitesByAttribute(string key, string value) Parameters Type Name Description string key Key string value Value Returns Type Description IEnumerable<PublicKeySuite> Public key suites (will be disposed) | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public IDisposable RegisterChangeCallback(Action<object?> callback, object? state) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. | Edit this page View Source RemoveSuite(byte[]) Remove and dispose a public key suite Declaration public virtual void RemoveSuite(byte[] id) Parameters Type Name Description byte[] id Signed public key ID | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetChanged(in string) Set changed Declaration protected virtual void SetChanged(in string propertyName) Parameters Type Name Description string propertyName Property name Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.RND.RNGAsync_Delegate.html": {
    "href": "api/wan24.Crypto.RND.RNGAsync_Delegate.html",
    "title": "Delegate RND.RNGAsync_Delegate | wan24-Crypto",
    "keywords": "Delegate RND.RNGAsync_Delegate Delegate for a random generator Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task RND.RNGAsync_Delegate(Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Buffer to fill with random material Returns Type Description Task Delegate for a random generator"
  },
  "api/wan24.Crypto.RND.RNG_Delegate.html": {
    "href": "api/wan24.Crypto.RND.RNG_Delegate.html",
    "title": "Delegate RND.RNG_Delegate | wan24-Crypto",
    "keywords": "Delegate RND.RNG_Delegate Delegate for a random generator Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void RND.RNG_Delegate(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer to fill with random material"
  },
  "api/wan24.Crypto.RND.html": {
    "href": "api/wan24.Crypto.RND.html",
    "title": "Class RND | wan24-Crypto",
    "keywords": "Class RND Random generators Inheritance object RND Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class RND Fields | Edit this page View Source HasDevRandom Has /dev/random? Declaration public static readonly bool HasDevRandom Field Value Type Description bool | Edit this page View Source RANDOM Random filename Declaration public const string RANDOM = \"/dev/random\" Field Value Type Description string Properties | Edit this page View Source AutoRngSeeding Automatic RNG seeding flags Declaration [CliConfig] public static RngSeedingTypes AutoRngSeeding { get; set; } Property Value Type Description RngSeedingTypes | Edit this page View Source DevRandomPool /dev/random readable stream pool Declaration public static DevRandomStreamPool? DevRandomPool { get; set; } Property Value Type Description DevRandomStreamPool | Edit this page View Source FillBytes Fill a buffer with random bytes Declaration public static RND.RNG_Delegate FillBytes { get; set; } Property Value Type Description RND.RNG_Delegate | Edit this page View Source FillBytesAsync Fill a buffer with random bytes Declaration public static RND.RNGAsync_Delegate FillBytesAsync { get; set; } Property Value Type Description RND.RNGAsync_Delegate | Edit this page View Source Generator Random data generator Declaration public static IRng? Generator { get; set; } Property Value Type Description IRng | Edit this page View Source RequireDevRandom Require /dev/random (will throw, if not available)? Declaration [CliConfig] public static bool RequireDevRandom { get; set; } Property Value Type Description bool | Edit this page View Source SeedConsumer RNG seed consumer Declaration public static ISeedConsumer? SeedConsumer { get; set; } Property Value Type Description ISeedConsumer | Edit this page View Source UseDevRandom Use /dev/random, if available? Declaration [CliConfig] public static bool UseDevRandom { get; set; } Property Value Type Description bool Methods | Edit this page View Source AddDevRandomSeed(ReadOnlySpan<byte>) Add seed to /dev/random (if available) Declaration public static void AddDevRandomSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddDevRandomSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to /dev/random (if available) Declaration public static Task AddDevRandomSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public static void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public static Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DefaultRng(Span<byte>) Default RNG (uses /dev/random, if possible; falls back to RandomNumberGenerator) Declaration public static void DefaultRng(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer to fill with random material | Edit this page View Source DefaultRngAsync(Memory<byte>) Default RNG (uses /dev/random, if possible; falls back to RandomNumberGenerator) Declaration public static Task DefaultRngAsync(Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Buffer to fill with random material Returns Type Description Task | Edit this page View Source GetBytes(in int) Get random bytes Declaration public static byte[] GetBytes(in int count) Parameters Type Name Description int count Number of random bytes to generate Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int) Get random bytes Declaration public static Task<byte[]> GetBytesAsync(int count) Parameters Type Name Description int count Number of random bytes to generate Returns Type Description Task<byte[]> Random bytes | Edit this page View Source GetDevRandom() Get a /dev/random stream Declaration public static Stream GetDevRandom() Returns Type Description Stream /dev/random stream"
  },
  "api/wan24.Crypto.RandomDataGenerator.html": {
    "href": "api/wan24.Crypto.RandomDataGenerator.html",
    "title": "Class RandomDataGenerator | wan24-Crypto",
    "keywords": "Class RandomDataGenerator Random data generator (uses /dev/random, if possible; defaults to RandomNumberGenerator) Inheritance object DisposableBase HostedServiceBase RandomDataGenerator Implements IWillDispose IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IExportUserActions ISeedableRng IRng ISeedConsumer Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.RaiseOnException() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.OnException DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RandomDataGenerator : HostedServiceBase, IWillDispose, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IExportUserActions, ISeedableRng, IRng, ISeedConsumer Remarks Constructor Constructors | Edit this page View Source RandomDataGenerator(in int) Random data generator (uses /dev/random, if possible; defaults to RandomNumberGenerator) Declaration public RandomDataGenerator(in int capacity) Parameters Type Name Description int capacity Capacity in bytes Remarks Constructor | Edit this page View Source RandomDataGenerator(in int, in bool) Constructor Declaration public RandomDataGenerator(in int capacity, in bool useRnd) Parameters Type Name Description int capacity Capacity in bytes bool useRnd Use the RND methods? | Edit this page View Source RandomDataGenerator(in int, in RNG_Delegate, in RNGAsync_Delegate) Constructor Declaration public RandomDataGenerator(in int capacity, in RND.RNG_Delegate rng, in RND.RNGAsync_Delegate rngAsync) Parameters Type Name Description int capacity Capacity in bytes RND.RNG_Delegate rng RNG RND.RNGAsync_Delegate rngAsync RNG Fields | Edit this page View Source RandomData Random data Declaration protected readonly BlockingBufferStream RandomData Field Value Type Description BlockingBufferStream | Edit this page View Source Rng RNG Declaration protected readonly RND.RNG_Delegate Rng Field Value Type Description RND.RNG_Delegate | Edit this page View Source RngAsync RNG Declaration protected readonly RND.RNGAsync_Delegate RngAsync Field Value Type Description RND.RNGAsync_Delegate | Edit this page View Source UseRng Use the RNG delegates? Declaration protected readonly bool UseRng Field Value Type Description bool Properties | Edit this page View Source UseDevRandom Use /dev/random, if available? Declaration public bool UseDevRandom { get; set; } Property Value Type Description bool | Edit this page View Source UseFallback Use fallback methods? Declaration public bool UseFallback { get; set; } Property Value Type Description bool Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public virtual void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public virtual Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.HostedServiceBase.DisposeCore() | Edit this page View Source Fill(in Span<byte>) Fill a buffer with random data (used as fallback; override to define a custom fallback RNG, when not using the Rng and RngAsync delegates) Declaration protected virtual void Fill(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer | Edit this page View Source FillAsync(Memory<byte>) Fill a buffer with random data (used as fallback; override to define a custom fallback RNG, when not using the Rng and RngAsync delegates) Declaration protected virtual Task FillAsync(Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Buffer Returns Type Description Task | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides wan24.Core.HostedServiceBase.WorkerAsync() Implements wan24.Core.IWillDispose wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IExportUserActions ISeedableRng IRng ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.Rng.html": {
    "href": "api/wan24.Crypto.Rng.html",
    "title": "Class Rng | wan24-Crypto",
    "keywords": "Class Rng Random number generator Inheritance object RandomNumberGenerator Rng RngAdapter Implements IDisposable IRng Inherited Members RandomNumberGenerator.Create() RandomNumberGenerator.Create(string) RandomNumberGenerator.Dispose() RandomNumberGenerator.Dispose(bool) RandomNumberGenerator.GetHexString(int, bool) RandomNumberGenerator.GetHexString(Span<char>, bool) RandomNumberGenerator.GetItems<T>(ReadOnlySpan<T>, int) RandomNumberGenerator.GetItems<T>(ReadOnlySpan<T>, Span<T>) RandomNumberGenerator.GetString(ReadOnlySpan<char>, int) RandomNumberGenerator.Shuffle<T>(Span<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class Rng : RandomNumberGenerator, IDisposable, IRng Constructors | Edit this page View Source Rng() Constructor Declaration public Rng() Properties | Edit this page View Source Instance Singleton instance Declaration public static Rng Instance { get; set; } Property Value Type Description Rng Methods | Edit this page View Source Fill(Span<byte>) Declaration public static void Fill(Span<byte> data) Parameters Type Name Description Span<byte> data | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public virtual Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public virtual Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(byte[]) When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values. Declaration public override void GetBytes(byte[] data) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random bytes. Overrides RandomNumberGenerator.GetBytes(byte[]) | Edit this page View Source GetBytes(byte[], int, int) Fills the specified byte array with a cryptographically strong random sequence of values. Declaration public override void GetBytes(byte[] data, int offset, int count) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random bytes. int offset The index of the array to start the fill operation. int count The number of bytes to fill. Overrides RandomNumberGenerator.GetBytes(byte[], int, int) Exceptions Type Condition ArgumentNullException data is null. ArgumentOutOfRangeException offset or count is less than 0 ArgumentException offset plus count exceeds the length of data. | Edit this page View Source GetBytes(int) Declaration public static byte[] GetBytes(int count) Parameters Type Name Description int count Returns Type Description byte[] | Edit this page View Source GetBytes(in int) Get random bytes Declaration public virtual byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytes(Span<byte>) Fills a span with cryptographically strong random bytes. Declaration public override void GetBytes(Span<byte> data) Parameters Type Name Description Span<byte> data The span to fill with cryptographically strong random bytes. Overrides RandomNumberGenerator.GetBytes(Span<byte>) | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public virtual Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes | Edit this page View Source GetInt32(int) Declaration public static int GetInt32(int toExclusive) Parameters Type Name Description int toExclusive Returns Type Description int | Edit this page View Source GetInt32(int, int) Declaration public static int GetInt32(int fromInclusive, int toExclusive) Parameters Type Name Description int fromInclusive int toExclusive Returns Type Description int | Edit this page View Source GetInt32Async(int) Get a random 32 bit integer Declaration public static Task<int> GetInt32Async(int toExclusive) Parameters Type Name Description int toExclusive To exclusive Returns Type Description Task<int> Random integer | Edit this page View Source GetInt32Async(int, int) Get a random 32 bit integer Declaration public static Task<int> GetInt32Async(int fromInclusive, int toExclusive) Parameters Type Name Description int fromInclusive From inclusive int toExclusive To exclusive Returns Type Description Task<int> Random integer | Edit this page View Source GetNonZeroBytes(byte[]) When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values. Declaration public override void GetNonZeroBytes(byte[] data) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random nonzero bytes. Overrides RandomNumberGenerator.GetNonZeroBytes(byte[]) | Edit this page View Source GetNonZeroBytes(Span<byte>) Fills a byte span with a cryptographically strong random sequence of nonzero values. Declaration public override void GetNonZeroBytes(Span<byte> data) Parameters Type Name Description Span<byte> data The span to fill with cryptographically strong random nonzero bytes. Overrides RandomNumberGenerator.GetNonZeroBytes(Span<byte>) | Edit this page View Source GetNonZeroBytesAsync(Memory<byte>) Get non-zero random bytes Declaration public virtual Task GetNonZeroBytesAsync(Memory<byte> data) Parameters Type Name Description Memory<byte> data Data Returns Type Description Task Implements IDisposable IRng Extension Methods RngExtensions.GetInt32(RandomNumberGenerator, int) RngExtensions.GetInt32(RandomNumberGenerator, int, int) RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.RngAdapter.html": {
    "href": "api/wan24.Crypto.RngAdapter.html",
    "title": "Class RngAdapter | wan24-Crypto",
    "keywords": "Class RngAdapter IRng to RandomNumberGenerator adapter Inheritance object RandomNumberGenerator Rng RngAdapter Implements IDisposable IRng Inherited Members Rng.Instance Rng.GetBytes(in int) Rng.GetBytesAsync(int, CancellationToken) Rng.FillBytes(in Span<byte>) Rng.FillBytesAsync(Memory<byte>, CancellationToken) Rng.Fill(Span<byte>) Rng.GetInt32(int, int) Rng.GetInt32(int) Rng.GetInt32Async(int, int) Rng.GetInt32Async(int) Rng.GetBytes(int) RandomNumberGenerator.Create() RandomNumberGenerator.Create(string) RandomNumberGenerator.Dispose() RandomNumberGenerator.GetHexString(int, bool) RandomNumberGenerator.GetHexString(Span<char>, bool) RandomNumberGenerator.GetItems<T>(ReadOnlySpan<T>, int) RandomNumberGenerator.GetItems<T>(ReadOnlySpan<T>, Span<T>) RandomNumberGenerator.GetString(ReadOnlySpan<char>, int) RandomNumberGenerator.Shuffle<T>(Span<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class RngAdapter : Rng, IDisposable, IRng Remarks Constructor Constructors | Edit this page View Source RngAdapter(IRng) IRng to RandomNumberGenerator adapter Declaration public RngAdapter(IRng rng) Parameters Type Name Description IRng rng Random number generator Remarks Constructor Properties | Edit this page View Source RNG Random number generator Declaration public IRng RNG { get; } Property Value Type Description IRng Methods | Edit this page View Source GetBytes(byte[]) When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values. Declaration public override void GetBytes(byte[] data) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random bytes. Overrides Rng.GetBytes(byte[]) | Edit this page View Source GetBytes(byte[], int, int) Fills the specified byte array with a cryptographically strong random sequence of values. Declaration public override void GetBytes(byte[] data, int offset, int count) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random bytes. int offset The index of the array to start the fill operation. int count The number of bytes to fill. Overrides Rng.GetBytes(byte[], int, int) Exceptions Type Condition ArgumentNullException data is null. ArgumentOutOfRangeException offset or count is less than 0 ArgumentException offset plus count exceeds the length of data. | Edit this page View Source GetBytes(Span<byte>) Fills a span with cryptographically strong random bytes. Declaration public override void GetBytes(Span<byte> data) Parameters Type Name Description Span<byte> data The span to fill with cryptographically strong random bytes. Overrides Rng.GetBytes(Span<byte>) | Edit this page View Source GetNonZeroBytes(byte[]) When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values. Declaration public override void GetNonZeroBytes(byte[] data) Parameters Type Name Description byte[] data The array to fill with cryptographically strong random nonzero bytes. Overrides Rng.GetNonZeroBytes(byte[]) | Edit this page View Source GetNonZeroBytes(Span<byte>) Fills a byte span with a cryptographically strong random sequence of nonzero values. Declaration public override void GetNonZeroBytes(Span<byte> data) Parameters Type Name Description Span<byte> data The span to fill with cryptographically strong random nonzero bytes. Overrides Rng.GetNonZeroBytes(Span<byte>) | Edit this page View Source GetNonZeroBytesAsync(Memory<byte>) Get non-zero random bytes Declaration public override Task GetNonZeroBytesAsync(Memory<byte> data) Parameters Type Name Description Memory<byte> data Data Returns Type Description Task Overrides Rng.GetNonZeroBytesAsync(Memory<byte>) Implements IDisposable IRng Extension Methods RngExtensions.GetInt32(RandomNumberGenerator, int) RngExtensions.GetInt32(RandomNumberGenerator, int, int) RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.RngBase.html": {
    "href": "api/wan24.Crypto.RngBase.html",
    "title": "Class RngBase | wan24-Crypto",
    "keywords": "Class RngBase Base class for a RNG Inheritance object RngBase BackupRng EntropyMonitor SeedableRngBase XorRng Implements IRng Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract class RngBase : IRng Constructors | Edit this page View Source RngBase() Constructor Declaration protected RngBase() Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public abstract Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public abstract Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes Implements IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.RngExtensions.html": {
    "href": "api/wan24.Crypto.RngExtensions.html",
    "title": "Class RngExtensions | wan24-Crypto",
    "keywords": "Class RngExtensions Rng extensions Inheritance object RngExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class RngExtensions Methods | Edit this page View Source GetInt32(RandomNumberGenerator, int) Get a random 32 bit integer Declaration public static int GetInt32(this RandomNumberGenerator rng, int toExclusive) Parameters Type Name Description RandomNumberGenerator rng Random number generator int toExclusive To exclusive Returns Type Description int Random integer | Edit this page View Source GetInt32(RandomNumberGenerator, int, int) Get a random 32 bit integer Declaration public static int GetInt32(this RandomNumberGenerator rng, int fromInclusive, int toExclusive) Parameters Type Name Description RandomNumberGenerator rng Random number generator int fromInclusive From inclusive int toExclusive To exclusive Returns Type Description int Random integer | Edit this page View Source GetInt32(IRng, int) Get a random 32 bit integer Declaration public static int GetInt32(this IRng rng, int toExclusive) Parameters Type Name Description IRng rng Random number generator int toExclusive To exclusive Returns Type Description int Random integer | Edit this page View Source GetInt32(IRng, int, int) Get a random 32 bit integer Declaration public static int GetInt32(this IRng rng, int fromInclusive, int toExclusive) Parameters Type Name Description IRng rng Random data generator int fromInclusive From inclusive int toExclusive To exclusive Returns Type Description int Random integer | Edit this page View Source GetInt32Async(IRng, int, int, CancellationToken) Get a random 32 bit integer Declaration public static Task<int> GetInt32Async(this IRng rng, int fromInclusive, int toExclusive, CancellationToken cancellationToken = default) Parameters Type Name Description IRng rng Random number generator int fromInclusive From inclusive int toExclusive To exclusive CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Random integer | Edit this page View Source GetInt32Async(IRng, int, CancellationToken) Get a random 32 bit integer Declaration public static Task<int> GetInt32Async(this IRng rng, int toExclusive, CancellationToken cancellationToken = default) Parameters Type Name Description IRng rng Random number generator int toExclusive To exclusive CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Random integer | Edit this page View Source GetNonZeroBytes(IRng, Span<byte>) Get non-zero random bytes Declaration public static void GetNonZeroBytes(this IRng rng, Span<byte> data) Parameters Type Name Description IRng rng Random number generator Span<byte> data Data | Edit this page View Source GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken) Get non-zero random bytes Declaration public static Task GetNonZeroBytesAsync(this IRng rng, Memory<byte> data, CancellationToken cancellationToken = default) Parameters Type Name Description IRng rng Random number generator Memory<byte> data Data CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Crypto.RngOnlineSeedTimer.html": {
    "href": "api/wan24.Crypto.RngOnlineSeedTimer.html",
    "title": "Class RngOnlineSeedTimer | wan24-Crypto",
    "keywords": "Class RngOnlineSeedTimer The online seed timer applies https received seeds in an interval (requests the first seed during startup) Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase RngOnlineSeedTimer Implements IWillDispose IExportUserActions ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimedHostedServiceBase.Timer TimedHostedServiceBase.RunningEvent TimedHostedServiceBase.WorkerSync TimedHostedServiceBase.SyncControl TimedHostedServiceBase._Interval TimedHostedServiceBase.SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) TimedHostedServiceBase.StartAsync(CancellationToken) TimedHostedServiceBase.StopAsync(CancellationToken) TimedHostedServiceBase.StartTimerAsync(CancellationToken) TimedHostedServiceBase.StopTimerAsync(CancellationToken) TimedHostedServiceBase.AfterStartAsync(CancellationToken) TimedHostedServiceBase.StoppingAsync(CancellationToken) TimedHostedServiceBase.AfterStopAsync(CancellationToken) TimedHostedServiceBase.WorkerAsync() TimedHostedServiceBase.EnableTimerAsync() TimedHostedServiceBase.RaiseOnRan() TimedHostedServiceBase.GUID TimedHostedServiceBase.CanPause TimedHostedServiceBase.State TimedHostedServiceBase.Interval TimedHostedServiceBase.TimerType TimedHostedServiceBase.LastRun TimedHostedServiceBase.LastDuration TimedHostedServiceBase.NextRun TimedHostedServiceBase.RunOnce TimedHostedServiceBase.OnRan HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.RaiseOnException() HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.OnException DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RngOnlineSeedTimer : TimedHostedServiceBase, IWillDispose, IExportUserActions, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source RngOnlineSeedTimer(in double, in ISeedableRng?, in string, in int, in HttpClient?) Constructor Declaration public RngOnlineSeedTimer(in double interval = 28800000, in ISeedableRng? rng = null, in string uri = \"https://rng.wan24.de/seed/bin?len=256\", in int length = 256, in HttpClient? http = null) Parameters Type Name Description double interval Seed request interval in ms (default is 8 hours) ISeedableRng rng RNG to seed (if null, RND will be seeded) string uri URI to GET the seed (byte sequence) from int length Seed length in byte to receive from the given URI HttpClient http http client to use (will be disposed!) Fields | Edit this page View Source DEFAULT_INTERVAL Default re-seed interval in ms Declaration public const double DEFAULT_INTERVAL = 28800000 Field Value Type Description double | Edit this page View Source DEFAULT_SEED_LENGTH Default seed length in byte Declaration public const int DEFAULT_SEED_LENGTH = 256 Field Value Type Description int | Edit this page View Source DEFAULT_URI Default URI (private and free service without any warranty!) Declaration public const string DEFAULT_URI = \"https://rng.wan24.de/seed/bin?len=256\" Field Value Type Description string | Edit this page View Source Http http client Declaration protected readonly HttpClient Http Field Value Type Description HttpClient | Edit this page View Source Seed Seed Declaration protected readonly byte[] Seed Field Value Type Description byte[] Properties | Edit this page View Source RNG RNG to seed (if null, RND will be seeded) Declaration public ISeedableRng? RNG { get; } Property Value Type Description ISeedableRng | Edit this page View Source SeedLength Seed length in byte Declaration public int SeedLength { get; } Property Value Type Description int | Edit this page View Source URI URI to get the seed from (without trailing slash) Declaration public string URI { get; } Property Value Type Description string | Edit this page View Source XorRnd XOR RND generated bytes to the received seeds? Declaration public bool XorRnd { get; set; } Property Value Type Description bool Methods | Edit this page View Source BeforeStartAsync(CancellationToken) Before starting Declaration protected override Task BeforeStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.BeforeStartAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides TimedHostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.TimedHostedServiceBase.DisposeCore() | Edit this page View Source RequestSeedAsync(CancellationToken) Request fresh seed online (need to be written to Seed) Declaration protected virtual Task<int> RequestSeedAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Number of received seed bytes | Edit this page View Source SeedAsync(CancellationToken) Receive and process online seed Declaration public virtual Task SeedAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected override sealed Task TimedWorkerAsync() Returns Type Description Task Overrides wan24.Core.TimedHostedServiceBase.TimedWorkerAsync() | Edit this page View Source TimedWorkerAsync(CancellationToken) Timed worker Declaration protected virtual Task<bool> TimedWorkerAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If seeded successfully Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions wan24.Core.ITimer wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.RngSeedTimer.html": {
    "href": "api/wan24.Crypto.RngSeedTimer.html",
    "title": "Class RngSeedTimer | wan24-Crypto",
    "keywords": "Class RngSeedTimer RNG seed timer seeds a seed consumer using random data from a given RNG Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase RngSeedTimer Implements IWillDispose IExportUserActions ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimedHostedServiceBase.SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) TimedHostedServiceBase.StartAsync(CancellationToken) TimedHostedServiceBase.StopAsync(CancellationToken) TimedHostedServiceBase.GUID TimedHostedServiceBase.CanPause TimedHostedServiceBase.State TimedHostedServiceBase.Interval TimedHostedServiceBase.TimerType TimedHostedServiceBase.LastRun TimedHostedServiceBase.LastDuration TimedHostedServiceBase.NextRun TimedHostedServiceBase.RunOnce TimedHostedServiceBase.OnRan HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.OnException DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class RngSeedTimer : TimedHostedServiceBase, IWillDispose, IExportUserActions, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source RngSeedTimer(in IRng, in int, in double, in ISeedConsumer?) Constructor Declaration public RngSeedTimer(in IRng rng, in int seed, in double interval, in ISeedConsumer? seedConsumer = null) Parameters Type Name Description IRng rng RNG int seed Seed length in byte double interval Interval in ms ISeedConsumer seedConsumer Seed consumer Methods | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected override Task TimedWorkerAsync() Returns Type Description Task Overrides wan24.Core.TimedHostedServiceBase.TimedWorkerAsync() Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions wan24.Core.ITimer wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.RngSeederQueue.html": {
    "href": "api/wan24.Crypto.RngSeederQueue.html",
    "title": "Class RngSeederQueue | wan24-Crypto",
    "keywords": "Class RngSeederQueue RNG seeder (added seeds will be copied) Inheritance object DisposableBase HostedServiceBase QueueWorker ItemQueueWorkerBase<byte[]> RngSeederQueue Implements IWillDispose IExportUserActions IItemQueueWorker<byte[]> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider IProducerConsumerCollection<QueueWorker.Task_Delegate> IEnumerable<QueueWorker.Task_Delegate> ICollection IEnumerable ISeedableRng IRng ISeedConsumer Inherited Members ItemQueueWorkerBase<byte[]>.EnqueueAsync(byte[], CancellationToken) ItemQueueWorkerBase<byte[]>.TryEnqueue(byte[]) ItemQueueWorkerBase<byte[]>.EnqueueRangeAsync(IEnumerable<byte[]>, CancellationToken) ItemQueueWorkerBase<byte[]>.EnqueueRangeAsync(IAsyncEnumerable<byte[]>, CancellationToken) ItemQueueWorkerBase<byte[]>.ProcessItem(byte[], CancellationToken) QueueWorker.Queue QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.TryAdd(QueueWorker.Task_Delegate) QueueWorker.TryTake(out QueueWorker.Task_Delegate) QueueWorker.CopyTo(QueueWorker.Task_Delegate[], int) QueueWorker.ToArray() QueueWorker.GetEnumerator() QueueWorker.CopyTo(Array, int) QueueWorker.WorkerAsync() QueueWorker.GUID QueueWorker.Queued QueueWorker.State QueueWorker.Count QueueWorker.IsSynchronized QueueWorker.SyncRoot HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.Dispose(bool) HostedServiceBase.DisposeCore() HostedServiceBase.RaiseOnException() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.OnException DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RngSeederQueue : ItemQueueWorkerBase<byte[]>, IWillDispose, IExportUserActions, IItemQueueWorker<byte[]>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider, IProducerConsumerCollection<QueueWorker.Task_Delegate>, IEnumerable<QueueWorker.Task_Delegate>, ICollection, IEnumerable, ISeedableRng, IRng, ISeedConsumer Remarks Constructor Constructors | Edit this page View Source RngSeederQueue(in int, in ISeedableRng) RNG seeder (added seeds will be copied) Declaration public RngSeederQueue(in int capacity, in ISeedableRng rng) Parameters Type Name Description int capacity Queue capacity ISeedableRng rng Target RNG to seed Remarks Constructor Properties | Edit this page View Source RNG Seeded target RNG Declaration public ISeedableRng RNG { get; } Property Value Type Description ISeedableRng Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public virtual void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public virtual Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ProcessItem(byte[], CancellationToken) Process one item Declaration protected override Task ProcessItem(byte[] item, CancellationToken cancellationToken) Parameters Type Name Description byte[] item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides ItemQueueWorkerBase<byte[]>.ProcessItem(byte[], CancellationToken) Implements wan24.Core.IWillDispose wan24.Core.IExportUserActions wan24.Core.IItemQueueWorker<T> wan24.Core.IQueueWorker wan24.Core.IServiceWorkerStatus wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider IProducerConsumerCollection<T> IEnumerable<T> ICollection IEnumerable ISeedableRng IRng ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.RngSeedingStream-1.html": {
    "href": "api/wan24.Crypto.RngSeedingStream-1.html",
    "title": "Class RngSeedingStream<T> | wan24-Crypto",
    "keywords": "Class RngSeedingStream<T> Seeds an RNG with streamed cipher data Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> RngSeedingStream<T> RngSeedingStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout StreamBase.SyncObject StreamBase.StackInfo StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RngSeedingStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Remarks Constructor Constructors | Edit this page View Source RngSeedingStream(in T, in ISeedableRng?, in bool) Seeds an RNG with streamed cipher data Declaration public RngSeedingStream(in T cipherStream, in ISeedableRng? rng = null, in bool leaveOpen = false) Parameters Type Name Description T cipherStream Cipher data stream ISeedableRng rng RNG to seed (if not given, RND will be seeded) bool leaveOpen Leave the cipher stream open when disposing? Remarks Constructor Properties | Edit this page View Source RNG RNG to seed (if null, RND will be seeded) Declaration public ISeedableRng? RNG { get; } Property Value Type Description ISeedableRng Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration protected virtual void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration protected virtual Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides wan24.Core.WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements wan24.Core.IStreamWrapper wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.RngSeedingStream.html": {
    "href": "api/wan24.Crypto.RngSeedingStream.html",
    "title": "Class RngSeedingStream | wan24-Crypto",
    "keywords": "Class RngSeedingStream Seeds an RNG with streamed cipher data Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> RngSeedingStream<Stream> RngSeedingStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members RngSeedingStream<Stream>.RNG RngSeedingStream<Stream>.Read(byte[], int, int) RngSeedingStream<Stream>.Read(Span<byte>) RngSeedingStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) RngSeedingStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) RngSeedingStream<Stream>.ReadByte() RngSeedingStream<Stream>.Write(byte[], int, int) RngSeedingStream<Stream>.Write(ReadOnlySpan<byte>) RngSeedingStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) RngSeedingStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) RngSeedingStream<Stream>.WriteByte(byte) RngSeedingStream<Stream>.AddSeed(ReadOnlySpan<byte>) RngSeedingStream<Stream>.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout StreamBase.SyncObject StreamBase.StackInfo StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RngSeedingStream : RngSeedingStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source RngSeedingStream(in Stream, in ISeedableRng?, in bool) Seeds an RNG with streamed cipher data Declaration public RngSeedingStream(in Stream cipherStream, in ISeedableRng? rng = null, in bool leaveOpen = false) Parameters Type Name Description Stream cipherStream Cipher data stream ISeedableRng rng RNG to seed (if not given, RND will be seeded) bool leaveOpen Leave the cipher stream open when disposing? Remarks Constructor Implements wan24.Core.IStreamWrapper wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.RngSeedingTypes.html": {
    "href": "api/wan24.Crypto.RngSeedingTypes.html",
    "title": "Enum RngSeedingTypes | wan24-Crypto",
    "keywords": "Enum RngSeedingTypes RNG seeding types (CAUTION: be aware of patent US10402172B1!) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax [Flags] public enum RngSeedingTypes Fields Name Description CipherData Seed received cipher data during decryption Iv Seed received IV bytes during decryption None None (no automatic RNG seeding from decryption or external random sources) Random Seed received random data"
  },
  "api/wan24.Crypto.RngStream-1.html": {
    "href": "api/wan24.Crypto.RngStream-1.html",
    "title": "Class RngStream<T> | wan24-Crypto",
    "keywords": "Class RngStream<T> RNG stream Inheritance object MarshalByRefObject Stream StreamBase RngStream<T> RngStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members StreamBase.SyncObject StreamBase.StackInfo StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class RngStream<T> : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IRng where T : class, IRng Type Parameters Name Description T RNG type Remarks Constructor Constructors | Edit this page View Source RngStream(in T?) RNG stream Declaration public RngStream(in T? rng = null) Parameters Type Name Description T rng RNG (if null, RND will be used; will be disposed, if DisposeRng wasn't set to false) Remarks Constructor Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override sealed bool CanTimeout { get; } Property Value Type Description bool A value that determines whether the current stream can time out. Overrides Stream.CanTimeout | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override sealed bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source DisposeRng Dispose the RNG when disposing? Declaration public bool DisposeRng { get; set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override sealed long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override sealed long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source RNG RNG (will be disposed, if DisposeRng wasn't set to false) Declaration public T? RNG { get; } Property Value Type Description T | Edit this page View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override sealed int ReadTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Overrides Stream.ReadTimeout Exceptions Type Condition InvalidOperationException The ReadTimeout method always throws an InvalidOperationException. | Edit this page View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override sealed int WriteTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Overrides Stream.WriteTimeout Exceptions Type Condition InvalidOperationException The WriteTimeout method always throws an InvalidOperationException. Methods | Edit this page View Source BeginRead(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override sealed IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to read the data into. int offset The byte offset in buffer at which to begin writing data read from the stream. int count The maximum number of bytes to read. AsyncCallback callback An optional asynchronous callback, to be called when the read is complete. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. Overrides Stream.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous read past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the read operation. | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override sealed IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous write past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the write operation. | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override sealed void Close() Overrides wan24.Core.StreamBase.Close() | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override sealed void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override sealed Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override sealed void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override sealed Task DisposeCore() Returns Type Description Task Overrides wan24.Core.StreamBase.DisposeCore() | Edit this page View Source EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override sealed int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to finish. Returns Type Description int The number of bytes read from the stream, between zero (0) and the number of bytes requested. ReadAsync returns zero (0) only if zero bytes were requested or if no more bytes will be available because it's at the end of the stream; otherwise, read operations do not complete until at least one byte is available. If zero bytes are requested, read operations may complete immediately or may not complete until at least one byte is available (but without consuming any data). Overrides Stream.EndRead(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending read operation is not available. -or- The pending operation does not support reading. InvalidOperationException asyncResult did not originate from a BeginRead(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override sealed void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult A reference to the outstanding asynchronous I/O request. Overrides Stream.EndWrite(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending write operation is not available. -or- The pending operation does not support writing. InvalidOperationException asyncResult did not originate from a BeginWrite(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override sealed bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override sealed void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override sealed Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override sealed int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. Declaration [Obsolete(\"This Remoting API is not supported and throws PlatformNotSupportedException.\", DiagnosticId = \"SYSLIB0010\", UrlFormat = \"https://aka.ms/dotnet-warnings/{0}\")] public override sealed object InitializeLifetimeService() Returns Type Description object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Overrides MarshalByRefObject.InitializeLifetimeService() Exceptions Type Condition SecurityException The immediate caller does not have infrastructure permission. PlatformNotSupportedException .NET Core and .NET 5+ only: In all cases. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override sealed int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override sealed long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override sealed void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override sealed void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.RngStream.html": {
    "href": "api/wan24.Crypto.RngStream.html",
    "title": "Class RngStream | wan24-Crypto",
    "keywords": "Class RngStream RNG stream Inheritance object MarshalByRefObject Stream StreamBase RngStream<IRng> RngStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IRng Inherited Members RngStream<IRng>.RNG RngStream<IRng>.DisposeRng RngStream<IRng>.CanRead RngStream<IRng>.CanSeek RngStream<IRng>.CanWrite RngStream<IRng>.Length RngStream<IRng>.Position RngStream<IRng>.CanTimeout RngStream<IRng>.ReadTimeout RngStream<IRng>.WriteTimeout RngStream<IRng>.Seek(long, SeekOrigin) RngStream<IRng>.SetLength(long) RngStream<IRng>.Flush() RngStream<IRng>.FlushAsync(CancellationToken) RngStream<IRng>.BeginRead(byte[], int, int, AsyncCallback, object) RngStream<IRng>.BeginWrite(byte[], int, int, AsyncCallback, object) RngStream<IRng>.EndRead(IAsyncResult) RngStream<IRng>.EndWrite(IAsyncResult) RngStream<IRng>.ReadByte() RngStream<IRng>.Read(byte[], int, int) RngStream<IRng>.Read(Span<byte>) RngStream<IRng>.ReadAsync(byte[], int, int, CancellationToken) RngStream<IRng>.ReadAsync(Memory<byte>, CancellationToken) RngStream<IRng>.WriteByte(byte) RngStream<IRng>.Write(byte[], int, int) RngStream<IRng>.Write(ReadOnlySpan<byte>) RngStream<IRng>.WriteAsync(byte[], int, int, CancellationToken) RngStream<IRng>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) RngStream<IRng>.Close() RngStream<IRng>.CopyTo(Stream, int) RngStream<IRng>.CopyToAsync(Stream, int, CancellationToken) RngStream<IRng>.Equals(object) RngStream<IRng>.GetHashCode() RngStream<IRng>.InitializeLifetimeService() RngStream<IRng>.GetBytes(in int) RngStream<IRng>.GetBytesAsync(int, CancellationToken) RngStream<IRng>.FillBytes(in Span<byte>) RngStream<IRng>.FillBytesAsync(Memory<byte>, CancellationToken) StreamBase.StackInfo StreamBase.DisposeAsync() StreamBase.CreateStackInfo StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class RngStream : RngStream<IRng>, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IRng Remarks Constructor Constructors | Edit this page View Source RngStream(in IRng?) RNG stream Declaration public RngStream(in IRng? rng = null) Parameters Type Name Description IRng rng RNG (if null, RND will be used; will be disposed, if DisposeRng wasn't set to false) Remarks Constructor Properties | Edit this page View Source Instance Singleton instance (which uses RND per default) Declaration public static RngStream Instance { get; set; } Property Value Type Description RngStream Implements wan24.Core.IStream wan24.Core.IDisposableObject IDisposable IAsyncDisposable IRng Extension Methods ClientAuth.AuthenticateAsync(Stream, ClientAuthOptions?, CancellationToken) ClientAuth.SignupAsync(Stream, ClientAuthOptions?, CancellationToken) PakeClientAuth.AuthenticateAsync(Stream, PakeClientAuthOptions?, CancellationToken) PakeClientAuth.SignupAsync(Stream, PakeClientAuthOptions?, CancellationToken) CryptoExtensions.ValidateMac(Stream, byte[], byte[], bool, CryptoOptions?) CryptoExtensions.ValidateMacAsync(Stream, byte[], byte[], bool, CryptoOptions?, CancellationToken) EncryptionHelper.Decrypt(Stream, Stream, byte[], CryptoOptions?) EncryptionHelper.Decrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.DecryptAsync(Stream, Stream, byte[], CryptoOptions?, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) EncryptionHelper.Encrypt(Stream, Stream, byte[], CryptoOptions?, MacStreams?) EncryptionHelper.Encrypt(Stream, Stream, CryptoOptions) EncryptionHelper.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?) EncryptionHelper.EncryptAsync(Stream, Stream, byte[], CryptoOptions?, MacStreams?, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionHelper.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions?, CancellationToken) HashHelper.Hash(Stream, CryptoOptions?) HashHelper.HashAsync(Stream, CryptoOptions?, CancellationToken) MacHelper.Mac(Stream, byte[], CryptoOptions?) MacHelper.MacAsync(Stream, byte[], CryptoOptions?, CancellationToken) StreamSerializerExtensions.ReadTimeoutToken(Stream, ArrayPool<byte>?) StreamSerializerExtensions.ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken) CryptoExtensions.AddPaddingAsync<T>(T, int, long?, CancellationToken) CryptoExtensions.AddPadding<T>(T, int, long?) StreamSerializerExtensions.WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) StreamSerializerExtensions.Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?)"
  },
  "api/wan24.Crypto.SecureValue-1.html": {
    "href": "api/wan24.Crypto.SecureValue-1.html",
    "title": "Class SecureValue<T> | wan24-Crypto",
    "keywords": "Class SecureValue<T> Secure value (keeps a value encrypted after a timeout without any access, re-crypts from time to time; see https://static.usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf) Inheritance object DisposableBase SecureValue SecureValue<T> Implements IWillDispose ISecureValue IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members SecureValue.DefaultEncryptTimeout SecureValue.DefaultRecryptTimeout SecureValue.GUID SecureValue.Name SecureValue.State SecureValue.Value SecureValue.Options SecureValue.KeyLen SecureValue.EncryptTimeout SecureValue.RecryptTimeout SecureValue.IsEncrypted SecureValue.LastAccess SecureValue.EncryptedSince SecureValue.AccessCount SecureValue.GetValueAsync(CancellationToken) SecureValue.SetValueAsync(byte[], CancellationToken) SecureValue.OnAccess SecureValue.RaiseOnAccess() SecureValue.DEFAULT_KEY_LEN SecureValue.Encrypt() SecureValue.Decrypt() SecureValue.Recrypt() SecureValue.Dispose(bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class SecureValue<T> : SecureValue, IWillDispose, ISecureValue, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : class, IStreamSerializer, new() Type Parameters Name Description T Constructors | Edit this page View Source SecureValue(in byte[], in TimeSpan?, in TimeSpan?, in CryptoOptions?, in int) Constructor Declaration public SecureValue(in byte[] value, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in int keyLen = 64) Parameters Type Name Description byte[] value Value (will be cleared!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example) CryptoOptions options Options (will be cleared!) int keyLen Random value encryption key length in bytes | Edit this page View Source SecureValue(in T, in TimeSpan?, in TimeSpan?, in CryptoOptions?, in int) Constructor Declaration public SecureValue(in T value, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in int keyLen = 64) Parameters Type Name Description T value Value TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example) CryptoOptions options Options (will be cleared!) int keyLen Random value encryption key length in bytes Properties | Edit this page View Source Object Get/set as object Declaration public virtual T Object { get; set; } Property Value Type Description T Methods | Edit this page View Source GetObjectAsync(CancellationToken) Get the object Declaration public Task<T> GetObjectAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object | Edit this page View Source SetObjectAsync(T, CancellationToken) Set the object Declaration public Task SetObjectAsync(T obj, CancellationToken cancellationToken = default) Parameters Type Name Description T obj Object CancellationToken cancellationToken Cancellation token Returns Type Description Task Operators | Edit this page View Source implicit operator T(SecureValue<T>) Cast as object Declaration public static implicit operator T(SecureValue<T> value) Parameters Type Name Description SecureValue<T> value Value Returns Type Description T Implements wan24.Core.IWillDispose ISecureValue wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.SecureValue.Access_Delegate.html": {
    "href": "api/wan24.Crypto.SecureValue.Access_Delegate.html",
    "title": "Delegate SecureValue.Access_Delegate | wan24-Crypto",
    "keywords": "Delegate SecureValue.Access_Delegate Delegate for an OnAccess event handler Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate void SecureValue.Access_Delegate(SecureValue value, EventArgs e) Parameters Type Name Description SecureValue value Secure value EventArgs e Arguments"
  },
  "api/wan24.Crypto.SecureValue.html": {
    "href": "api/wan24.Crypto.SecureValue.html",
    "title": "Class SecureValue | wan24-Crypto",
    "keywords": "Class SecureValue Secure value (keeps a value encrypted after a timeout without any access, re-crypts from time to time; see https://static.usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf) Inheritance object DisposableBase SecureValue SecureValue<T> Implements IWillDispose ISecureValue IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class SecureValue : DisposableBase, IWillDispose, ISecureValue, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source SecureValue(in byte[], in TimeSpan?, in TimeSpan?, in CryptoOptions?, in int) Constructor Declaration public SecureValue(in byte[] value, in TimeSpan? encryptTimeout = null, in TimeSpan? recryptTimeout = null, in CryptoOptions? options = null, in int keyLen = 64) Parameters Type Name Description byte[] value Value (will be cleared!) TimeSpan? encryptTimeout Encrypt timeout (Zero to keep encrypted all the time) TimeSpan? recryptTimeout Re-crypt timeout (one minute, for example) CryptoOptions options Options (will be cleared!) int keyLen Random value encryption key length in bytes Fields | Edit this page View Source DEFAULT_KEY_LEN Default value encryption random key length in bytes Declaration protected const int DEFAULT_KEY_LEN = 64 Field Value Type Description int Properties | Edit this page View Source AccessCount Access count Declaration public long AccessCount { get; } Property Value Type Description long | Edit this page View Source DefaultEncryptTimeout Default encrypt timeout Declaration public static TimeSpan DefaultEncryptTimeout { get; set; } Property Value Type Description TimeSpan | Edit this page View Source DefaultRecryptTimeout Default re-crypt timeout Declaration public static TimeSpan DefaultRecryptTimeout { get; set; } Property Value Type Description TimeSpan | Edit this page View Source EncryptTimeout Encrypt timeout Declaration public TimeSpan EncryptTimeout { get; } Property Value Type Description TimeSpan | Edit this page View Source EncryptedSince Encryption time Declaration public DateTime EncryptedSince { get; } Property Value Type Description DateTime | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source IsEncrypted Is the value encrypted at present? Declaration public bool IsEncrypted { get; } Property Value Type Description bool | Edit this page View Source KeyLen Random value encryption key length in bytes Declaration [Range(1, 255)] public int KeyLen { get; set; } Property Value Type Description int | Edit this page View Source LastAccess Last access time Declaration public DateTime LastAccess { get; } Property Value Type Description DateTime | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Options Options Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions | Edit this page View Source RecryptTimeout Recrypt timeout Declaration public TimeSpan RecryptTimeout { get; } Property Value Type Description TimeSpan | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Value Value (should/will be cleared!) Declaration [NoValidation(false)] [SensitiveData] public byte[] Value { get; set; } Property Value Type Description byte[] Methods | Edit this page View Source Decrypt() Decrypt Declaration protected virtual byte[] Decrypt() Returns Type Description byte[] Value (should be cleared!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source Encrypt() Encrypt Declaration protected virtual void Encrypt() | Edit this page View Source GetValueAsync(CancellationToken) Get the value Declaration public Task<byte[]> GetValueAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Value (should be cleared!) | Edit this page View Source RaiseOnAccess() Raise the OnAccess event Declaration protected virtual void RaiseOnAccess() | Edit this page View Source Recrypt() Re-crypt Declaration protected virtual void Recrypt() | Edit this page View Source SetValueAsync(byte[], CancellationToken) Set the value Declaration public Task SetValueAsync(byte[] value, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] value Value (will be cleared!) CancellationToken cancellationToken Cancellation token Returns Type Description Task Events | Edit this page View Source OnAccess Raised on value access Declaration public event SecureValue.Access_Delegate? OnAccess Event Type Type Description SecureValue.Access_Delegate Operators | Edit this page View Source implicit operator SecureValue(in byte[]) Cast as SecureValue (don't forget to dispose!) Declaration public static implicit operator SecureValue(in byte[] value) Parameters Type Name Description byte[] value Value (will be cleared!) Returns Type Description SecureValue | Edit this page View Source implicit operator SecureValue(in ReadOnlyMemory<byte>) Cast as SecureValue (don't forget to dispose!) Declaration public static implicit operator SecureValue(in ReadOnlyMemory<byte> value) Parameters Type Name Description ReadOnlyMemory<byte> value Value (will be copied) Returns Type Description SecureValue | Edit this page View Source implicit operator SecureValue(in ReadOnlySpan<byte>) Cast as SecureValue (don't forget to dispose!) Declaration public static implicit operator SecureValue(in ReadOnlySpan<byte> value) Parameters Type Name Description ReadOnlySpan<byte> value Value (will be copied) Returns Type Description SecureValue | Edit this page View Source implicit operator SecureValue(in SecureByteArray) Cast as SecureValue (don't forget to dispose!) Declaration public static implicit operator SecureValue(in SecureByteArray value) Parameters Type Name Description SecureByteArray value Value (will be copied) Returns Type Description SecureValue | Edit this page View Source implicit operator SecureValue(in SecureByteArrayStruct) Cast as SecureValue (don't forget to dispose!) Declaration public static implicit operator SecureValue(in SecureByteArrayStruct value) Parameters Type Name Description SecureByteArrayStruct value Value (will be copied) Returns Type Description SecureValue | Edit this page View Source implicit operator byte[](in SecureValue) Cast as value (should be cleared!) Declaration public static implicit operator byte[](in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description byte[] | Edit this page View Source implicit operator Memory<byte>(in SecureValue) Cast as value (should be cleaned!) Declaration public static implicit operator Memory<byte>(in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description Memory<byte> | Edit this page View Source implicit operator Span<byte>(in SecureValue) Cast as value (should be cleaned!) Declaration public static implicit operator Span<byte>(in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description Span<byte> | Edit this page View Source implicit operator SecureByteArray(in SecureValue) Cast as value (should be disposed!) Declaration public static implicit operator SecureByteArray(in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description SecureByteArray | Edit this page View Source implicit operator SecureByteArrayStruct(in SecureValue) Cast as value (should be disposed!) Declaration public static implicit operator SecureByteArrayStruct(in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description SecureByteArrayStruct | Edit this page View Source implicit operator SecureByteArrayStructSimple(in SecureValue) Cast as value (should be disposed!) Declaration public static implicit operator SecureByteArrayStructSimple(in SecureValue value) Parameters Type Name Description SecureValue value Value Returns Type Description SecureByteArrayStructSimple Implements wan24.Core.IWillDispose ISecureValue wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Core.IStatusProvider"
  },
  "api/wan24.Crypto.SecureValueTable.html": {
    "href": "api/wan24.Crypto.SecureValueTable.html",
    "title": "Class SecureValueTable | wan24-Crypto",
    "keywords": "Class SecureValueTable Secure value table Inheritance object SecureValueTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class SecureValueTable Fields | Edit this page View Source Values Values (key is the GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, SecureValue> Values Field Value Type Description ConcurrentChangeTokenDictionary<string, SecureValue>"
  },
  "api/wan24.Crypto.SeedableRngBase.html": {
    "href": "api/wan24.Crypto.SeedableRngBase.html",
    "title": "Class SeedableRngBase | wan24-Crypto",
    "keywords": "Class SeedableRngBase Base class for a seedable RNG Inheritance object RngBase SeedableRngBase DevRandomRng Implements ISeedableRng IRng ISeedConsumer Inherited Members RngBase.FillBytes(in Span<byte>) RngBase.FillBytesAsync(Memory<byte>, CancellationToken) RngBase.GetBytes(in int) RngBase.GetBytesAsync(int, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract class SeedableRngBase : RngBase, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source SeedableRngBase() Constructor Declaration protected SeedableRngBase() Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public abstract void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public abstract Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements ISeedableRng IRng ISeedConsumer Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.SharedSecret.html": {
    "href": "api/wan24.Crypto.SharedSecret.html",
    "title": "Class SharedSecret | wan24-Crypto",
    "keywords": "Class SharedSecret Shared secret (should be used as an only short living helper) Inheritance object DisposableBase SharedSecret Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class SharedSecret : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source SharedSecret(in byte[], in byte[], in CryptoOptions?) Constructor Declaration public SharedSecret(in byte[] token, in byte[] key, in CryptoOptions? options = null) Parameters Type Name Description byte[] token Token (will be cleared) byte[] key Key (will be cleared) CryptoOptions options Options with MAC algorithm (won't be cleared) | Edit this page View Source SharedSecret(in CryptoOptions?) Constructor Declaration protected SharedSecret(in CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Fields | Edit this page View Source Options Options Declaration protected readonly CryptoOptions Options Field Value Type Description CryptoOptions | Edit this page View Source Token Token Declaration protected SecureByteArray Token Field Value Type Description SecureByteArray Properties | Edit this page View Source Secret Shared secret (used for authenticating at the remote key storage for receiving the remote secret) Declaration [SensitiveData] [NoValidation(false)] public virtual SecureByteArray Secret { get; protected set; } Property Value Type Description SecureByteArray Methods | Edit this page View Source DeriveFinalSecretAndDispose(in byte[]) Derive the final secret from the received remote secret and dispose Declaration public virtual byte[] DeriveFinalSecretAndDispose(in byte[] remoteSecret) Parameters Type Name Description byte[] remoteSecret Received remote secret (will be cleared!) Returns Type Description byte[] Final secret (should be cleared after use!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source ProtectRemoteSecret(in byte[]) Protect the remote secret using a secret Declaration public virtual byte[] ProtectRemoteSecret(in byte[] remoteSecret) Parameters Type Name Description byte[] remoteSecret Remote secret (size in byte must be equal to the used MAC algorithm digest size; will be overwritten!) Returns Type Description byte[] Protected remote secret (should be stored at the remote key storage and later received by authenticating with the shared secret) Operators | Edit this page View Source operator +(in byte[], in SharedSecret) Derive the final secret from the received remote secret and dispose the shared secret instance Declaration public static byte[] operator +(in byte[] remoteSecret, in SharedSecret secret) Parameters Type Name Description byte[] remoteSecret Received remote secret (will be cleared!) SharedSecret secret Shared secret (will be disposed!) Returns Type Description byte[] Final secret (should be cleared after use!) | Edit this page View Source operator +(in SharedSecret, in byte[]) Derive the final secret from the received remote secret and dispose the shared secret instance Declaration public static byte[] operator +(in SharedSecret secret, in byte[] remoteSecret) Parameters Type Name Description SharedSecret secret Shared secret (will be disposed!) byte[] remoteSecret Received remote secret (will be cleared!) Returns Type Description byte[] Final secret (should be cleared after use!) | Edit this page View Source implicit operator byte[](in SharedSecret) Cast as shared secret Declaration public static implicit operator byte[](in SharedSecret secret) Parameters Type Name Description SharedSecret secret Shared secret Returns Type Description byte[] Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable"
  },
  "api/wan24.Crypto.SignatureContainer.html": {
    "href": "api/wan24.Crypto.SignatureContainer.html",
    "title": "Class SignatureContainer | wan24-Crypto",
    "keywords": "Class SignatureContainer Signature container Inheritance object ValidatableRecordBase StreamSerializerRecordBase SignatureContainer Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IEquatable<SignatureContainer> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record SignatureContainer : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IEquatable<SignatureContainer> Constructors | Edit this page View Source SignatureContainer() Constructor Declaration public SignatureContainer() | Edit this page View Source SignatureContainer(string, byte[], ISignaturePrivateKey, ISignaturePrivateKey?, string?) Constructor Declaration public SignatureContainer(string hashAlgorithm, byte[] signedDataHash, ISignaturePrivateKey signer, ISignaturePrivateKey? counterSigner, string? purpose) Parameters Type Name Description string hashAlgorithm Hash algorithm name byte[] signedDataHash Signed data hash ISignaturePrivateKey signer Signer ISignaturePrivateKey counterSigner Counter signer string purpose Signature purpose Fields | Edit this page View Source NONCE_LENGTH Nonce length in bytes Declaration public const int NONCE_LENGTH = 20 Field Value Type Description int | Edit this page View Source VERSION Object version Declaration public const int VERSION = 2 Field Value Type Description int Properties | Edit this page View Source AsymmetricAlgorithm Asymmetric algorithm name Declaration [StringLength(255)] public string AsymmetricAlgorithm { get; } Property Value Type Description string | Edit this page View Source AsymmetricCounterAlgorithm Asymmetric counter algorithm name Declaration [StringLength(255)] public string? AsymmetricCounterAlgorithm { get; } Property Value Type Description string | Edit this page View Source CounterSignature Counter signature (signs all data including the signature) Declaration [RuntimeCountLimit(\"wan24.Crypto.SignatureContainer.MaxArrayLength\", 1)] [RequiredIf(\"CounterSigner\", new object?[] { })] public byte[]? CounterSignature { get; set; } Property Value Type Description byte[] | Edit this page View Source CounterSigner Counter signer Declaration [CountLimit(64, 255)] [RequiredIf(\"CounterSignature\", new object?[] { })] public byte[]? CounterSigner { get; } Property Value Type Description byte[] | Edit this page View Source CounterSignerPublicKey Counter signer public key (don't forget to dispose!) Declaration [NoValidation(false)] public ISignaturePublicKey? CounterSignerPublicKey { get; } Property Value Type Description ISignaturePublicKey | Edit this page View Source CounterSignerPublicKeyData Counter signer public key data Declaration [RuntimeCountLimit(\"wan24.Crypto.AsymmetricKeyBase.MaxArrayLength\", 1)] [RequiredIf(\"CounterSigner\", new object?[] { })] public byte[]? CounterSignerPublicKeyData { get; } Property Value Type Description byte[] | Edit this page View Source HashAlgorithm Hash algorithm name Declaration [StringLength(255)] public string HashAlgorithm { get; } Property Value Type Description string | Edit this page View Source MaxArrayLength Max. array length in serialized signature container data in bytes Declaration public static int MaxArrayLength { get; set; } Property Value Type Description int | Edit this page View Source Nonce Nonce Declaration [CountLimit(20, 20)] public byte[]? Nonce { get; } Property Value Type Description byte[] | Edit this page View Source Purpose Signature purpose Declaration [CountLimit(1, 65535)] public string? Purpose { get; } Property Value Type Description string | Edit this page View Source Signature Signature (signs all data except the counter signature) Declaration [RuntimeCountLimit(\"wan24.Crypto.SignatureContainer.MaxArrayLength\", 1)] public byte[] Signature { get; set; } Property Value Type Description byte[] | Edit this page View Source Signed Signed time (UTC) Declaration public DateTime Signed { get; } Property Value Type Description DateTime | Edit this page View Source SignedDataHash Signed data hash Declaration [CountLimit(16, 255)] public byte[] SignedDataHash { get; } Property Value Type Description byte[] | Edit this page View Source Signer Signer Declaration [CountLimit(64, 255)] public byte[] Signer { get; } Property Value Type Description byte[] | Edit this page View Source SignerPublicKey Signer public key (don't forget to dispose!) Declaration [NoValidation(false)] public ISignaturePublicKey SignerPublicKey { get; } Property Value Type Description ISignaturePublicKey | Edit this page View Source SignerPublicKeyData Signer public key data Declaration [RuntimeCountLimit(\"wan24.Crypto.AsymmetricKeyBase.MaxArrayLength\", 1)] public byte[] SignerPublicKeyData { get; } Property Value Type Description byte[] Methods | Edit this page View Source CreateSignatureHash(bool) Create the hash to sign from this object Declaration public byte[] CreateSignatureHash(bool forCounterSignature = false) Parameters Type Name Description bool forCounterSignature For counter signature? Returns Type Description byte[] Hash to sign | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source GetCopy() Get a copy of this instance Declaration public SignatureContainer GetCopy() Returns Type Description SignatureContainer Instance copy | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source ValidateSignedData(byte[], bool) Validate signed data Declaration public bool ValidateSignedData(byte[] data, bool throwOnError = true) Parameters Type Name Description byte[] data Raw data bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signed data is valid | Edit this page View Source ValidateSignedData(Stream, bool) Validate signed data Declaration public bool ValidateSignedData(Stream data, bool throwOnError = true) Parameters Type Name Description Stream data Raw data bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signed data is valid | Edit this page View Source ValidateSignedDataAsync(Stream, bool, CancellationToken) Validate signed data Declaration public Task<bool> ValidateSignedDataAsync(Stream data, bool throwOnError = true, CancellationToken cancellationToken = default) Parameters Type Name Description Stream data Raw data bool throwOnError Throw an exception on validation error? CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the signed data is valid Operators | Edit this page View Source explicit operator SignatureContainer(byte[]) Cast from serialized data Declaration public static explicit operator SignatureContainer(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description SignatureContainer | Edit this page View Source implicit operator byte[](SignatureContainer) Cast as serialized data Declaration public static implicit operator byte[](SignatureContainer signature) Parameters Type Name Description SignatureContainer signature Signature Returns Type Description byte[] Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.SignedAttributes.ValidateAsync_Delegate.html": {
    "href": "api/wan24.Crypto.SignedAttributes.ValidateAsync_Delegate.html",
    "title": "Delegate SignedAttributes.ValidateAsync_Delegate | wan24-Crypto",
    "keywords": "Delegate SignedAttributes.ValidateAsync_Delegate Delegate for an additional attribute validator Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate Task<bool> SignedAttributes.ValidateAsync_Delegate(byte[] id, IReadOnlyDictionary<string, string> attributes, bool throwOnError, SignedAttributes.ValidationOptions? options, PublicKeySuiteStore? keyStore, DateTime? usage, IServiceProvider? services, HttpClient? httpClient, CancellationToken cancellationToken) Parameters Type Name Description byte[] id Key ID IReadOnlyDictionary<string, string> attributes Attributes bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Options PublicKeySuiteStore keyStore Key owner public key store DateTime? usage Key usage time IServiceProvider services Service provider to use, if httpClient wasn't given for online key validation HttpClient httpClient http client to use for online key validation (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the attributes are valid"
  },
  "api/wan24.Crypto.SignedAttributes.Validate_Delegate.html": {
    "href": "api/wan24.Crypto.SignedAttributes.Validate_Delegate.html",
    "title": "Delegate SignedAttributes.Validate_Delegate | wan24-Crypto",
    "keywords": "Delegate SignedAttributes.Validate_Delegate Delegate for an additional attribute validator Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate bool SignedAttributes.Validate_Delegate(byte[] id, IReadOnlyDictionary<string, string> attributes, bool throwOnError, SignedAttributes.ValidationOptions? options, PublicKeySuiteStore? keyStore) Parameters Type Name Description byte[] id Key ID IReadOnlyDictionary<string, string> attributes Attributes bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Options PublicKeySuiteStore keyStore Key owner public key store Returns Type Description bool If the attributes are valid"
  },
  "api/wan24.Crypto.SignedAttributes.ValidationOptions.html": {
    "href": "api/wan24.Crypto.SignedAttributes.ValidationOptions.html",
    "title": "Class SignedAttributes.ValidationOptions | wan24-Crypto",
    "keywords": "Class SignedAttributes.ValidationOptions Validation options Inheritance object SignedAttributes.ValidationOptions Implements ICloneable IEquatable<SignedAttributes.ValidationOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public record SignedAttributes.ValidationOptions : ICloneable, IEquatable<SignedAttributes.ValidationOptions> Constructors | Edit this page View Source ValidationOptions() Constructor Declaration public ValidationOptions() Properties | Edit this page View Source AllowedKeyValidationApiUris Allowed key validation API URIs Declaration public ReadOnlyCollection<string>? AllowedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source AllowedUsages Allowed key usages Declaration public AsymmetricAlgorithmUsages? AllowedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source AllowedValidationDomains Allowed validation domains Declaration public ReadOnlyCollection<string>? AllowedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultAllowedKeyValidationApiUris Default allowed key validation API URIs Declaration public static ReadOnlyCollection<string>? DefaultAllowedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultAllowedUsages Default allowed key usages Declaration public static AsymmetricAlgorithmUsages? DefaultAllowedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultAllowedValidationDomains Default allowed validation domains Declaration public static ReadOnlyCollection<string>? DefaultAllowedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultDeniedKeyValidationApiUris Default denied key validation API URIs Declaration public static ReadOnlyCollection<string>? DefaultDeniedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultDeniedUsages Default denied key usages Declaration public static AsymmetricAlgorithmUsages? DefaultDeniedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DefaultDeniedValidationDomains Default denied validation domains Declaration public static ReadOnlyCollection<string>? DefaultDeniedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DefaultRequireCipherSuite Default require a cipher suite (CryptoOptions)? Declaration public static bool DefaultRequireCipherSuite { get; set; } Property Value Type Description bool | Edit this page View Source DefaultRequireKeyExchangeCounterKey Default require a key exchange counter key? Declaration public static bool DefaultRequireKeyExchangeCounterKey { get; set; } Property Value Type Description bool | Edit this page View Source DefaultRequireSerial Default require a public key revision serial number? Declaration public static bool DefaultRequireSerial { get; set; } Property Value Type Description bool | Edit this page View Source DefaultRequireSignatureCounterKey Default require a signature counter key? Declaration public static bool DefaultRequireSignatureCounterKey { get; set; } Property Value Type Description bool | Edit this page View Source DefaultRequiredUsages Default required key usages Declaration public static AsymmetricAlgorithmUsages? DefaultRequiredUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DeniedKeyValidationApiUris Denied key validation API URIs Declaration public ReadOnlyCollection<string>? DeniedKeyValidationApiUris { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source DeniedUsages Denied key usages Declaration public AsymmetricAlgorithmUsages? DeniedUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? | Edit this page View Source DeniedValidationDomains Denied validation domains Declaration public ReadOnlyCollection<string>? DeniedValidationDomains { get; set; } Property Value Type Description ReadOnlyCollection<string> | Edit this page View Source OnlineKeyValidation Perform an online key validation (asynchronous only)? Declaration public bool OnlineKeyValidation { get; set; } Property Value Type Description bool | Edit this page View Source PKI PKI to use for key exchange/signature key identfier validation Declaration public SignedPkiStore? PKI { get; set; } Property Value Type Description SignedPkiStore | Edit this page View Source RequireCipherSuite Require a cipher suite (CryptoOptions)? Declaration public bool RequireCipherSuite { get; set; } Property Value Type Description bool | Edit this page View Source RequireKeyExchangeCounterKey Require a key exchange counter key? Declaration public bool RequireKeyExchangeCounterKey { get; set; } Property Value Type Description bool | Edit this page View Source RequirePkiSignaturePermission Require a PKI signature permission? Declaration public bool RequirePkiSignaturePermission { get; set; } Property Value Type Description bool | Edit this page View Source RequireSerial Require a public key revision serial number? Declaration public bool RequireSerial { get; set; } Property Value Type Description bool | Edit this page View Source RequireSignatureCounterKey Require a signature counter key? Declaration public bool RequireSignatureCounterKey { get; set; } Property Value Type Description bool | Edit this page View Source RequiredUsages Required key usages Declaration public AsymmetricAlgorithmUsages? RequiredUsages { get; set; } Property Value Type Description AsymmetricAlgorithmUsages? Methods | Edit this page View Source GetCopy() Get a copy of this instance Declaration public virtual SignedAttributes.ValidationOptions GetCopy() Returns Type Description SignedAttributes.ValidationOptions Instance copy Implements ICloneable IEquatable<T>"
  },
  "api/wan24.Crypto.SignedAttributes.html": {
    "href": "api/wan24.Crypto.SignedAttributes.html",
    "title": "Class SignedAttributes | wan24-Crypto",
    "keywords": "Class SignedAttributes Signed attribute name examples/suggestions for an AsymmetricSignedPublicKey / AsymmetricPublicKeySigningRequest and validation helper Inheritance object SignedAttributes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class SignedAttributes Fields | Edit this page View Source CIPHER_SUITE Should contain the (base64 encoded?) granted/confirmed cipher suite (CryptoOptions) of this signed key owner Declaration [DisplayText(\"CipherSuite - Should contain the (base64 encoded?) granted/confirmed cipher suite (CryptoOptions) of this signed key owner\")] public const string CIPHER_SUITE = \"CipherSuite\" Field Value Type Description string | Edit this page View Source GRANTED_KEY_USAGES Should contain the numeric value of the granted AsymmetricAlgorithmUsages flags for the signed key (an asymmetric algorithm may be able to exchange a key AND sign) Declaration [DisplayText(\"GrantedKeyUsages - Should contain the numeric value of the granted AsymmetricAlgorithmUsages flags for the signed key (an asymmetric algorithm may be able to exchange a key AND sign)\")] public const string GRANTED_KEY_USAGES = \"GrantedKeyUsages\" Field Value Type Description string | Edit this page View Source KEY_EXCHANGE_PUBLIC_COUNTER_KEY_IDENTIFIER Should contain the (base64 encoded?) public counter key identifier of the key which is granted for key exchange with this signed key owner Declaration [DisplayText(\"KePublicCounterKey - Should contain the (base64 encoded?) public counter key identifier of the key which is granted for key exchange with this signed key owner\")] public const string KEY_EXCHANGE_PUBLIC_COUNTER_KEY_IDENTIFIER = \"KePublicCounterKey\" Field Value Type Description string | Edit this page View Source KEY_EXCHANGE_PUBLIC_KEY_IDENTIFIER Should contain the (base64 encoded?) public key identifier of the key which is granted for key exchange with this signed key owner Declaration [DisplayText(\"KePublicKey - Should contain the (base64 encoded?) public key identifier of the key which is granted for key exchange with this signed key owner\")] public const string KEY_EXCHANGE_PUBLIC_KEY_IDENTIFIER = \"KePublicKey\" Field Value Type Description string | Edit this page View Source ONLINE_KEY_VALIDATION_API_URI Should contain a public https URI which targets a RESTful API for key validation (should receive the (possibly base64 encoded) key ID as path component and answer, if the key was revoked by returning the revokation timestamp (UTC DateTime ticks) or zero, if it wasn't revoked) Declaration [DisplayText(\"KeyValidationUri - Should contain a public https URI which targets a RESTful API for key validation (should receive the (possibly base64 encoded) key ID as path component and answer, if the key was revoked by returning the revokation timestamp (UTC DateTime ticks) or zero, if it wasn't revoked)\")] public const string ONLINE_KEY_VALIDATION_API_URI = \"KeyValidationUri\" Field Value Type Description string | Edit this page View Source OWNER_IDENTIFIER Should contain an owner identifier, which can be used to query owner meta data from a store (binary values may be base64 encoded and encrypted, for example) Declaration [DisplayText(\"OwnerId - Should contain an owner identifier, which can be used to query owner meta data from a store (binary values may be base64 encoded and encrypted, for example)\")] public const string OWNER_IDENTIFIER = \"OwnerId\" Field Value Type Description string | Edit this page View Source PKI_DOMAIN Should contain the domain name of the PKI (yourcompany.com, for example) Declaration [DisplayText(\"Domain - Should contain the domain name of the PKI (yourcompany.com, for example)\")] public const string PKI_DOMAIN = \"Domain\" Field Value Type Description string | Edit this page View Source PKI_SIGNATURE Permitted to sign sub-keys? Declaration [DisplayText(\"PkiSig - Permitted to sign sub-keys?\")] public const string PKI_SIGNATURE = \"PkiSig\" Field Value Type Description string | Edit this page View Source SERIAL Should contain the numeric key revision of the owner (not an overall PKI key counter) Declaration [DisplayText(\"Serial - Should contain the numeric key revision of the owner (not an overall PKI key counter)\")] public const string SERIAL = \"Serial\" Field Value Type Description string | Edit this page View Source SIGNATURE_PUBLIC_COUNTER_KEY_IDENTIFIER Should contain the (base64 encoded?) public counter key identifier of the key which is granted for signatures from this signed key owner Declaration [DisplayText(\"SigPublicCounterKey - Should contain the (base64 encoded?) public counter key identifier of the key which is granted for signatures from this signed key owner\")] public const string SIGNATURE_PUBLIC_COUNTER_KEY_IDENTIFIER = \"SigPublicCounterKey\" Field Value Type Description string | Edit this page View Source SIGNATURE_PUBLIC_KEY_IDENTIFIER Should contain the (base64 encoded?) public key identifier of the key which is granted for signatures from this signed key owner Declaration [DisplayText(\"SigPublicKey - Should contain the (base64 encoded?) public key identifier of the key which is granted for signatures from this signed key owner\")] public const string SIGNATURE_PUBLIC_KEY_IDENTIFIER = \"SigPublicKey\" Field Value Type Description string Properties | Edit this page View Source AdditionalValidation Additional attribute validation Declaration public static SignedAttributes.Validate_Delegate? AdditionalValidation { get; set; } Property Value Type Description SignedAttributes.Validate_Delegate | Edit this page View Source AdditionalValidationAsync Additional attribute validation Declaration public static SignedAttributes.ValidateAsync_Delegate? AdditionalValidationAsync { get; set; } Property Value Type Description SignedAttributes.ValidateAsync_Delegate Methods | Edit this page View Source Validate(in byte[], in IReadOnlyDictionary<string, string>, in bool, ValidationOptions?, in PublicKeySuiteStore?) Validate attributes Declaration public static bool Validate(in byte[] id, in IReadOnlyDictionary<string, string> attributes, in bool throwOnError = true, SignedAttributes.ValidationOptions? options = null, in PublicKeySuiteStore? keyStore = null) Parameters Type Name Description byte[] id Key ID IReadOnlyDictionary<string, string> attributes Attributes bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Options PublicKeySuiteStore keyStore Key owner public key store Returns Type Description bool If the attributes are valid | Edit this page View Source ValidateAsync(byte[], IReadOnlyDictionary<string, string>, bool, ValidationOptions?, PublicKeySuiteStore?, DateTime?, IServiceProvider?, HttpClient?, CancellationToken) Validate attributes Declaration public static Task<bool> ValidateAsync(byte[] id, IReadOnlyDictionary<string, string> attributes, bool throwOnError = true, SignedAttributes.ValidationOptions? options = null, PublicKeySuiteStore? keyStore = null, DateTime? usage = null, IServiceProvider? services = null, HttpClient? httpClient = null, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id Key ID IReadOnlyDictionary<string, string> attributes Attributes bool throwOnError Throw an exception on error? SignedAttributes.ValidationOptions options Options PublicKeySuiteStore keyStore Key owner public key store DateTime? usage Key usage time IServiceProvider services Service provider to use, if httpClient wasn't given for online key validation HttpClient httpClient http client to use for online key validation (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If the attributes are valid"
  },
  "api/wan24.Crypto.SignedBinaryPayload-1.html": {
    "href": "api/wan24.Crypto.SignedBinaryPayload-1.html",
    "title": "Class SignedBinaryPayload<T> | wan24-Crypto",
    "keywords": "Class SignedBinaryPayload<T> Signed binary payload Inheritance object ValidatableRecordBase StreamSerializerRecordBase SignedPayload<T> SignedBinaryPayload<T> SignedBinaryPayload Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IEquatable<SignedPayload<T>> IEquatable<SignedBinaryPayload<T>> Inherited Members SignedPayload<T>.VERSION SignedPayload<T>.SignedData SignedPayload<T>.SignedDataMaxLength SignedPayload<T>.Payload SignedPayload<T>.Signature SignedPayload<T>.Sign(ISignaturePrivateKey, string, CryptoOptions) SignedPayload<T>.Validate(bool) SignedPayload<T>.CreateSignedData() SignedPayload<T>.DeserializeSignedData() SignedPayload<T>.CreateSignedDataInt(Stream) SignedPayload<T>.DeserializeSignedDataInt(Stream, int) SignedPayload<T>.Serialize(Stream) SignedPayload<T>.SerializeAsync(Stream, CancellationToken) SignedPayload<T>.Deserialize(Stream, int) SignedPayload<T>.DeserializeAsync(Stream, int, CancellationToken) StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.PrintMembers(StringBuilder) StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() StreamSerializerRecordBase.EqualityContract StreamSerializerRecordBase.SerializedObjectVersion StreamSerializerRecordBase.SerializerVersion ValidatableRecordBase.Validate(ValidationContext) ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public abstract record SignedBinaryPayload<T> : SignedPayload<T>, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IEquatable<SignedPayload<T>>, IEquatable<SignedBinaryPayload<T>> where T : BinaryPayloadContainer, new() Type Parameters Name Description T Binary payload container type Constructors | Edit this page View Source SignedBinaryPayload() Constructor Declaration protected SignedBinaryPayload() | Edit this page View Source SignedBinaryPayload(T, ISignaturePrivateKey, CryptoOptions?) Constructor Declaration protected SignedBinaryPayload(T payload, ISignaturePrivateKey privateKey, CryptoOptions? options = null) Parameters Type Name Description T payload Payload ISignaturePrivateKey privateKey Private key CryptoOptions options Options Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.SignedBinaryPayload.html": {
    "href": "api/wan24.Crypto.SignedBinaryPayload.html",
    "title": "Class SignedBinaryPayload | wan24-Crypto",
    "keywords": "Class SignedBinaryPayload Signed binary payload Inheritance object ValidatableRecordBase StreamSerializerRecordBase SignedPayload<BinaryPayloadContainer> SignedBinaryPayload<BinaryPayloadContainer> SignedBinaryPayload Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IEquatable<SignedPayload<BinaryPayloadContainer>> IEquatable<SignedBinaryPayload<BinaryPayloadContainer>> IEquatable<SignedBinaryPayload> Inherited Members SignedPayload<BinaryPayloadContainer>.VERSION SignedPayload<BinaryPayloadContainer>.Payload SignedPayload<BinaryPayloadContainer>.Signature SignedPayload<BinaryPayloadContainer>.Sign(ISignaturePrivateKey, string, CryptoOptions) SignedPayload<BinaryPayloadContainer>.Validate(bool) SignedPayload<BinaryPayloadContainer>.CreateSignedData() StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed record SignedBinaryPayload : SignedBinaryPayload<BinaryPayloadContainer>, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IEquatable<SignedPayload<BinaryPayloadContainer>>, IEquatable<SignedBinaryPayload<BinaryPayloadContainer>>, IEquatable<SignedBinaryPayload> Constructors | Edit this page View Source SignedBinaryPayload() Constructor Declaration public SignedBinaryPayload() | Edit this page View Source SignedBinaryPayload(BinaryPayloadContainer, ISignaturePrivateKey, CryptoOptions?) Constructor Declaration public SignedBinaryPayload(BinaryPayloadContainer payload, ISignaturePrivateKey privateKey, CryptoOptions? options = null) Parameters Type Name Description BinaryPayloadContainer payload Payload ISignaturePrivateKey privateKey Private key CryptoOptions options Options Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.SignedPayload-1.html": {
    "href": "api/wan24.Crypto.SignedPayload-1.html",
    "title": "Class SignedPayload<T> | wan24-Crypto",
    "keywords": "Class SignedPayload<T> Signed payload Inheritance object ValidatableRecordBase StreamSerializerRecordBase SignedPayload<T> SignedBinaryPayload<T> Implements IObjectValidatable IValidatableObject IEquatable<ValidatableRecordBase> IStreamSerializerVersion IStreamSerializer IEquatable<StreamSerializerRecordBase> IEquatable<SignedPayload<T>> Inherited Members StreamSerializerRecordBase.BASE_VERSION StreamSerializerRecordBase.ToString() StreamSerializerRecordBase.PrintMembers(StringBuilder) StreamSerializerRecordBase.GetHashCode() StreamSerializerRecordBase.Equals(object) StreamSerializerRecordBase.Equals(ValidatableRecordBase) StreamSerializerRecordBase.Equals(StreamSerializerRecordBase) StreamSerializerRecordBase.<Clone>$() StreamSerializerRecordBase.EqualityContract StreamSerializerRecordBase.SerializedObjectVersion StreamSerializerRecordBase.SerializerVersion ValidatableRecordBase.Validate(ValidationContext) ValidatableRecordBase.ObjectValidatable(IObjectValidatable) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public record SignedPayload<T> : StreamSerializerRecordBase, IObjectValidatable, IValidatableObject, IEquatable<ValidatableRecordBase>, IStreamSerializerVersion, IStreamSerializer, IEquatable<StreamSerializerRecordBase>, IEquatable<SignedPayload<T>> where T : class, IStreamSerializer Type Parameters Name Description T Payload type Constructors | Edit this page View Source SignedPayload() Constructor Declaration public SignedPayload() | Edit this page View Source SignedPayload(T, ISignaturePrivateKey, CryptoOptions?) Constructor Declaration public SignedPayload(T payload, ISignaturePrivateKey privateKey, CryptoOptions? options = null) Parameters Type Name Description T payload Payload ISignaturePrivateKey privateKey Private key CryptoOptions options Options Fields | Edit this page View Source SignedData Signed data Declaration protected byte[]? SignedData Field Value Type Description byte[] | Edit this page View Source SignedDataMaxLength Maximum length of the signed data in bytes Declaration protected int SignedDataMaxLength Field Value Type Description int | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int Properties | Edit this page View Source Payload Payload Declaration public T Payload { get; protected set; } Property Value Type Description T | Edit this page View Source Signature Signature Declaration public SignatureContainer Signature { get; protected set; } Property Value Type Description SignatureContainer Methods | Edit this page View Source CreateSignedData() Create signed data Declaration public byte[] CreateSignedData() Returns Type Description byte[] Signed data | Edit this page View Source CreateSignedDataInt(Stream) Create signed data Declaration protected virtual void CreateSignedDataInt(Stream stream) Parameters Type Name Description Stream stream Stream | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides StreamSerializerRecordBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source DeserializeSignedData() Deserialize signed data Declaration protected void DeserializeSignedData() | Edit this page View Source DeserializeSignedDataInt(Stream, int) Deserialize signed data Declaration protected virtual void DeserializeSignedDataInt(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides StreamSerializerRecordBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides StreamSerializerRecordBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source Sign(ISignaturePrivateKey, string?, CryptoOptions?) Create the signature Declaration public void Sign(ISignaturePrivateKey privateKey, string? purpose = null, CryptoOptions? options = null) Parameters Type Name Description ISignaturePrivateKey privateKey Private key string purpose Purpose CryptoOptions options Options | Edit this page View Source Validate(bool) Validate the signature Declaration public bool Validate(bool throwOnError = true) Parameters Type Name Description bool throwOnError Throw an exception on error? Returns Type Description bool If the signature is valid Operators | Edit this page View Source implicit operator byte[](SignedPayload<T>) Cast as serialized data Declaration public static implicit operator byte[](SignedPayload<T> signedPayload) Parameters Type Name Description SignedPayload<T> signedPayload Signed payload Returns Type Description byte[] | Edit this page View Source implicit operator T(SignedPayload<T>) Cast as payload Declaration public static implicit operator T(SignedPayload<T> signedPayload) Parameters Type Name Description SignedPayload<T> signedPayload Signed payload Returns Type Description T | Edit this page View Source implicit operator SignatureContainer(SignedPayload<T>) Cast as signature Declaration public static implicit operator SignatureContainer(SignedPayload<T> signedPayload) Parameters Type Name Description SignedPayload<T> signedPayload Signed payload Returns Type Description SignatureContainer Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.SignedPkiStore.html": {
    "href": "api/wan24.Crypto.SignedPkiStore.html",
    "title": "Class SignedPkiStore | wan24-Crypto",
    "keywords": "Class SignedPkiStore Signed PKI store Inheritance object DisposableBase DisposableStreamSerializerBase SignedPkiStore Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged Inherited Members DisposableStreamSerializerBase.BASE_VERSION DisposableStreamSerializerBase.SerializedObjectVersion DisposableStreamSerializerBase.SerializerVersion DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public class SignedPkiStore : DisposableStreamSerializerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IObjectValidatable, IValidatableObject, IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source SignedPkiStore() Constructor Declaration public SignedPkiStore() Fields | Edit this page View Source ChangeToken Change token Declaration protected readonly DisposableChangeToken ChangeToken Field Value Type Description DisposableChangeToken | Edit this page View Source VERSION Object version Declaration public const int VERSION = 1 Field Value Type Description int | Edit this page View Source _GrantedKeys Granted keys (key is the keys ID) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> _GrantedKeys Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> | Edit this page View Source _RevokedKeys Revoked keys (key is the keys ID) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> _RevokedKeys Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> | Edit this page View Source _RootKeys Trusted root keys (key is the keys ID) Declaration protected readonly ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> _RootKeys Field Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source GrantedKeyCount Number of granted keys Declaration public virtual int GrantedKeyCount { get; } Property Value Type Description int | Edit this page View Source GrantedKeys Granted keys (key is the keys ID) Declaration public virtual ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> GrantedKeys { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public bool HasChanged { get; } Property Value Type Description bool | Edit this page View Source RevokedKeyCount Number of revoked keys Declaration public virtual int RevokedKeyCount { get; } Property Value Type Description int | Edit this page View Source RevokedKeys Revoked keys (key is the keys ID) Declaration public virtual ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> RevokedKeys { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> | Edit this page View Source RootKeyCount Number of trusted root keys Declaration public virtual int RootKeyCount { get; } Property Value Type Description int | Edit this page View Source RootKeys Trusted root keys (key is the keys ID) Declaration public virtual ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> RootKeys { get; } Property Value Type Description ConcurrentDictionary<EquatableArray<byte>, AsymmetricSignedPublicKey> Methods | Edit this page View Source AddGrantedKey(AsymmetricSignedPublicKey) Add a granted key Declaration public virtual void AddGrantedKey(AsymmetricSignedPublicKey key) Parameters Type Name Description AsymmetricSignedPublicKey key Key (will be disposed!) | Edit this page View Source AddGrantedKeyAsync(AsymmetricSignedPublicKey, CancellationToken) Add a granted key Declaration public virtual Task AddGrantedKeyAsync(AsymmetricSignedPublicKey key, CancellationToken cancellationToken = default) Parameters Type Name Description AsymmetricSignedPublicKey key Key (will be disposed!) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AddTrustedRoot(AsymmetricSignedPublicKey) Add a trusted root key Declaration public virtual void AddTrustedRoot(AsymmetricSignedPublicKey key) Parameters Type Name Description AsymmetricSignedPublicKey key Key (will be disposed!) | Edit this page View Source AddTrustedRootAsync(AsymmetricSignedPublicKey, CancellationToken) Add a trusted root key Declaration public virtual Task AddTrustedRootAsync(AsymmetricSignedPublicKey key, CancellationToken cancellationToken = default) Parameters Type Name Description AsymmetricSignedPublicKey key Key (will be disposed!) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Deserialize(Stream, int) Deserialize Declaration protected override void Deserialize(Stream stream, int version) Parameters Type Name Description Stream stream Stream int version Serializer version Overrides DisposableStreamSerializerBase.Deserialize(Stream, int) | Edit this page View Source DeserializeAsync(Stream, int, CancellationToken) Deserialize Declaration protected override Task DeserializeAsync(Stream stream, int version, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream int version Serializer version CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.DeserializeAsync(Stream, int, CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source EnableLocalPki() Enable this as local PKI Declaration public virtual void EnableLocalPki() | Edit this page View Source GetKey(byte[]) Get a key (won't return revoked keys) Declaration public virtual AsymmetricSignedPublicKey? GetKey(byte[] id) Parameters Type Name Description byte[] id ID Returns Type Description AsymmetricSignedPublicKey Key (do not dispose!) | Edit this page View Source GetKeyAsync(byte[], CancellationToken) Get a key (won't return revoked keys) Declaration public virtual Task<AsymmetricSignedPublicKey?> GetKeyAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<AsymmetricSignedPublicKey> Key (do not dispose!) | Edit this page View Source GetKeyType(byte[]) Get the type of a key within this PKI Declaration public virtual AsymmetricSignedPublicKeyTypes GetKeyType(byte[] id) Parameters Type Name Description byte[] id ID Returns Type Description AsymmetricSignedPublicKeyTypes Key type | Edit this page View Source GetKeyTypeAsync(byte[], CancellationToken) Get the type of a key within this PKI Declaration public virtual Task<AsymmetricSignedPublicKeyTypes> GetKeyTypeAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<AsymmetricSignedPublicKeyTypes> Key type | Edit this page View Source GetRevokedKey(byte[]) Get a revoked key Declaration public virtual AsymmetricSignedPublicKey? GetRevokedKey(byte[] id) Parameters Type Name Description byte[] id ID Returns Type Description AsymmetricSignedPublicKey Key (do not dispose!) | Edit this page View Source GetRevokedKeyAsync(byte[], CancellationToken) Get a revoked key Declaration public virtual Task<AsymmetricSignedPublicKey?> GetRevokedKeyAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<AsymmetricSignedPublicKey> Key (do not dispose!) | Edit this page View Source GetSignedKeys(byte[]) Get keys which have been signed by a key (won't return revoked keys) Declaration public virtual IEnumerable<AsymmetricSignedPublicKey> GetSignedKeys(byte[] id) Parameters Type Name Description byte[] id Signer ID Returns Type Description IEnumerable<AsymmetricSignedPublicKey> Signed keys (do not dispose!) | Edit this page View Source GetSignedKeysAsync(byte[], CancellationToken) Get keys which have been signed by a key (won't return revoked keys) Declaration public virtual IAsyncEnumerable<AsymmetricSignedPublicKey> GetSignedKeysAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id Signer ID CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<AsymmetricSignedPublicKey> Signed keys (do not dispose!) | Edit this page View Source IsKeyRevoked(byte[]) Determine if a key ID is related to a revoked key Declaration public virtual bool IsKeyRevoked(byte[] id) Parameters Type Name Description byte[] id ID Returns Type Description bool Is a revoked key ID? | Edit this page View Source IsKeyRevokedAsync(byte[], CancellationToken) Determine if a key ID is related to a revoked key Declaration public virtual Task<bool> IsKeyRevokedAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Is a revoked key ID? | Edit this page View Source IsTrustedRoot(byte[]) Determine if a key ID is related to a trusted root key Declaration public virtual bool IsTrustedRoot(byte[] id) Parameters Type Name Description byte[] id ID Returns Type Description bool Is a trusted root key ID? | Edit this page View Source IsTrustedRootAsync(byte[], CancellationToken) Determine if a key ID is related to a trusted root key Declaration public virtual Task<bool> IsTrustedRootAsync(byte[] id, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Is a trusted root key ID? | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public IDisposable RegisterChangeCallback(Action<object?> callback, object? state) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. | Edit this page View Source RemoveGrantedKey(byte[], bool) Remove (and dispose) a granted key Declaration public virtual AsymmetricSignedPublicKey? RemoveGrantedKey(byte[] id, bool dispose = true) Parameters Type Name Description byte[] id ID bool dispose Dispose the key? Returns Type Description AsymmetricSignedPublicKey Key | Edit this page View Source RemoveRevokedKey(byte[], bool) Remove (and dispose) a revoked key Declaration public virtual AsymmetricSignedPublicKey? RemoveRevokedKey(byte[] id, bool dispose = true) Parameters Type Name Description byte[] id ID bool dispose Dispose the key? Returns Type Description AsymmetricSignedPublicKey Key | Edit this page View Source RemoveTrustedRoot(byte[], bool) Remove (and dispose) a trusted root key Declaration public virtual AsymmetricSignedPublicKey? RemoveTrustedRoot(byte[] id, bool dispose = true) Parameters Type Name Description byte[] id ID bool dispose Dispose the key? Returns Type Description AsymmetricSignedPublicKey Key | Edit this page View Source Revoke(byte[], bool) Revoke a key Declaration public virtual bool Revoke(byte[] id, bool recursive = true) Parameters Type Name Description byte[] id ID bool recursive Remove signed keys also? Returns Type Description bool If revoked | Edit this page View Source RevokeAsync(byte[], bool, CancellationToken) Revoke a key Declaration public virtual Task<bool> RevokeAsync(byte[] id, bool recursive = true, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] id ID bool recursive Remove signed keys also? CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If revoked | Edit this page View Source Serialize(Stream) Serialize Declaration protected override void Serialize(Stream stream) Parameters Type Name Description Stream stream Stream Overrides DisposableStreamSerializerBase.Serialize(Stream) | Edit this page View Source SerializeAsync(Stream, CancellationToken) Serialize Declaration protected override Task SerializeAsync(Stream stream, CancellationToken cancellationToken) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableStreamSerializerBase.SerializeAsync(Stream, CancellationToken) | Edit this page View Source SetChanged(in string) Set changed Declaration protected virtual void SetChanged(in string propertyName) Parameters Type Name Description string propertyName Property name Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.ObjectValidation.IObjectValidatable IValidatableObject IChangeToken INotifyPropertyChanged"
  },
  "api/wan24.Crypto.StreamSerializerExtensions.html": {
    "href": "api/wan24.Crypto.StreamSerializerExtensions.html",
    "title": "Class StreamSerializerExtensions | wan24-Crypto",
    "keywords": "Class StreamSerializerExtensions Stream serializer extensions Inheritance object StreamSerializerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class StreamSerializerExtensions Methods | Edit this page View Source ReadTimeoutToken(Stream, ArrayPool<byte>?) Read a timeout token Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static TimeoutToken ReadTimeoutToken(this Stream stream, ArrayPool<byte>? pool = null) Parameters Type Name Description Stream stream Stream ArrayPool<byte> pool Buffer pool Returns Type Description TimeoutToken Timeout token | Edit this page View Source ReadTimeoutTokenAsync(Stream, ArrayPool<byte>?, CancellationToken) Read a timeout token Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<TimeoutToken> ReadTimeoutTokenAsync(this Stream stream, ArrayPool<byte>? pool = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream ArrayPool<byte> pool Array pool CancellationToken cancellationToken Cancellation token Returns Type Description Task<TimeoutToken> Timeout token | Edit this page View Source WriteAsync<T>(T, TimeoutToken, byte[]?, ArrayPool<byte>?, CancellationToken) Write Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> WriteAsync<T>(this T stream, TimeoutToken tt, byte[]? buffer = null, ArrayPool<byte>? pool = null, CancellationToken cancellationToken = default) where T : Stream Parameters Type Name Description T stream Stream TimeoutToken tt Timeout token byte[] buffer Buffer ArrayPool<byte> pool Buffer pool CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Stream Type Parameters Name Description T Stream type | Edit this page View Source Write<T>(T, in TimeoutToken, byte[]?, ArrayPool<byte>?) Write Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T Write<T>(this T stream, in TimeoutToken tt, byte[]? buffer = null, ArrayPool<byte>? pool = null) where T : Stream Parameters Type Name Description T stream Stream TimeoutToken tt Timeout token byte[] buffer Buffer ArrayPool<byte> pool Buffer pool Returns Type Description T Stream Type Parameters Name Description T Stream type"
  },
  "api/wan24.Crypto.SymmetricKeySuite.html": {
    "href": "api/wan24.Crypto.SymmetricKeySuite.html",
    "title": "Class SymmetricKeySuite | wan24-Crypto",
    "keywords": "Class SymmetricKeySuite Symmetric key suite (used for PAKE) Inheritance object DisposableRecordBase SymmetricKeySuite Implements IWillDispose IEquatable<DisposableRecordBase> ISymmetricKeySuite IDisposableObject IDisposable IAsyncDisposable IEquatable<SymmetricKeySuite> Inherited Members DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeCore() DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.ToString() DisposableRecordBase.PrintMembers(StringBuilder) DisposableRecordBase.GetHashCode() DisposableRecordBase.Equals(object) DisposableRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.<Clone>$() DisposableRecordBase.EqualityContract DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public record SymmetricKeySuite : DisposableRecordBase, IWillDispose, IEquatable<DisposableRecordBase>, ISymmetricKeySuite, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<SymmetricKeySuite> Constructors | Edit this page View Source SymmetricKeySuite(in byte[], in byte[]?, in CryptoOptions?) Constructor Declaration public SymmetricKeySuite(in byte[] key, in byte[]? identifier = null, in CryptoOptions? options = null) Parameters Type Name Description byte[] key Symmetric key (private!; will be cleared!) byte[] identifier Identifier (private!; will be cleared!) CryptoOptions options Options with KDF and MAC settings (will be cleared!) | Edit this page View Source SymmetricKeySuite(in CryptoOptions?, in bool) Constructor Declaration protected SymmetricKeySuite(in CryptoOptions? options = null, in bool asyncDisposing = false) Parameters Type Name Description CryptoOptions options Options with KDF and MAC settings (will be cleared!) bool asyncDisposing Implements asynchronous disposing? | Edit this page View Source SymmetricKeySuite(in CryptoOptions?, in byte[]?, in byte[]) Constructor Declaration public SymmetricKeySuite(in CryptoOptions? options, in byte[]? identifier, in byte[] expandedKey) Parameters Type Name Description CryptoOptions options Options with KDF and MAC settings (will be cleared!) byte[] identifier Identifier (will be cleared!) byte[] expandedKey Expanded key (will be cleared!) | Edit this page View Source SymmetricKeySuite(in CryptoOptions?, in byte[]?, in byte[], in bool) Constructor Declaration protected SymmetricKeySuite(in CryptoOptions? options, in byte[]? identifier, in byte[] expandedKey, in bool asyncDisposing) Parameters Type Name Description CryptoOptions options Options with KDF and MAC settings (will be cleared!) byte[] identifier Identifier (will be cleared!) byte[] expandedKey Expanded key (will be cleared!) bool asyncDisposing Implements asynchronous disposing? | Edit this page View Source SymmetricKeySuite(in ISymmetricKeySuite, in CryptoOptions?) Constructor Declaration public SymmetricKeySuite(in ISymmetricKeySuite existing, in CryptoOptions? options = null) Parameters Type Name Description ISymmetricKeySuite existing Existing symmetric key suite (will be cloned) CryptoOptions options Options with KDF and MAC settings (will be cleared!) Properties | Edit this page View Source ExpandedKey Expanded symmetric key (private!; used for en-/decryption and authentication; will be disposed!) Declaration [SensitiveData] [NoValidation(false)] public SecureByteArray ExpandedKey { get; protected set; } Property Value Type Description SecureByteArray | Edit this page View Source Identifier Identifier (public; used for identification during authentication; will be cleared!) Declaration [Range(16, 64)] public byte[]? Identifier { get; protected set; } Property Value Type Description byte[] | Edit this page View Source Options Options with KDF and MAC settings (will be cleared!) Declaration public CryptoOptions Options { get; } Property Value Type Description CryptoOptions Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableRecordBase.Dispose(bool) | Edit this page View Source GetCopy() Get a copy of this instance Declaration public virtual SymmetricKeySuite GetCopy() Returns Type Description SymmetricKeySuite Instance copy | Edit this page View Source InitKeyAndIdentifier(in byte[], in byte[]) Initialize with having a key and an identifier Declaration protected virtual (byte[] ExpandedKey, byte[] Identifier) InitKeyAndIdentifier(in byte[] key, in byte[] identifier) Parameters Type Name Description byte[] key Key byte[] identifier Identifier Returns Type Description (byte[] Key, byte[] KeyExchangeData) Expanded key and identifier | Edit this page View Source InitKeyOnly(in byte[]) Initialize with only having a key Declaration protected virtual byte[] InitKeyOnly(in byte[] key) Parameters Type Name Description byte[] key Key Returns Type Description byte[] Expanded key Implements wan24.Core.IWillDispose IEquatable<T> ISymmetricKeySuite wan24.Core.IDisposableObject IDisposable IAsyncDisposable IEquatable<T> Extension Methods SymmetricKeySuiteExtensions.CreateSignup(ISymmetricKeySuite, in byte[]?, in CryptoOptions?) SymmetricKeySuiteExtensions.DeriveSessionKey(ISymmetricKeySuite, in byte[]?, in CryptoOptions?, in CryptoOptions?, in bool)"
  },
  "api/wan24.Crypto.SymmetricKeySuiteExtensions.html": {
    "href": "api/wan24.Crypto.SymmetricKeySuiteExtensions.html",
    "title": "Class SymmetricKeySuiteExtensions | wan24-Crypto",
    "keywords": "Class SymmetricKeySuiteExtensions ISymmetricKeySuite extensions Inheritance object SymmetricKeySuiteExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class SymmetricKeySuiteExtensions Methods | Edit this page View Source CreateSignup(ISymmetricKeySuite, in byte[]?, in CryptoOptions?) Create a signup and derive a session key Declaration public static (byte[] SessionKey, PakeSignup SignupRequest) CreateSignup(this ISymmetricKeySuite key, in byte[]? payload = null, in CryptoOptions? options = null) Parameters Type Name Description ISymmetricKeySuite key Key (will be disposed!) byte[] payload Payload (will be cleared!) CryptoOptions options Options Returns Type Description (byte[] SessionKey, PakeSignup SignupRequest) Session key and the signup request to be sent to the server (don't forget to dispose!) | Edit this page View Source DeriveSessionKey(ISymmetricKeySuite, in byte[]?, in CryptoOptions?, in CryptoOptions?, in bool) Derive a session key Declaration public static (byte[] SessionKey, PakeAuth AuthenticationRequest) DeriveSessionKey(this ISymmetricKeySuite key, in byte[]? payload = null, in CryptoOptions? options = null, in CryptoOptions? cryptoOptions = null, in bool encryptPayload = false) Parameters Type Name Description ISymmetricKeySuite key Key (will be disposed!) byte[] payload Payload (will be cleared!) CryptoOptions options Options CryptoOptions cryptoOptions Options for encryption bool encryptPayload Encrypt the payload? Returns Type Description (byte[] SessionKey, PakeAuth AuthenticationRequest) Session key and the authentication request to be sent to the server (don't forget to dispose!)"
  },
  "api/wan24.Crypto.TimeoutToken.html": {
    "href": "api/wan24.Crypto.TimeoutToken.html",
    "title": "Struct TimeoutToken | wan24-Crypto",
    "keywords": "Struct TimeoutToken Timeout token Implements IObjectValidatable IValidatableObject IEquatable<TimeoutToken> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public readonly record struct TimeoutToken : IObjectValidatable, IValidatableObject, IEquatable<TimeoutToken> Constructors | Edit this page View Source TimeoutToken(in DateTime, in TimeSpan, in ulong, in byte[]) Constructor Declaration public TimeoutToken(in DateTime validFrom, in TimeSpan timeout, in ulong payload, in byte[] pwd) Parameters Type Name Description DateTime validFrom Valid from (UTC) TimeSpan timeout Timeout ulong payload Payload byte[] pwd Password | Edit this page View Source TimeoutToken(in DateTime, in ulong, in byte[]) Constructor Declaration public TimeoutToken(in DateTime timeout, in ulong payload, in byte[] pwd) Parameters Type Name Description DateTime timeout Valid until (UTC; excluding) ulong payload Payload byte[] pwd Password | Edit this page View Source TimeoutToken(in Stream) Constructor Declaration public TimeoutToken(in Stream stream) Parameters Type Name Description Stream stream Stream | Edit this page View Source TimeoutToken(in ReadOnlySpan<byte>) Constructor Declaration public TimeoutToken(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Serialized data Fields | Edit this page View Source MAC_OFFSET MAC byte offset Declaration public const int MAC_OFFSET = 16 Field Value Type Description int | Edit this page View Source PAYLOAD_OFFSET Payload byte offset Declaration public const int PAYLOAD_OFFSET = 8 Field Value Type Description int | Edit this page View Source STRUCT_LENGTH Structure length in bytes Declaration public const int STRUCT_LENGTH = 64 Field Value Type Description int | Edit this page View Source TIMEOUT_OFFSET Timeout byte offset Declaration public const int TIMEOUT_OFFSET = 0 Field Value Type Description int Properties | Edit this page View Source IsTimeout Is timeout? (if true, the current time exceeds the timeout and the token is invalid) Declaration public bool IsTimeout { get; } Property Value Type Description bool | Edit this page View Source MAC MAC Declaration [Range(48, 48)] public ReadOnlyCollection<byte> MAC { get; } Property Value Type Description ReadOnlyCollection<byte> | Edit this page View Source Payload Payload Declaration public ulong Payload { get; } Property Value Type Description ulong | Edit this page View Source TimeLeft Time left until timeout Declaration public TimeSpan TimeLeft { get; } Property Value Type Description TimeSpan | Edit this page View Source Timeout Timeout (UTC) Declaration public DateTime Timeout { get; } Property Value Type Description DateTime Methods | Edit this page View Source CreateMac(in byte[]) Create a MAC Declaration public byte[] CreateMac(in byte[] pwd) Parameters Type Name Description byte[] pwd Password Returns Type Description byte[] MAC | Edit this page View Source CreateMac(in byte[], in Span<byte>) Create a MAC Declaration public Span<byte> CreateMac(in byte[] pwd, in Span<byte> outputBuffer) Parameters Type Name Description byte[] pwd Password Span<byte> outputBuffer Output buffer Returns Type Description Span<byte> MAC | Edit this page View Source DeserializeAsync(Stream, CancellationToken) Create a timeout token from a serialized stream Declaration public static Task<TimeoutToken> DeserializeAsync(Stream stream, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<TimeoutToken> Timeout token | Edit this page View Source Serialize(in byte[]?, in ArrayPool<byte>?) Serialize Declaration public byte[] Serialize(in byte[]? buffer = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description byte[] buffer Buffer ArrayPool<byte> pool Buffer pool (if given, and buffer is null, the returned serialized data needs to be returned to this pool) Returns Type Description byte[] Serialized data | Edit this page View Source Serialize(in Stream, in byte[]?, ArrayPool<byte>?) Serialize Declaration public void Serialize(in Stream stream, in byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description Stream stream Stream byte[] buffer Buffer ArrayPool<byte> pool Buffer pool | Edit this page View Source SerializeAsync(Stream, byte[]?, ArrayPool<byte>?, CancellationToken) Serialize Declaration public ValueTask SerializeAsync(Stream stream, byte[]? buffer = null, ArrayPool<byte>? pool = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream byte[] buffer Buffer ArrayPool<byte> pool Buffer pool CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source Validate(ValidationContext) Determines whether the specified object is valid. Declaration public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) Parameters Type Name Description ValidationContext validationContext The validation context. Returns Type Description IEnumerable<ValidationResult> A collection that holds failed-validation information. | Edit this page View Source ValidateToken(in byte[], in bool) Validate the token integrity (NOT the timeout!) Declaration public bool ValidateToken(in byte[] pwd, in bool throwOnError = true) Parameters Type Name Description byte[] pwd Password bool throwOnError Throw an exception on error? Returns Type Description bool If the token integrity is valid Exceptions Type Condition CryptographicException The token integrity is invalid (the token may have been manipulated) Operators | Edit this page View Source explicit operator TimeoutToken?(byte[]?) Cast from serialized data Declaration public static explicit operator TimeoutToken?(byte[]? ttData) Parameters Type Name Description byte[] ttData Timeout token data Returns Type Description TimeoutToken? | Edit this page View Source explicit operator TimeoutToken(byte[]) Cast from serialized data Declaration public static explicit operator TimeoutToken(byte[] ttData) Parameters Type Name Description byte[] ttData Timeout token data Returns Type Description TimeoutToken | Edit this page View Source explicit operator TimeoutToken(in ReadOnlySpan<byte>) Cast from serialized data Declaration public static explicit operator TimeoutToken(in ReadOnlySpan<byte> ttData) Parameters Type Name Description ReadOnlySpan<byte> ttData Timeout token data Returns Type Description TimeoutToken | Edit this page View Source explicit operator TimeoutToken(in Span<byte>) Cast from serialized data Declaration public static explicit operator TimeoutToken(in Span<byte> ttData) Parameters Type Name Description Span<byte> ttData Timeout token data Returns Type Description TimeoutToken | Edit this page View Source implicit operator byte[]?(in TimeoutToken?) Cast as serialized data Declaration public static implicit operator byte[]?(in TimeoutToken? tt) Parameters Type Name Description TimeoutToken? tt Timeout token Returns Type Description byte[] | Edit this page View Source implicit operator byte[](in TimeoutToken) Cast as serialized data Declaration public static implicit operator byte[](in TimeoutToken tt) Parameters Type Name Description TimeoutToken tt Timeout token Returns Type Description byte[] | Edit this page View Source implicit operator DateTime(in TimeoutToken) Cast as timeout (UTC) Declaration public static implicit operator DateTime(in TimeoutToken tt) Parameters Type Name Description TimeoutToken tt Timeout token Returns Type Description DateTime | Edit this page View Source implicit operator long(in TimeoutToken) Cast as timeout ticks (UTC) Declaration public static implicit operator long(in TimeoutToken tt) Parameters Type Name Description TimeoutToken tt Timeout token Returns Type Description long | Edit this page View Source implicit operator ulong(in TimeoutToken) Cast as payload Declaration public static implicit operator ulong(in TimeoutToken tt) Parameters Type Name Description TimeoutToken tt Timeout token Returns Type Description ulong Implements wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T>"
  },
  "api/wan24.Crypto.ValueProtection.ProtectValue_Delegate.html": {
    "href": "api/wan24.Crypto.ValueProtection.ProtectValue_Delegate.html",
    "title": "Delegate ValueProtection.ProtectValue_Delegate | wan24-Crypto",
    "keywords": "Delegate ValueProtection.ProtectValue_Delegate Delegate for a value protection handler Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate byte[] ValueProtection.ProtectValue_Delegate(byte[] value, ValueProtection.Scope scope = Scope.Process) Parameters Type Name Description byte[] value Value to protect (won't be cleared) ValueProtection.Scope scope Scope Returns Type Description byte[] Protected value"
  },
  "api/wan24.Crypto.ValueProtection.Scope.html": {
    "href": "api/wan24.Crypto.ValueProtection.Scope.html",
    "title": "Enum ValueProtection.Scope | wan24-Crypto",
    "keywords": "Enum ValueProtection.Scope Scope Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public enum ValueProtection.Scope Fields Name Description Process Current process System System User Current user"
  },
  "api/wan24.Crypto.ValueProtection.UnprotectValue_Delegate.html": {
    "href": "api/wan24.Crypto.ValueProtection.UnprotectValue_Delegate.html",
    "title": "Delegate ValueProtection.UnprotectValue_Delegate | wan24-Crypto",
    "keywords": "Delegate ValueProtection.UnprotectValue_Delegate Delegate for a value unprotection handler Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public delegate byte[] ValueProtection.UnprotectValue_Delegate(byte[] protectedValue, ValueProtection.Scope scope = Scope.Process) Parameters Type Name Description byte[] protectedValue Protected value (won't be cleared) ValueProtection.Scope scope Scope Returns Type Description byte[] Unprotected value"
  },
  "api/wan24.Crypto.ValueProtection.html": {
    "href": "api/wan24.Crypto.ValueProtection.html",
    "title": "Class ValueProtection | wan24-Crypto",
    "keywords": "Class ValueProtection Value protection helper Inheritance object ValueProtection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class ValueProtection Properties | Edit this page View Source ProcessScopeKey Process scope key Declaration public static ISecureValue ProcessScopeKey { get; set; } Property Value Type Description ISecureValue | Edit this page View Source Protect Protect a value Declaration public static ValueProtection.ProtectValue_Delegate Protect { get; set; } Property Value Type Description ValueProtection.ProtectValue_Delegate | Edit this page View Source SystemScopeKey System scope key Declaration public static ISecureValue SystemScopeKey { get; set; } Property Value Type Description ISecureValue | Edit this page View Source Unprotect Unprotect a value Declaration public static ValueProtection.UnprotectValue_Delegate Unprotect { get; set; } Property Value Type Description ValueProtection.UnprotectValue_Delegate | Edit this page View Source UserScopeKey User scope key Declaration public static ISecureValue UserScopeKey { get; set; } Property Value Type Description ISecureValue Methods | Edit this page View Source DefaultProtect(byte[], Scope) Protect a value (default protect handler) Declaration public static byte[] DefaultProtect(byte[] value, ValueProtection.Scope scope = Scope.Process) Parameters Type Name Description byte[] value Value to protect (won't be cleared) ValueProtection.Scope scope Scope Returns Type Description byte[] Protected value | Edit this page View Source DefaultUnprotect(byte[], Scope) Unprotect a value (default unprotect handler) Declaration public static byte[] DefaultUnprotect(byte[] protectedValue, ValueProtection.Scope scope = Scope.Process) Parameters Type Name Description byte[] protectedValue Protected value (won't be cleared) ValueProtection.Scope scope Scope Returns Type Description byte[] Unprotected value | Edit this page View Source GetScopeKey(Scope) Get the key for a scope Declaration public static byte[] GetScopeKey(ValueProtection.Scope scope) Parameters Type Name Description ValueProtection.Scope scope Scope Returns Type Description byte[] Key (should be cleared!)"
  },
  "api/wan24.Crypto.ValueProtectionKeys.html": {
    "href": "api/wan24.Crypto.ValueProtectionKeys.html",
    "title": "Class ValueProtectionKeys | wan24-Crypto",
    "keywords": "Class ValueProtectionKeys Value protection keys Inheritance object ValueProtectionKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class ValueProtectionKeys Fields | Edit this page View Source DEFAULT_TPM_MAC_ALGORITHM Default TPM MAC algorithm name Declaration public const string DEFAULT_TPM_MAC_ALGORITHM = \"TPMHMAC-SHA256\" Field Value Type Description string Properties | Edit this page View Source MacAlgorithmName MAC algorithm name (will throw when setting to a non-registered algorithm) Declaration public static string MacAlgorithmName { get; set; } Property Value Type Description string | Edit this page View Source TpmMacAlgorithmName TPM MAC algorithm name (will throw when setting to a non-registered (or non-TPM) algorithm; see wan24-Crypto-TPM) Declaration public static string TpmMacAlgorithmName { get; set; } Property Value Type Description string Methods | Edit this page View Source Contains(in ValueProtectionLevels) Determine if a key was defined for a value protection level Declaration public static bool Contains(in ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Value protection level Returns Type Description bool Ifa key was defined | Edit this page View Source Get(in ValueProtectionLevels, in SecureByteArray?) Get a key Declaration public static SecureByteArray Get(in ValueProtectionLevels level, in SecureByteArray? key = null) Parameters Type Name Description ValueProtectionLevels level Value protection level SecureByteArray key Manual entered user password (won't be disposed) Returns Type Description SecureByteArray Key (don't forget to dispose!) | Edit this page View Source Remove(in ValueProtectionLevels) Remove a key for a value protection level Declaration public static void Remove(in ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Value protection level | Edit this page View Source Set(in ValueProtectionLevels, in ISecureValue) Set a key Declaration public static void Set(in ValueProtectionLevels level, in ISecureValue protectionKey) Parameters Type Name Description ValueProtectionLevels level Value protection level ISecureValue protectionKey Protection key (will be disposed!) | Edit this page View Source Set2(in ValueProtectionLevels, in byte[]) Set a key Declaration public static void Set2(in ValueProtectionLevels level, in byte[] protectionKey) Parameters Type Name Description ValueProtectionLevels level Value protection level byte[] protectionKey Protection key (will be cleared!) | Edit this page View Source TryGet(in ValueProtectionLevels, in SecureByteArray?, out SecureByteArray?) Get a key Declaration public static bool TryGet(in ValueProtectionLevels level, in SecureByteArray? key, out SecureByteArray? result) Parameters Type Name Description ValueProtectionLevels level Value protection level SecureByteArray key Manual entered user password (won't be disposed) SecureByteArray result Key (don't forget to dispose!) Returns Type Description bool If succeed"
  },
  "api/wan24.Crypto.ValueProtectionLevels.html": {
    "href": "api/wan24.Crypto.ValueProtectionLevels.html",
    "title": "Enum ValueProtectionLevels | wan24-Crypto",
    "keywords": "Enum ValueProtectionLevels Value protection level enumeration Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public enum ValueProtectionLevels : byte Fields Name Description AutoDeviceTpm TPM protected automatted local mashine key (generated; must be used with the TPM) AutoOnlineDevice Automatted online device key (requires an authentication key to be available offline) AutoOnlineDeviceTpm TPM protected automatted online device key (requires an authentication key to be available offline; must be used with the TPM) AutoOnlineUser Automatted online user authentication (requires an authentication key to be available offline) AutoOnlineUserTpm TPM protected automatted online user authentication (requires an authentication key to be available offline; must be used with the TPM) None None OnlineUserTpmPassword TPM protected manual online user authentication with password (requires an authentication key to be available offline; password must be entered and used with the TPM) UserPassword Manual user authentication with password (must be entered) UserTpmPassword TPM protected manual user authentication with password (must be entered and used with the TPM) Extension Methods ValueProtectionLevelsExtensions.GetScope(ValueProtectionLevels) ValueProtectionLevelsExtensions.Protect(ValueProtectionLevels, in byte[], in SecureByteArray) ValueProtectionLevelsExtensions.RequiresNetwork(ValueProtectionLevels) ValueProtectionLevelsExtensions.RequiresPasswordInput(ValueProtectionLevels) ValueProtectionLevelsExtensions.RequiresTpm(ValueProtectionLevels) ValueProtectionLevelsExtensions.Unprotect(ValueProtectionLevels, in byte[], in SecureByteArray)"
  },
  "api/wan24.Crypto.ValueProtectionLevelsExtensions.html": {
    "href": "api/wan24.Crypto.ValueProtectionLevelsExtensions.html",
    "title": "Class ValueProtectionLevelsExtensions | wan24-Crypto",
    "keywords": "Class ValueProtectionLevelsExtensions ValueProtectionLevels extension methods Inheritance object ValueProtectionLevelsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class ValueProtectionLevelsExtensions Methods | Edit this page View Source GetScope(ValueProtectionLevels) Get the value protection scope Declaration public static ValueProtection.Scope GetScope(this ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Level Returns Type Description ValueProtection.Scope Scope | Edit this page View Source Protect(ValueProtectionLevels, in byte[], in SecureByteArray?) Protect a value Declaration public static byte[] Protect(this ValueProtectionLevels level, in byte[] value, in SecureByteArray? key = null) Parameters Type Name Description ValueProtectionLevels level Level byte[] value Value to protect (won't be cleared) SecureByteArray key Manual entered user password (won't be disposed) Returns Type Description byte[] Protected value | Edit this page View Source RequiresNetwork(ValueProtectionLevels) Does the value protection level require a network (Internet) connection? Declaration public static bool RequiresNetwork(this ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Level Returns Type Description bool Network (Internet) required? | Edit this page View Source RequiresPasswordInput(ValueProtectionLevels) Does the value protection level require a manual user password input? Declaration public static bool RequiresPasswordInput(this ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Level Returns Type Description bool Manual user password input required? | Edit this page View Source RequiresTpm(ValueProtectionLevels) Does the value protection level require a TPM? Declaration public static bool RequiresTpm(this ValueProtectionLevels level) Parameters Type Name Description ValueProtectionLevels level Level Returns Type Description bool TPM required? | Edit this page View Source Unprotect(ValueProtectionLevels, in byte[], in SecureByteArray?) Unprotect a value Declaration public static byte[] Unprotect(this ValueProtectionLevels level, in byte[] value, in SecureByteArray? key = null) Parameters Type Name Description ValueProtectionLevels level Level byte[] value Protected value (won't be cleared) SecureByteArray key Manual entered user password (won't be disposed) Returns Type Description byte[] Unprotected value"
  },
  "api/wan24.Crypto.X509Extensions.html": {
    "href": "api/wan24.Crypto.X509Extensions.html",
    "title": "Class X509Extensions | wan24-Crypto",
    "keywords": "Class X509Extensions X509 extensions Inheritance object X509Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public static class X509Extensions Methods | Edit this page View Source GetAsymmetricAlgorithm(X509Certificate2) Get the asymmetric algorithm Declaration public static IAsymmetricAlgorithm? GetAsymmetricAlgorithm(this X509Certificate2 cert) Parameters Type Name Description X509Certificate2 cert Certificate Returns Type Description IAsymmetricAlgorithm Algorithm or null, if the key algorithm isn't supported | Edit this page View Source GetAsymmetricPrivateKey(X509Certificate2) Get the asymmetric private key Declaration public static IAsymmetricPrivateKey? GetAsymmetricPrivateKey(this X509Certificate2 cert) Parameters Type Name Description X509Certificate2 cert Certificate Returns Type Description IAsymmetricPrivateKey Private key (don't forget to dispose!) or null, if the key algorithm isn't supported | Edit this page View Source GetAsymmetricPublicKey(X509Certificate2) Get the asymmetric public key Declaration public static IAsymmetricPublicKey? GetAsymmetricPublicKey(this X509Certificate2 cert) Parameters Type Name Description X509Certificate2 cert Certificate Returns Type Description IAsymmetricPublicKey Public key (don't forget to dispose!) or null, if the key algorithm isn't supported"
  },
  "api/wan24.Crypto.XorRng.html": {
    "href": "api/wan24.Crypto.XorRng.html",
    "title": "Class XorRng | wan24-Crypto",
    "keywords": "Class XorRng RNG which combines two or more RNGs with XOR Inheritance object RngBase XorRng Implements IRng Inherited Members RngBase.GetBytes(in int) RngBase.GetBytesAsync(int, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto Assembly: wan24Crypto.dll Syntax public sealed class XorRng : RngBase, IRng Constructors | Edit this page View Source XorRng(params IRng[]) Constructor Declaration public XorRng(params IRng[] rngs) Parameters Type Name Description IRng[] rngs RNGs to use Properties | Edit this page View Source RNG RNGs to use Declaration public IRng[] RNG { get; } Property Value Type Description IRng[] Methods | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides RngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides RngBase.FillBytesAsync(Memory<byte>, CancellationToken) Implements IRng Extension Methods RngExtensions.GetInt32(IRng, int) RngExtensions.GetInt32(IRng, int, int) RngExtensions.GetInt32Async(IRng, int, int, CancellationToken) RngExtensions.GetInt32Async(IRng, int, CancellationToken) RngExtensions.GetNonZeroBytes(IRng, Span<byte>) RngExtensions.GetNonZeroBytesAsync(IRng, Memory<byte>, CancellationToken)"
  },
  "api/wan24.Crypto.html": {
    "href": "api/wan24.Crypto.html",
    "title": "Namespace wan24.Crypto | wan24-Crypto",
    "keywords": "Namespace wan24.Crypto Classes AsymmetricAlgorithmBase<tPublic, tPrivate> Base class for an asymmetric algorithm AsymmetricEcDiffieHellmanAlgorithm EC Diffie Hellman asymmetric algorithm AsymmetricEcDiffieHellmanPrivateKey Elliptic Curve Diffie Hellman asymmetric private key AsymmetricEcDiffieHellmanPublicKey Elliptic Curve Diffie Hellman asymmetric public key AsymmetricEcDsaAlgorithm EC DSA asymmetric algorithm AsymmetricEcDsaPrivateKey Elliptic Curve DSA asymmetric private key AsymmetricEcDsaPublicKey Elliptic Curve DSA asymmetric public key AsymmetricHelper Asymmetric helper AsymmetricKeyBase Base class for an asymmetric key AsymmetricKeyPool<T> Asymmetric private key pool AsymmetricKeySigner Asymmetric key signer AsymmetricKeySignerService Parallel AsymmetricPublicKeySigningRequest signer service AsymmetricPrivateKeyBase<tPublic, tPrivate> Base class for an asymmetric private key AsymmetricPublicKeyBase Base class for an asymmetric public key AsymmetricPublicKeySigningRequest Asymmetric public key signing request AsymmetricSignedPublicKey Signed asymmetric public key AsymmetricSignedPublicKeyTypesExtensions AsymmetricSignedPublicKeyTypes extensions AsymmetricVoidAlgorithm Asymmetric void algorithm (used in case there's no asymmetric algorithm available) AsymmetricVoidPrivateKey Private asymmetric void key AsymmetricVoidPublicKey Public asymmetric void key BackupRng RNG which uses backup RNGs on error BinaryPayloadContainer Binary payload container (you should extend this type and define the min./max. payload length in bytes in the MinPayloadLength and MaxPayloadLength properties (can be done by calling the protected constructors); default max. length is MaxValue, while the default min. length is 1 byte) Bootstrap Bootstrapper Constants Constants CryptoAlgorithmBase Base class for a cryptographic algorithm CryptoAppConfig Crypto app configuration (wan24.Core.AppConfig; should be applied AFTER bootstrapping (wan24.Core.AppConfigAttribute.AfterBootstrap); another CryptoEnvironment.Options may be applied in addition) CryptoAppConfig.CryptoOptions Crypto options CryptoAppConfig.DefaultAlgorithms Default algorithms CryptoAppConfig.EntropyOptions Entropy options CryptoAppConfig.Limitations Limitations CryptoAppConfig.RngOptions RnG options CryptoAppConfig.SecureValueOptions Secure value options CryptoAppConfig.SignedAttributesOptions Signed attributes options CryptoEnvironment Crypto environment configuration CryptoEnvironment.Options Options CryptoExtensions Crypto extensions CryptoHelper Crypto helper CryptoOptions Crypto options CryptoOptionsFluentExtensions CryptoOptions fluent extensions CryptoProfiles Crypto profiles CryptoRandomStream Crypto random stream (uses RND for reading cryptographic random bytes into the given buffers) CryptographicException Thrown on any cryptographic problem DecryptionStreams Decryption streams DefaultPasswordPostProcessor Default password post-processor (performs KDF, can perform counter KDF and MAC (if a counter MAC algorthm was set); resulting password will be 64 bytes, or the length of the counter MAC algorithm) DekAttribute Attribute for a data encryption key (DEK) of an object DeniedAlgorithms Denied algorithms (won't be accepted for creating new keys, key exchange data, signatures or for encryption; may still be used for key exchange, signature validation and decryption) DevHwRng /dev/hwrng RNG DevRandomRng /dev/random RNG DevRandomStreamPool /dev/random readable stream pool DisposablEntropyMonitor Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) DisposableBackupRng RNG which uses backup RNGs on error DisposableCryptoOptions Disposable CryptoOptions (will clear the hosted options when disposing) DisposableRngBase Base class for a disposable RNG DisposableSeedableRngBase Base class for a disposable seedable RNG DisposableSignedPayload<T> Signed payload DisposableXorRng RNG which combines two or more RNGs with XOR EllipticCurves Elliptic curves EncryptAttribute Attribute for a property which can be encrypted/decrypted EncryptedJsonValue<T> Encrypted JSON value EncryptedSerializableValue<T> Encrypted serializable value EncryptedValue Encrypted value EncryptionAes256CbcAlgorithm AES-256-CBC symmetric encryption algorithm (using ISO10126 padding) EncryptionAlgorithmBase Base class for a symmetric encryption algorithm EncryptionExtensions Encryption extensions EncryptionHelper Encryption helper EncryptionStreams Encryption streams EncryptionVoidAlgorithm Symmetric void encryption algorithm (used when there's no algorithm available) EntropyHelper Entropy helper EntropyMonitor Entropy monitoring RNG (uses CheckEntropy(in ReadOnlySpan<byte>, Algorithms?, in bool)) FastPakeAuthClient Fast PAKE authentication client (will skip KDF after initialization) FastPakeAuthServer Fast PAKE authentication server (will skip KDF after initialization) FastPakeAuthServerTable Fast PAKE server table ForcePostQuantumEventArgs Event arguments for the OnForcePostQuantum event HashAlgorithmBase Base class for a hash algorithm HashExtensions Hash extensions HashHelper Hash helper HashMd5Algorithm MD5 hash algorithm HashSha1Algorithm SHA1 hash algorithm HashSha256Algorithm SHA256 hash algorithm HashSha384Algorithm SHA384 hash algorithm HashSha3_256Algorithm SHA3-256 hash algorithm HashSha3_384Algorithm SHA3-384 hash algorithm HashSha3_512Algorithm SHA3-512 hash algorithm HashSha512Algorithm SHA512 hash algorithm HashShake128Algorithm SHAKE128 hash algorithm HashShake256Algorithm SHAKE256 hash algorithm HashStreams Hash streams HavegeRng Havege RNG HybridAlgorithmHelper Hybrid algorithm helper JsonObjectWrapper JSON object wrapper KdfAlgorithmBase Base class for a KDF algorithm KdfExtensions KDF extensions KdfHelper KDF helper KdfPbKdf2Algorithm PBKDF#2 KDF algorithm KdfPbKdf2Options PBKDF#2 KDF algorithm options KdfSp800_108HmacCtrKbKdfAlgorithm SP 800-108 HMAC CTR KBKDF algorithm KdfSp800_801HmacKbKdfOptions SP 800-108 HMAC CTR KBKDF algorithm options KeyExchangeDataContainer Key exchange data container KeyRing Key ring MacAlgorithmBase Base class for an MAC algorithm MacExtensions MAC extensions MacHelper MAC helper MacHmacSha1Algorithm HMAC-SHA1 MAC algorithm MacHmacSha256Algorithm HMAC-SHA256 MAC algorithm MacHmacSha384Algorithm HMAC-SHA384 MAC algorithm MacHmacSha3_256Algorithm HMAC-SHA3-256 MAC algorithm MacHmacSha3_384Algorithm HMAC-SHA3-384 MAC algorithm MacHmacSha3_512Algorithm HMAC-SHA3-512 MAC algorithm MacHmacSha512Algorithm HMAC-SHA512 MAC algorithm MacSignature MAC signature helper MacStreams MAC streams NetKeyExtensions .NET asymmetric keys extensions NetShake128HashAlgorithmAdapter .NET HashAlgorithm adapter for Shake128 NetShake256HashAlgorithmAdapter .NET HashAlgorithm adapter for Shake256 ObjectEncryption Object encryption helper Pake PAKE Pake.PakeServerEventArgs PAKE server event arguments PakeAuth PAKE authentication information (needs to be sent to the server, wrapped using a PFS protocol!) PakeHttpRequestFactory PAKE http request factory PakeHttpRequestFactory<T> PAKE http request factory PakeRecord PAKE record (keep the contents secret!) PakeRecordExtensions IPakeRecord extensions PakeRecordStore PAKE record store PakeRecordStore<T> PAKE record store PakeRequest PAKE request PakeRequest.PakeRequestDto PAKE request DTO PakeRequestExtensions PakeRequest extensions PakeRequestStream PAKE request stream PakeResponse PAKE http response PakeResponse.PakeResponseDto PAKE response DTO PakeResponseExtensions PAKE response extensions PakeSignup PAKE signup information (needs to be sent to the server, wrapped using a PFS protocol!) PasswordPostProcessor Base class for a password post-processor PasswordPostProcessorChain Password post-processor chain PrivateKeySuite Private key suite (for storing long term keys) PrivateKeySuiteExtensions Private key suite extensions PrivateKeySuiteStore Private key suite store PublicKeySuite Public key suite PublicKeySuiteStore Public key suite store RND Random generators RandomDataGenerator Random data generator (uses /dev/random, if possible; defaults to RandomNumberGenerator) Rng Random number generator RngAdapter IRng to RandomNumberGenerator adapter RngBase Base class for a RNG RngExtensions Rng extensions RngOnlineSeedTimer The online seed timer applies https received seeds in an interval (requests the first seed during startup) RngSeedTimer RNG seed timer seeds a seed consumer using random data from a given RNG RngSeederQueue RNG seeder (added seeds will be copied) RngSeedingStream Seeds an RNG with streamed cipher data RngSeedingStream<T> Seeds an RNG with streamed cipher data RngStream RNG stream RngStream<T> RNG stream SecureValue Secure value (keeps a value encrypted after a timeout without any access, re-crypts from time to time; see https://static.usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf) SecureValueTable Secure value table SecureValue<T> Secure value (keeps a value encrypted after a timeout without any access, re-crypts from time to time; see https://static.usenix.org/events/sec01/full_papers/gutmann/gutmann.pdf) SeedableRngBase Base class for a seedable RNG SharedSecret Shared secret (should be used as an only short living helper) SignatureContainer Signature container SignedAttributes Signed attribute name examples/suggestions for an AsymmetricSignedPublicKey / AsymmetricPublicKeySigningRequest and validation helper SignedAttributes.ValidationOptions Validation options SignedBinaryPayload Signed binary payload SignedBinaryPayload<T> Signed binary payload SignedPayload<T> Signed payload SignedPkiStore Signed PKI store StreamSerializerExtensions Stream serializer extensions SymmetricKeySuite Symmetric key suite (used for PAKE) SymmetricKeySuiteExtensions ISymmetricKeySuite extensions ValueProtection Value protection helper ValueProtectionKeys Value protection keys ValueProtectionLevelsExtensions ValueProtectionLevels extension methods X509Extensions X509 extensions XorRng RNG which combines two or more RNGs with XOR Structs TimeoutToken Timeout token Interfaces IAsymmetricAlgorithm Interface for an asymmetric algorithm IAsymmetricKey Interface for an asymmetric key IAsymmetricKeyPool Interface for an asymmetric private key pool IAsymmetricPrivateKey Interface for an asymmetric private key IAsymmetricPublicKey Interface for an asymmetric public key IBinaryPayloadContainer Interface for a binary payload container ICryptoAlgorithm Interface for a cryptographic algorithm IEncryptProperties Interface for an object which has encrypted properties (DekAttribute and EncryptAttribute) IEncryptPropertiesExt Interface for an object which contains methods for extended en-/decryption IEncryptPropertiesKek Interface for an encryptable object which provides the key encryption key (KEK) which is going to be used to en-/decrypt the data encryption key (DEK) IKeyExchange Interface for an object which can be used to perform a key exchange IKeyExchangePrivateKey Key exchange private key IPakeHttpRequestFactory Interface for a PAKE request factory IPakeRecord Interface for a PAKE record IPakeRequest Interface for a PAKE request (all values will be cleared!) IRng Interface for an RNG ISecureValue Interface for a secure value ISeedConsumer Interface for a seed consumer (usually a RNG) ISeedableRng Interface for a seedable IRng ISignaturePrivateKey Signature private key ISignaturePublicKey Signature public key ISymmetricKeySuite Interface for a symmetric key suite Enums AsymmetricAlgorithmUsages Asymmetric algorithm usages AsymmetricSignedPublicKeyTypes AsymmetricSignedPublicKey types enumeration CryptoFlags Crypto flags EntropyHelper.Algorithms Algorithms KeyTypes Key types enumeration RngSeedingTypes RNG seeding types (CAUTION: be aware of patent US10402172B1!) ValueProtection.Scope Scope ValueProtectionLevels Value protection level enumeration Delegates AsymmetricSignedPublicKey.RootTrustAsync_Delegate Delegate for root key trust validation AsymmetricSignedPublicKey.RootTrust_Delegate Delegate for root key trust validation AsymmetricSignedPublicKey.SignedPublicKeyRevocationAsync_Delegate Delegate for signed public key revocation validation AsymmetricSignedPublicKey.SignedPublicKeyRevocation_Delegate Delegate for signed public key revocation validation AsymmetricSignedPublicKey.SignedPublicKeyStoreAsync_Delegate Delegate for a public key store AsymmetricSignedPublicKey.SignedPublicKeyStore_Delegate Delegate for a public key store CryptoHelper.ForcePostQuantum_Delegate Delegate for a force post quantum handler CryptoOptions.AsyncEncryptionPasswordPreProcessor_Delegate Delegate for an encryption password pre-processor CryptoOptions.EncryptionPasswordPreProcessor_Delegate Delegate for an encryption password pre-processor CryptoOptions.Instanced_Delegate Delegate for a OnInstanced event handler EntropyHelper.EntropyAlgorithm_Delegate Delegate for an entropy algorithm Pake.PakeServer_Delegate Delegate for a PAKE server event handler delegate Pake.PayloadFactory_Delegate Payload factory delegate Pake.PayloadProcessor_Delegate Payload processor (called after payload decryption to process the payload before returning) RND.RNGAsync_Delegate Delegate for a random generator RND.RNG_Delegate Delegate for a random generator SecureValue.Access_Delegate Delegate for an OnAccess event handler SignedAttributes.ValidateAsync_Delegate Delegate for an additional attribute validator SignedAttributes.Validate_Delegate Delegate for an additional attribute validator ValueProtection.ProtectValue_Delegate Delegate for a value protection handler ValueProtection.UnprotectValue_Delegate Delegate for a value unprotection handler"
  },
  "articles/Advanced encryption using a peers public key and hybrid key exchange.html": {
    "href": "articles/Advanced encryption using a peers public key and hybrid key exchange.html",
    "title": "Advanced encryption using a peers public key and hybrid key exchange | wan24-Crypto",
    "keywords": "Advanced encryption using a peers public key and hybrid key exchange Using asymmetric keys you can encrypt data in a way, that it is only decryptable from a peer, which gave you its public key in advance. By enabling hybrid cryptograhpy you can use a post quantum-safe counter algorithm, too, for example: using IAsymmetricPublicKey peerPublicKey = ...; using IAsymmetricPublicKey peerCounterPublicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(privateKey, peerPublicKey) .WithCounterKeyExchange(counterPrivateKey, peerCounterPublicKey); byte[] cipher = raw.Encrypt(privateKey, options), publicKeyData = (byte[])privateKey.PublicKey.KeyData.Array.Clone(), counterPublicKeyData = (byte[])counterPrivateKey.PublicKey.KeyData.Array.Clone(); privateKey and counterPrivateKey are your stored private keys, which are required to derive the key material from peerPublicKey and peerCounterPublicKey. The peer can decrypt the cipher data like this, but requires the encryptors publicKeyData and counterPublicKeyData: using IAsymmetricPublicKey publicKey = ...; using IAsymmetricPublicKey counterPublicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(peerPrivateKey, publicKey) .WithCounterKeyExchange(counterPeerPrivateKey, counterPublicKey); byte[] raw = cipher.Decrypt(peerPrivateKey, options);"
  },
  "articles/Advanced encryption using a peers public key.html": {
    "href": "articles/Advanced encryption using a peers public key.html",
    "title": "Advanced encryption using a peers public key | wan24-Crypto",
    "keywords": "Advanced encryption using a peers public key Using asymmetric keys you can encrypt data in a way, that it is only decryptable from a peer, which gave you its public key in advance: using IAsymmetricPublicKey peerPublicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(privateKey, peerPublicKey); byte[] cipher = raw.Encrypt(privateKey, options), publicKeyData = (byte[])privateKey.PublicKey.KeyData.Array.Clone(); privateKey is your stored private key, which is required to derive the key material from peerPublicKey for encryption. The peer can decrypt the cipher data like this, but requires the encryptors publicKeyData: using IAsymmetricPublicKey publicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(peerPrivateKey, publicKey); byte[] raw = cipher.Decrypt(privateKey, options);"
  },
  "articles/Advanced encryption using a private PFS key and hybrid key exchange.html": {
    "href": "articles/Advanced encryption using a private PFS key and hybrid key exchange.html",
    "title": "Advanced encryption using a private PFS key and hybrid key exchange | wan24-Crypto",
    "keywords": "Advanced encryption using a private PFS key and hybrid key exchange Using asymmetric keys you can enable PFS for your private encrypted data. By enabling hybrid cryptograhpy you can use a post quantum-safe counter algorithm, too, for example: using IKeyExchangePrivateKey pfsKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); using IKeyExchangePrivateKey counterPfsKey = AsymmetricHelper.CreateKeyExchangeKeyPair(HybridAlgorithmHelper.KeyExchangeAlgorithm.DefaultOptions); CryptoOptions options = new CryptoOptions() .WithPfs(pfsKey, privateKey.PublicKey) .WithCounterKeyExchange(counterPfsKey, counterPrivateKey.PublicKey); byte[] cipher = raw.Encrypt(pfskey, options), pfsPublicKeyData = (byte[])pfsKey.PublicKey.KeyData.Array.Clone(), counterPfsPublicKeyData = (byte[])counterPfsKey.PublicKey.KeyData.Array.Clone(); privateKey and counterPrivateKey are your stored private keys, which are required to derive the key material from pfsKey and counterPfsKey. pfsPublicKeyData and counterPfsPublicKeyData has to be managed separately in order to be able to derive the key material for decryption later, while the private pfsKey and counterPfsKey informations should be disposed after encryption directly (and without storing it anywhere!): using IAsymmetricPublicKey pfsPublicKey = ...; using IAsymmetricPublicKey counterPfsPublicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(privateKey, pfsPublicKey) .WithCounterKeyExchange(counterPrivateKey, counterPfsPublicKey); byte[] raw = cipher.Decrypt(privateKey, options);"
  },
  "articles/Advanced encryption using a private PFS key.html": {
    "href": "articles/Advanced encryption using a private PFS key.html",
    "title": "Advanced encryption using a private PFS key | wan24-Crypto",
    "keywords": "Advanced encryption using a private PFS key Using asymmetric keys you can enable PFS for your private encrypted data: using IKeyExchangePrivateKey pfsKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); CryptoOptions options = new CryptoOptions() .WithPfs(pfsKey, privateKey.PublicKey); byte[] cipher = raw.Encrypt(pfskey, options), pfsPublicKeyData = (byte[])pfsKey.PublicKey.KeyData.Array.Clone(); privateKey is your stored private key, which is required to derive the key material from pfsKey. pfsPublicKeyData has to be managed separately in order to be able to derive the key material for decryption later, while the private pfsKey information should be disposed after encryption directly (and without storing it anywhere!): using IAsymmetricPublicKey pfsPublicKey = ...; CryptoOptions options = new CryptoOptions() .WithPfs(privateKey, pfsPublicKey); byte[] raw = cipher.Decrypt(privateKey, options);"
  },
  "articles/Implementing more algorithms.html": {
    "href": "articles/Implementing more algorithms.html",
    "title": "Implementing more algorithms | wan24-Crypto",
    "keywords": "Implementing more algorithms wan24-Crypto is designed to make it easy to implement any cryptographic algorithm, which may be available from a third party library. This document gives tips how to implement new algorithms for use with the wan24-Crypto library. Please be sure to use algorithm values >255 to avoid conflicts with official extensions. Making your extension official If you want your extension to become official, please be sure to match the pre- requirements: Make your source code open source (and forkable) on GitHub Create a test project which uses the shared tests NuGet package and be sure to execute the tests which match your implementations Then there are just a few more steps: Request your official algorithm IDs (you can open an issue for that) and provide the URI to your GitHub project Update your extension to use your official algorithm IDs Create a NuGet package Update the issue with the URI to the NuGet package and request publication Wait for submission approval That's it! Your benefit will be a link to your NuGet package on the wan24-Crypto GitHub project main page, and official algorithm values, which won't conflict with other future developments ever. In order to keep your official algorithm values please be sure to update your project and NuGet package when the main wan24-Crypto NuGet package was updated update your project and NuGet package when your implemented algorithm(s) were updated Dead projects will loose their official algorithm value assignments after a deprecation period of one year. The deprecation period starts when wan24-Crypto was updated, and you didn't update your project and/or NuGet packet, or an implemented algorithm was broken. If your implemented encryption algorithm has been broken, wan24-Crypto will be updated to ensure that this algorithm can't be applied anymore (only decryption will work). Implemting a hash algorithm Your implementation needs to extend the HashAlgorithmBase type and implement these abstrations: HashLength: Property which returns the hash length in bytes IsPostQuantum: If the algorithm is considered to be post quantum-safe GetHashAlgorithm: Returns a new HashAlgorithm instance Registration: HashHelper.Algorithms[\"YourAlgorithm\"] = new YourAlgorithm(); Tests: await wan24.Crypto.Tests.HashingTests.TestAllAlgorithms(); Implementing a MAC algorithm Your implementation needs to extend the MacAlgorithmBase type and implement these abstrations: MacLength: Property which returns the MAC length in bytes IsPostQuantum: If the algorithm is considered to be post quantum-safe GetMacAlgorithm: Returns a new KeyedHashAlgorithm instance Registration: MacHelper.Algorithms[\"YourAlgorithm\"] = new YourAlgorithm(); Tests: await wan24.Crypto.Tests.MacTests.TestAllAlgorithms(); wan24.Crypto.Tests.HybridTests.AllMacTests(); Implementing a KDF algorithm Your implementation needs to extend the KdfAlgorithmBase type and implement these abstrations: DefaultIterations: The number of default iterations SaltLength: Returns the required salt length in bytes IsPostQuantum: If the algorithm is considered to be post quantum-safe Stretch: Key stretching method which return the stretched key and the used salt Registration: KdfHelper.Algorithms[\"YourAlgorithm\"] = new YourAlgorithm(); Tests: wan24.Crypto.Tests.KdfTests.TestAllAlgorithms(); wan24.Crypto.Tests.HybridTests.AllKdfTests(); Implementing a symmetric encryption algorithm Your implementation needs to extend the EncryptionAlgorithmBase type and implement these abstractions: KeySize: The required key size in bytes IvSize: The required IV size in bytes BlockSize: The block size in bytes RequireMacAuthentication: If a MAC authentication is required GetEncryptor(Async): Returns a IcryptoTransform for encryption and writes all information to the cipher stream, which is required for creating a decryptor (such as IV bytes, etc.) GetDecryptor(Async): Returns a IcryptoTransform for decryption and reads all information from the cipher stream, which is required for creating the decryptor (such as IV bytes, etc.) Registration: EncryptionHelper.Algorithms[\"YourAlgorithm\"] = new YourAlgorithm(); Tests: await wan24.Crypto.Tests.EncryptionTests.TestAllAlgorithms(); wan24.Crypto.Tests.HybridTests.AllSyncEncryptionTests(); await wan24.Crypto.Tests.HybridTests.AllAsyncEncryptionTests(); Implementing an asymmetric algorithm You'll need to create at last these types: Algorithm definition which extends AsymmetricAlgorithmBase Private key which extends AsymmetricPrivateKeyBase Public key which extends AsymmetricPublicKeyBase If the algorithm is for key exchange, the private key needs to implement the IKeyExchangePrivateKey interface. If the algorithm is for signature, the private key needs to implement the ISignaturePrivateKey interface, while the public key needs to implement the ISignaturePublicKey interface. An asymmetric may be used for both, key exchange and signature. NOTE: Your private/public key implementations need to store the serialized key data in the KeyData property! Registration: AsymmetricHelper.Algorithms[\"YourAlgorithm\"] = new YourAlgorithm(); Tests: wan24.Crypto.Tests.AsymmetricTests.TestAllAlgorithms(); wan24.Crypto.Tests.HybridTests.AllAsymmetricTests(); Implementing the algorithm definition public sealed class YourAsymmetricAlgorithm extends AsymmetricAlgorithmBase<YourPublicKey, YourPrivateKey> { public YourAsymmetricAlgorithm() : base(\"YourAlgorithmName\", 123) => _DefaultOptions.AsymmetricKeyBits = DefaultKeySize = 123; ... } You'll need to implement these abstractions: Usages: Returns the supported key usages (key exchange and/or signature) IsEllipticCurveAlgorithm: If the algorithm uses the standard elliptic curves AllowedKeySizes: A list of allowed key sizes (in bits) IsPostQuantum: If the algorithm is considered to be post quantum-safe CreateKeyPair: Method which is used to create a new private/public key pair Implementing the private key public sealed class YourPrivateKey : AsymmetricPrivateKeyBase<YourPublicKey, YourPrivateKey>, IKeyExchangePrivateKey { public YourPrivateKey() : base(\"YourAlgorithmName\") { } public YourPrivateKey(byte[] privateKeyData) : this() { // Deserialize the key (you can store the key data in the KeyData property) } ... } This example shows the definition of a private key for key exchange. If your algorithm is for signature, implement ISignaturePrivateKey instead. You'll need to implement these abstractions: Bits: Property which returns the key size in bits PublicKey: Returns the public key instance, which needs to be disposed, if the private key is being disposed (set the value to _PublicKey) IKeyExchangePrivateKey or ISignaturePrivateKey abstractions Implementing the public key public sealed class YourPublicKey : AsymmetricPublicKeyBase { public YourPublicKey() : base(\"YourAlgorithmName\") { } public YourPublicKey(byte[] privateKeyData) : this() { // Deserialize the key (you can store the key data in the KeyData property) } ... } This example shows the definition of a public key for key exchange. If your algorithm is for signature, implement the ISignaturePublicKey interface. You'll need to implement these abstractions: Bits: Property which returns the key size in bits GetCopy: Method which returns a copy of the public key instance (which will be disposed manual) ISignaturePublicKey abstractions, if applicable Best practice Use the core libraries algorithm implementations as examples for your own implementations Execute tests from the wan24-Crypto-Shared-Tests NuGet packet and implement own tests, too Use a custom algorithm ID >255 Use a unique algorithm name Use reasonable class naems Create sealed classes Write documentation comment blocks for all types, constructors, fields, properties and methods (even the private ones) and enable XML documentation creation in Visual Studio Keep your implementations up to date (re-build for new wan24-Crypto versions)"
  },
  "articles/Simple encryption using a password.html": {
    "href": "articles/Simple encryption using a password.html",
    "title": "Simple encryption using a password | wan24-Crypto",
    "keywords": "Simple encryption using a password The most simple encryption uses a symmetric password. Here are some examples (using all the default settings): // In memory byte[] cipher = raw.Encrypt(password); raw = cipher.Decrypt(password); // Streams rawStream.Encrypt(cipherStream, password); cipherStream.Position = 0; rawStream.Setlength(0); cipherStream.Decrypt(rawStream, password); There extensions for byte[], Span<byte>, Memory<byte> and Stream. The used password is not restricted at all: KDF will be used to match the key length which may be required by the cipher algorithm (if CryptoOptions.KdfIncluded is true!). The IV bytes will be auto-generated and prepended to the cipher data - and also be red from the cipher data, when decrypting, so that you don't have to care about that at all. If a cipher requires MAC authentication (like AES256-CBC), an automatically managed MAC will authenticate the IV bytes, too."
  },
  "articles/Special features explained.html": {
    "href": "articles/Special features explained.html",
    "title": "Special features explained | wan24-Crypto",
    "keywords": "Special features explained Flags and requirements Using flags in the CryptoOptions you can define which information will be included (or are included, when decrypting) in the cipher header, while the requirements define which informations are required to be included in the cipher header when decrypting. The flags ensure that all information which you require for decrypting cipher data is included in the header. If all necessary are included in the header, you can decrypt without specifying them in the options. Requirements finally ensure that a cipher header contains all information, which is required for decryption. By defining requirements you can detect invalid cipher data before wasting time - and it's a security feature, too: Requirements can define additional security features, which you require to be applied before accepting cipher data for decryption. Skip the encryption header Normally a header is prepended in the cipher data. In case you want to skip the header: CryptoOptions options = new().IncludeNothing(); Including all required decryption information into the header ensures that you'll be able to decrypt the cipher even with newer library versions, or if you don't know the options used for encryption. You may skip that header, if the cipher will be decrypted soon, and you know the options which are required for decryption. Forcing the MAC to cover the whole data A cipher engine mode (like AES-CBC) may require to include a MAc which covers the whole data. Other cipher engines may not require that, but wan24-Crypto will cover the cipher header with a MAC to authenticate the included decryption options. The MAC will be validated before any decryption action, and during the cipher header is being red. You may force to cover all cipher data instead, by setting the value of the CryptoOptions.RequireMacCoverWhole instance property to true. This will ensure that the included MAC covers the cipher header including the cipher data, which will add overhead for ciphers which don't require it - but add more security to the whole thing. Using CryptoOptions as cipher suite You may use a configured CryptoOptions instance as storable crypto suite: // Serialize for storing in binary form byte[] serializedOptions = (byte[])options; // Deserialize a previously stored binary form options = (CryptoOptions)serializedOptions; Sensible information (like keys) and temporary processing informations will be skipped by the serializer. Working with asymmetric keys In general you should use these interfaces where possible: IAsymmetricPrivateKey for any private key IAsymmetricPublicKey for any public key IKeyExchangePrivateKey to enforce working with a private key with key exchange capabilities (extends IAsymmetricPrivateKey) ISignaturePrivateKey to enforce working with a private key with signature capabilities (extends IAsymmetricPrivateKey) ISignaturePublicKey to enforce working with a public key with signature validation capabilities (extends IAsymmetricPublicKey) Work with final key types only, if you're sure that you won't switch to another algorithm later. The abstractions help you to stay flexible. Getting wan24-Crypto objects from .NET keys wan24-Crypto uses the .NET cryptographic infrastructure and adds a higher level layer. But you're still able to access the lower level information, and it's also possible to create a higher level object from a lower level object: // To determine the algorithm (and if the algorithm is supported) IAsymmetricAlgorithm? algo = asymmetricAlgorithm.GetAsymmetricAlgorithm(); // Create a IAsymmetricPrivateKey instance from a .NET asymmetric algorithm using IAsymmetricPrivateKey privateKey = asymmetricAlgorithm.GetAsymmetricPrivateKey(); // Create a IAsymmetricPublicKey instance from a .NET asymmetric algorithm using IAsymmetricPrivateKey publicKey = asymmetricAlgorithm.GetAsymmetricPublicKey(); Supported are: Elliptic Curve Diffie Hellman Elliptic Curve DSA Getting wan24-Crypto objects from a X.509 certificate The X.509 extensions try to return the used wan24-Crypto asymmetric algorithm create a IAsymmetricPrivateKey instance create a IAsymmetricPublicKey instance from a X.509 certificate, if possible. This is limited to the implemented .NET keys. Simple object (de)serialization // Serialize byte[] serializedData = (byte[])instance; // Deserialize instance = (InstanceType)serializedData; This is possible with asymmetric keys CryptoOptions KeyExchangeDataContainer SignatureContainer The used binary serializer uses object versioning to ensure that a previously serialized object can be deserialized later, even the object definition was changed meanwhile (or the serializer binary format). A payload object in the cipher header You can include any payload object into the cipher header, but you should ensure to use a MAC, too, before deserializing or using a payload object instance from a cipher header (!): CryptoOptions options = new CryptoOptions().WithPayload(payload); NOTE: The payload will be serialized unencrypted to the cipher header! To get the payload object later: // Require payload to be included CryptoOptions options = new() { RequirePayload = true }; // Read the cipher header options = cipherData.ReadOptions(rawData, password, options); // Extract the payload object PayloadType payload = options.GetPayload<PayloadType>() ?? throw new InvalidDataException(); // Continue with decryption cipherData.Decrypt(rawData, password, options); In order to be able to (de)serialize the payload, the object should be JSON serializable or implement the IStreamSerializer interface. If you want to use the JSON serializer, you'll need to enable it, first: EncryptionHelper.EnableJsonWrapper = true; CAUTION: JSON (de)serializing is disabled per default for security reasons - enable on your own risk! CAUTION: Even the Stream-Serializer-Extensions may let you run into security issues, if you change the default settings or implement insecure (de)serialization methods! Hybrid cryptography In case you don't want to trust one algorithm alone (which may be broken in the future), you can add a counter algorithm for MAC (counter MAC will be created from the MAC) KDF (stretched key will be stretched twice using the counter KDF algorithm in the 2nd round) asymmetric key exchange (exchanged keys will be concatenated) and signature (signature will be signed with the counter signature algorithm) The counter MAC will only authenticate the MAC, since creating two MACs over the whole authenticated data may be a too huge overhead. If you need that, you're free to DIY. Using a counter KDF algorithm requires to store two salt values, which is only a little overhead compared to the security it adds. Also the counter signature doesn't sign the whole authenticated data again, because this would produce too much overhead. Instead the first signature is signed, which authenticates the signed data reliable, as long as the hash algorithm wasn't broken. Counter hash There's no counter hash, which you maybe would like to use for your signatures. It's easy to DIY: // Apply a counter hash algorithm (SHA-512 in this example) using MemoryStream ms = new(); using HashStreams hash = HashSha512Algorithm.Instance.GetHashStream(ms, options: new() { LeaveOpen = true }); ms.Write(dataToSign); hash.Stream.Dispose();// To finalize the hash ms.Write(hash.Transform.Hash!); // Create and validate the signature // Validate the counter hash algorithm using MemoryStream ms = new(signedData); using HashStreams hash = HashSha512Algorithm.Instance.GetHashStream(ms, writable: false, new() { LeaveOpen = true }); byte[] buffer = new byte[ms.Length - HashSha512Algorithm.Instance.HashLength];// Previously dataToSign if(ms.Read(buffer) != buffer.Length) throw new IOException(); hash.Stream.Dispose();// Stop calculating the counter hash, 'cause the hashed data has been red already byte[] bufferHash = new byte[HashSha512Algorithm.Instance.HashLength]; if(ms.Read(bufferHash) != bufferHash.Length) throw new IOException(); if(!hash.Transform.Hash!.AsSpan().SlowCompare(bufferHash)) throw new InvalidDataException(\"Counter hash mismatch\"); Hybrid helper The HybridAlgorithmHelper stores the default hybrid cryptography settings, which are missing per default: KeyExchangeAlgorithm: Hybrid key exchange algorithm to use SignatureAlgorithm: Hybrid signature algorithm to use KdfAlgorithm: Hybrid KDF algorithm to use MacAlgorithm: Hybrid MAC algorithm to use If you want to use the hybrid default algorithms for encryption: EncryptionHelper.UseHybridOptions = true; These are examples for manual operations: Hybrid PFS key exchange Creating hybrid key exchange data: CryptoOptions options = new CryptoOptions() .WithPfs(privateKey)// Optional give the peers PFS public key here .WithCounterKeyExchange(counterPrivateKey);// Optional give the peers counter PFS public key here KeyExchangeDataContainer container = new() { KeyExchangeData = privateKey.GetKeyExchangeData(options: options) }; HybridAlgorithmHelper.GetKeyExchangeData(container, options); The exchanged key is now available in options.Password. For deriving an exchanged key: CryptoOptions options = new CryptoOptions() .WithPfs(peerPrivateKey) .WithCounterKeyExchange(counterPeerPrivateKey); HybridAlgorithmHelper.DeriveKey(container, options); The exchanged key is now available in options.Password. Hybrid KDF CryptoOptions options = new CryptoOptions() .WithEncryptionAlgorithm()// Required for the desired key length .WithKdf() .WithCounterKdf(); options.Password = password.Stretch(EncryptionHelper.GetAlgorithm(options.Algorithm).KeySize, options); HybridAlgorithmHelper.StretchPassword(options); The final stretched password is now available in options.Password. Hybrid MAC CryptoOptions options = new CryptoOptions() .WithMac() .WithCounterMac(); options.Mac = authenticatedData.Mac(options); HybridAlgorithmHelper.ComputeMac(options); The final MAC is now available in options.Mac. Hybrid signature // Signing CryptoOptions options = new CryptoOptions() .WithSignatureKey(privateKey, counterPrivateKey); SignatureContainer = privateKey.SignData(dataToSign, options: options); // Signature validation publicKey.ValidateSignature(signature); if(!HybridAlgorithmHelper.ValidateCounterSignature(signature)) throw new InvalidDataException(\"Counter signature validation failed - signature is invalid!\"); Elliptic curves Per default only these elliptic curves are supported: secp256r1 secp384r1 secp521r1 .NET offers way more elliptic curves, but not on all operating systems. To be compatible with all platforms, only the curves which are supported everywhere are supported (these curves are the NIST recommended curves). There's no support for other (and custom) curves for several reasons: The support won't match this libraries target to make things more easy The NIST recommendations are worldwide used standards Custom curve support may blow up the cipher header overhead Post quantum-safety AES-256 and (HMAC-)SHA-384+ are considered to be post quantum-safe at this time. Post quantum asymmetric algorithms aren't implemented in the core library, but they're available by using extension libraries. When you use such an extension library, you may want to force post quantum-safety for your application, which ensures that only post quantum-safe algorithms will be used per default: CryptoHelper.ForcePostQuantumSafety(strict: true); This will change the environment: Only post quantum-safe algorithms will be used in the defaults Hybrid algorithms will be enabled everywhere By giving strict: true to the method, post quantum-safety is strictly required (using any non-post quantum-safe algorithm will cause an exception) If the method wasn't able to set post quantum-safe defaults in any area, it'll fail with an exception."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "wan24-Crypto Wiki | wan24-Crypto",
    "keywords": "wan24-Crypto Wiki Contents [Special features explained](Special features explained.md) Use case examples [Simple encryption using a password](Simple encryption using a password.md) [Advanced encryption using a private PFS key](Advanced encryption using a private PFS key.md) [Advanced encryption using a private PFS key and hybrid key exchange](Advanced encryption using a private PFS key and hybrid key exchange.md) [Advanced encryption using a peers public key](Advanced encryption using a peers public key.md) [Advanced encryption using a peers public key and hybrid key exchange](Advanced encryption using a peers public key and hybrid key exchange.md) [Implementing more algorithms](Implementing more algorithms.md)"
  },
  "index.html": {
    "href": "index.html",
    "title": "wan24-Crypto | wan24-Crypto",
    "keywords": "wan24-Crypto This library exports a generic high level crypto API, which allows to use an implemented cryptographic algorithm to be applied using a simple interface. It also implements abstract and configurable RNG handling, which uses a local (CS)RNG entropy source, if not overridden and extended with a customized RNG algorithm, which may use a physical entropy source, too. Per default these cryptographic algorithms are implemented: Usage Algorithm Hashing MD5 SHA-1 SHA-256 SHA-384 SHA-512 SHA3-256 SHA3-384 SHA3-512 Shake128 Shake256 MAC HMAC-SHA-1 HMAC-SHA-256 HMAC-SHA-384 HMAC-SHA-512 HMAC-SHA3-256 HMAC-SHA3-384 HMAC-SHA3-512 Symmetric encryption AES-256-CBC (ISO10126 padding) Asymmetric keys Elliptic Curve Diffie Hellman Elliptic Curve DSA (RFC 3279 signatures) KDF key stretching PBKDF#2 (250,000 iterations per default) SP 800-108 HMAC CTR KBKDF These elliptic curves are supported at present: secp256r1 secp384r1 secp521r1 The number of algorithms can be extended easy, a bunch of additional libraries implementing more algorithms (and probably more elliptic curves) will follow soon. The goals of this library are: Make a choice being a less torture Make a complex thing as easy as possible Implementing (new) cryptographic algorithms into (existing) code can be challenging. wan24-Crypto tries to make it as easy as possible, while the API is still complex due to the huge number of options it offers. Please see the Wiki for examples of the most common use cases, which cover: Simple encryption using a password Advanced encryption using a private PFS key Advanced encryption using a private PFS key and hybrid key exchange Advanced encryption using a peers public key Advanced encryption using a peers public key and hybrid key exchange For more examples please open an issue - I'd be glad to help! If you've found a security issue, please report it private. NOTE: The cipher output of this library may include a header, which can't (yet) be interpreted by any third party vendor code (which is true especially if the raw data was compressed before encryption, which is the default). That means, a cipher output of this library can't be decrypted with a third party crypto library, even this library implements standard cryptographic algorithms. Using this library for a cipher which has to be exchanged with a third party application, which relies on working with standard crypto algorithm output, is not recommended - it may not work! Anyway, this library should be a good choice for isolated use within your application(s), if want to avoid a hussle with implementing newer crypto algorithms. How to get it This library is available as NuGet package. These extension NuGet packages are available: wan24-Crypto-BC (adopts some algorithms from Bouncy Castle) wan24-Crypto-NaCl (adopts the Argon2id KDF algorithm from NSec) wan24-Crypto-TPM (simplifies including TPM into your apps security) Usage In case you don't use the wan24-Core bootstrapper logic, you need to initialize the library first: wan24.Crypto.Bootstrap.Boot(); In case you work with dependency injection (DI), you may want to add some services: builder.Services.AddWan24Crypto(); WARNING: The factory default algorithms may not be available on every platform! The wan24-Crypto-BC extension library contains pure .NET implementations of most algorithms from wan24-Crypto, which can be used instead. Hashing byte[] hash = rawData.Hash(); The default hash algorithm ist SHA3-512. Shake128/256 hash algorithms The Shake128 and Shake256 hash algorithms support a variable output (hash) length. The default output length of the hash implementations of wan24-Crypto is 32 bytes for Shake128 64 bytes for Shake256 when using the HashHelper, the extension methods, or the HashShake128/256Algorithm instances directly. Anyway, if you need other output lengths, you may use the NetShake128/256HashAlgorithmAdapter classes, which allow to give the desired output length in bytes (a multiple of 8) to the constructor, and can be used as every other .NET HashAlgorithm implementation (also in a crypto stream/transform, for example). MAC byte[] mac = rawData.Mac(password); The default MAC algorithm is HMAC-SHA3-512. NOTE: The CryptoOptions.MacPassword won't be used here, since you have to specify the MAC password in the method call already. The MacPassword is only used during encryption, if it is different from the encryption key. KDF (key stretching) (byte[] stretchedPassword, byte[] salt) = password.Stretch(len: 64); The default KDF algorithm is PBKDF#2, using 250,000 iterations, with a salt length of 16 byte and SHA3-384 for hashing. TIP: You may override the default hash algorithm which is being used in a new options instance in the static KdfPbKdf2Options.DefaultHashAlgorithm property. Example options usage: (byte[] stretchedPassword, byte[] salt) = password.Stretch(len: 64, options: new KdfPbKdf2Options() { HashAlgorithm = HashSha3_512Algorithm.ALGORITHM_NAME });// KdfPbKdf2Options cast implicit to CryptoOptions NOTE: The SP 800-108 HMAC CTR KBKDF algorithm isn't available in a WASM app, and there's currently no pure .NET replacement included in the wan24-Crypto-BC library. It doesn't support iterations and salt (but a label and context value instead). Not all hash algorithms may be supported (you'll need to register custom hash algorithms to the .NET CryptoConfig). Encryption byte[] cipher = raw.Encrypt(password); byte[] decrypted = cipher.Decrypt(password); There are extension methods for memory and streams. The default algorithms used: Usage Algorithm Symmetric encryption AES-256-CBC MAC HMAC-SHA3-512 KDF PBKDF#2 Asymmetric key exchange EC Diffie Hellman Asymmetric digital signature EC DSA NOTE: The CryptoOptions.MacPassword will optionally be used, if an additional MAC is being computed, but it doesn't affect the AEAD included MAC, which is going to be calculated separately. If no MacPassword was set, the final encryption password is going to be used instead. Using asymmetric keys for encryption This way you encrypt using a stored private key (which will be required for decryption later): using IAsymmetricPrivateKey privateKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] cipher = raw.Encrypt(privateKey); byte[] decrypted = cipher.Decrypt(privateKey); In case you want to encrypt for a peer using the peers asymmetric public key for performing a PFS key exchange: // Peer creates a key pair (PFS or stored) and sends peerPublicKeyData to the provider using IAsymmetricPrivateKey peerPrivateKey = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] peerPublicKeyData = (byte[])peerPrivateKey.PublicKey;// Needs to be available at the provider // Encryption at the provider (pfsKey shouldn't be stored and can be a new key for every cipher message) using IAsymmetricPublicKey peerPublicKey = AsymmetricKeyBase.Import<IAsymmetricPublicKey>(peerPublicKeyData);// Deserialize the peers public key of any format CryptoOptions options = EncryptionHelper.GetDefaultOptions();// Add the asymmetric key information for key pair creation options.AsymmetricAlgorithm = peerPublicKey.Algorithm.Name; options.AsymmetricKeyBits = peerPublicKey.Bits; options.PublicKey = peerPublicKey;// Required for encrypting especially for the one specific peer byte[] cipher; using(IKeyExchangePrivateKey pfsKey = AsymmetricHelper.CreateKeyExchangeKeyPair(options)) cipher = raw.Encrypt(pfsKey, options);// Only the peer can decrypt the cipher after pfsKey was disposed // Decryption at the peer byte[] decrypted = cipher.Decrypt(peerPrivateKey, options); Time critical decryption It's possible to define a maximum age for cipher data, which can't be decrypted after expired: // Encryption CryptoOptions options = new() { TimeIncluded = true }; byte[] cipher = raw.Encrypt(password, options); // Decryption (required to be decrypted within 10 seconds, or the decryption will fail) options = new() { RequireTime = true, MaximumAge = TimeSpan.FromSeconds(10) } byte[] decrypted = cipher.Decrypt(password, options); By defining CryptoOptions.MaximumTimeOffset you may define a time tolerance which is being used to be tolerant with peers having a slightly different system time. Password pre-processing The CryptoOptions.EncryptionPassword(Async)PreProcessor delegates may pre- process an encryption password from CryptoOptions.Password before the key bytes are being finalized for use with the desired crypto engine. Key derivation from asymmetric keys and KDF are being applied before. The asynchronous delegate will only be used during asynchronous operations, while the synchronous delegate is a fallback during asynchronous operations, if no asynchronous delegate was set. The delegate itself need to set the final key to use to CryptoOptions.Password and should clear the current value. TIP: For setting a new password to CryptoOptions.Password use the CryptoOptions.SetNewPassword method. This method will clear the previous value, if any. Asymmetric keys Key exchange PFS example: // A: Create a key pair using IKeyExchangePrivateKey privateKeyA = AsymmetricHelper.CreateKeyExchangeKeyPair(); byte[] publicKeyData = (byte[])privateKeyA.PublicKey.Export();// publicKeyData needs to be available at B // B: Create a key pair, key exchange data and derive the shared key using IAsymmetricPublicKey publicKeyA = AsymmetricKeyBase.Import<IAsymmetricPublicKey>(publicKeyData);// Deserialize the peers public key of any format using IKeyExchangePrivateKey privateKeyB = AsymmetricHelper.CreateKeyExchangeKeyPair(new() { AsymmetricAlgorithm = publicKeyA.Algorithm.Name, AsymmetricKeyBits = publicKeyA.Bits }); (byte[] keyB, byte[] keyExchangeData) = privateKeyB.GetKeyExchangeData(publicKeyA);// keyExchangeData needs to be available at A // A: Derive the exchanged key byte[] keyA = privateKeyA.DeriveKey(keyExchangeData); Assert.IsTrue(keyA.SequenceEquals(keyB)); The default key exchange algorithm is ECDH from a secp521r1 elliptic curve. IKeyExchange interface All asymmetric private keys which can be used for a key exchange implement the IKeyExchange interface. This interface is also used for PAKE, for example. By working with this interface, it's possible to implement more abstract key exchange routines: // Initiator side (byte[] keyA, byte[] keyExchangeData) = initiatorKeyExchangeProcessor.GetKeyExchangeData(); // Transfer keyExchangeData to the peer using a secure communication channel // Peer side byte[] keyB = peerKeyExchangeProcessor.DeriveKey(keyExchangeData); Assert.IsTrue(keyA.SequenceEquals(keyB)); initiatorKeyExchangeProcessor and peerKeyExchangeProcessor are IKeyExchange instances and may be an asymmetric private key, or a PAKE instance, for example. Both peers need to agree to the same key exchange method, first. And both peers need to use a key exchange processor which can produce/take the key exchange data of the initiator. NOTE: The PrivateKeySuite implements IKeyExchange using the managed KeyExchangeKey, if any. Digital signature // Create a key pair for signature using ISignaturePrivateKey privateKey = AsymmetricHelper.CreateSignatureKeyPair(); // Sign data SignatureContainer signature = privateKey.SignData(anyData); // Validate a signature privateKey.PublicKey.ValidateSignature(signature, anyData); The default signature algorithm is ECDSA from a secp521r1 elliptic curve. Value protection The ValueProtection contains some static methods for protecting a value in a specified scope: value = ValueProtection.Protect(value); value = ValueProtection.Unprotect(value); There are 3 scopes, which may be given as parameter: System: System (permanent system bound protection) User: Current user (permanent user bound protection) Process: Current process (default; for non-permanent protection only!) The scope keys will be set automatic, but may be replaced with your own logic. Per default the keys are generated like this: System: Hash of application location and machine name User: Hash of user domain and name, application location and machine name Process: Random data WARNING: Setting new keys isn't thread-safe! The Protect and Unprotect methods are delegate properties which can be exchanged. For example for Windows and Linux OS you may want to use different approaches. For protecting a value it'll be encrypted using the current default encryption options. Using the ValueProtectionLevels you can manage keys for a specific security requirement by defining keys using the ValueProtectionKeys.Set method, and getting them later using the ValueProtectionKeys.Get method. The protection levels include variations for the system (mashine) and user level, with or without TPM (for TPM usage the wan24-Crypto-TPM module is required) and optional with an online key storage and/or a manual entered user password (the online key storage and user password input needs to be implemented by yourself): // userPassword should be entered manually whenever it's required to (un)protect a value byte[] protectedValue = ValueProtectionLevels.UserTpmPassword.Protect(value, userPassword); // protectedValue is ready to be stored for the current user scope byte[] unprotectedValue = ValueProtectionLevels.UserTpmPassword.Unprotect(protectedValue, userPassword); The ValueProtectionKeys is used to (re)store a protection key for each level using the Set(2) and (Try)Get methods. It uses a ISecureValue for serious key protection: ValueProtectionKeys.Set(ValueProtectionLevels.UserTpmPassword, protectionKey, userPassword); NOTE: While the Set method requires a ISecureValue, the Set2 method creates a SecureValue from the protectionKey byte array parameter. The (Try)Get methods will return the final key to use (after MAC, if applicable). Stored keys will be protected for the according scope using ValueProtection. You may use the extension method ValueProtectionLevels.*.Protect/Unprotect for protecting/unprotecting a value, or the raw protection key which is being returned from the ValueProtectionKeys.(Try)Get methods for applying en-/decryption of values by yourself. To determine the capabilities of a protection level, you can use these ValueProtectionLevels extension methods: RequiresPasswordInput: If a manual entered user password is required RequiresTpm: If a TPM is required RequiresNetwork: If an online key storage is required GetScope: Determines the according ValueProtection.Scope enumeration value NOTE: In order to be able to use the TPM protection levels, wan24-Crypto-TPM and a TPM must be available. The protection levels including online communication require implementing an online key storage service. ValueProtectionKeys does support a single user context only (it's designed for an app which runs in a specific user context). WARNING: For each value protection level that you want to use you'll need to set a key using ValueProtectionKeys.Set(2), which is not thread-safe. Too many options? The CryptoOptions contains a huge collection of properties, which follow a simple pattern in case of en-/decryption: Which information should be included in the cipher header, and is an information in the header required? Because the options include information for all sections, there are single values which belongs to the specific section only. If you separate the options into sections, it's easy to overview: Section Property Description Default value Encryption Algorithm Encryption algorithm name null (AES256CBC) EncryptionOptions String serialized encryption options null EncryptionPasswordPreProcessor Delegate for pre-processing an encryption password (the default can be set to DefaultEncryptionPasswordPreProcessor) null EncryptionPasswordAsyncPreProcessor Delegate for pre-processing an encryption password (only applied during asynchronous operation; the default can be set to DefaultEncryptionPasswordAsyncPreProcessor) null FlagsIncluded Are the flags included in the header? true RequireFlags Are the flags required to be included in the header? true PrivateKeysStore Private keys store to use for decryption, using automatic key suite revision selection (the default can be set to DefaultPrivateKeysStore) null PrivateKeyRevision Revision of the used private key suite (may be set automatic) 0 PrivateKeyRevisionIncluded Is the private key suite revision included in the header? true, if a DefaultPrivateKeysStore was set RequirePrivateKeyRevision Is the private key suite revision required to be included in the header? true, if a DefaultPrivateKeysStore was set RngSeeding RNG seeding options (overrides RND.AutoRngSeeding) null MAC MacAlgorithm MAC algorithm name null (HMAC-SHA3-512) MacIncluded Include a MAC in the header true RequireMac Is the MAC required in the header? true CounterMacAlgorithm Counter MAC algorithm name null CounterMacIncluded Include a counter MAC in the header false RequireCounterMac Is the counter MAC required in the header? false ForceMacCoverWhole Force the MAC to cover all data false RequireMacCoverWhole Is the MAC required to cover all data? false MacPassword Password to use for a MAC null Encryption / Key creation / Signature AsymmetricAlgorithm Asymmetric algorithm name null (ECDH for encryption, ECDSA for signature) AsymmetricAlgorithmOptions String serialized algorithm options null AsymmetricCounterAlgorithm Asymmetric counter algorithm name null KeyExchangeData Key exchange data (includes counter key exchange data; generated automatic) null RequireKeyExchangeData Is the key exchange data required in the header? false PrivateKey Private key for key exchange null CounterPrivateKey Private key for counter key exchange (required when using a counter asymmetric algorithm) null PublicKey Public key for key exchange (if not using a PFS key) null CounterPublicKey Public key for counter key exchange (required when using a counter asymmetric algorithm and not using a PFS key) null KDF KdfAlgorithm KDF algorithm name null (PBKDF2) KdfIterations KDF iteration count 1 KdfOptions String serialized KDF algorithm options null KdfSalt KDF salt (generated automatic) null KdfAlgorithmIncluded Include the KDF information in the header true RequireKdfAlgorithm Is the KDF information required in the header? true CounterKdfAlgorithm Counter KDF algorithm name null CounterKdfIterations Counter KDF iteration count 1 CounterKdfOptions String serialized KDF algorithm options null CounterKdfSalt Counter KDF salt (generated automatic) null CounterKdfAlgorithmIncluded Include the counter KDF information in the header false RequireCounterKdfAlgorithm Is the counter KDF information required in the header? false Payload PayloadData Plain payload null PayloadIncluded Is the payload object data included in the header? false RequirePayload Is payload object data required in the header? false Serializer version CustomSerializerVersion Serializer version number (set automatic) null SerializerVersionIncluded Include the serializer version number in the header true RequireSerializerVersion Is the serializer version number required in the header? true Header version HeaderVersion Header version number (set automatic) 1 HeaderVersionIncluded Is the header version included in the header? true RequireHeaderVersion Is the header version required in the header? true Encryption time Time Encryption timestamp (UTC) null TimeIncluded Is the encryption time included in the header? false RequireTime Is the encryption time required to be included in the header? false MaximumAge Maximum age of cipher data (the default can be set to DefaultMaximumAge) null MaximumTimeOffset Maximum time offset for a peer with a different system time (the default can be set to DefaultMaximumTimeOffset) null Compression Compressed Should the raw data be compressed before encryption? true Compression The CompressionOptions instance to use (will be set automatic, if not given) null MaxUncompressedDataLength Maximum uncompressed data length in bytes (when decrypting) -1 Hashing / Signature HashAlgorithm The name of the hash algorithm to use null (SHA3-512) Key creation AsymmetricKeyBits Key size in bits to use for creating a new asymmetric key pair 1 Stream options LeaveOpen Leave the processing stream open after operation? false Debug options Tracer Collects tracing information during en-/decryption null Tag Tag Can store any tagged object which will be cloned on GetCopy, if IClonable is implemented null Other options, which are not listed here, are used internal only. If you use a new instance of CryptoOptions, all defaults will be applied. You can override these defaults in the static *Helper.Default* properties, or by setting other values in the CryptoOptions instance, which you use when calling any method. For encryption these sections matter: Encryption MAC PFS KDF Payload Serializer version Header version Encryption time Compression Stream options In case you want to use the *Counter* options, you'll need to set the CounterPrivateKey value. For MAC these sections matter: MAC Stream options For hashing these sections matter: Hashing Stream options For asymmetric key creation the \"Key creation\" section matters. For signature these sections matter: Signature Hashing Stream options The CryptoEnvironment helps configuring the whole wan24-Crypto environment at once by providing an options class which contains all the options that one might miss, when not knowing where to look at: CryptoEnvironment.Configure(new() { ... }); NOTE: See the developer reference for details of the CryptoEnvironment.Options class. Options will only be applied, if they have a non-null value. The CryptoEnvironment has also some static properties for storing some singleton instances (which are used as default for the configurable options). You could implement a JSON configuration file using the AppConfig logic from wan24-Core, and the CryptoAppConfig. In this configuration it's possible to define many options from the CryptoEnvironment.Options, which can be written as a JSON value. There it's also possible to define disabled algorithms, which makes it possible to react to a broken algorithm very fast and without having to update your app, for example. If you use an AppConfig, it could look like this: public class YourAppConfig : AppConfig { public YourAppConfig() : base() { } [AppConfig(AfterBootstrap = true)] public CryptoAppConfig? Crypto { get; set; } } await AppConfig.LoadAsync<YourAppConfig>(); NOTE: If you use the CompressionAppConfig also, it should be applied before the CryptoAppConfig by defining a Priority in the AppConfigAttribute. In the config.json in your app root folder: { \"Crypto\":{ ... } } Anyway, you could also place and load a CryptoAppConfig in any configuration which supports using that custom type. Crypto suite You can use a CryptoOptions instance as crypto suite. The type can be binary serialized (using the Stream-Serializer-Extensions) for storing/restoring to/from anywhere. NOTE: Only crypto suite relevant information will be serialized! This excludes: SerializerVersion HeaderVersion PrivateKeystore (needs to be stored in another place; a default can be set in DefaultPrivateKeysStore) PrivateKeyRevision (will be managed automatic) PrivateKey (needs to be stored in another place) CounterPrivateKey (needs to be stored in another place) PublicKey CounterPublicKey KeyExchangeData PayloadData Time LeaveOpen MacPosition Mac HeaderProcessed Password MacPassword Tracer Tag Also delegates won't be serialized. PKI Using the AsymmetricSignedPublicKey type, you can implement a simple PKI, which allows to define trusted root keys define a key revocation list sign public keys validate signed public keys until the root signer key // Create the root key pair using ISignaturePrivateKey privateRootKey = AsymmetricHelper.CreateSignatureKeyPair(); // Self-sign the public root key using AsymmetricSignedPublicKey signedPublicRootKey = new(privateRootKey.PublicKey); signedPublicRootKey.Sign(privateRootKey); // Create a key pair, which will be signed, and a signing request using ISignaturePrivateKey privateKey = AsymmetricHelper.CreateSignatureKeyPair(); using AsymmetricPublicKeySigningRequest signingRequest = new(privateKey.PublicKey); // Sign the public key using AsymmetricSignedPublicKey signedPublicKey = signingRequest.GetAsUnsignedKey(); signedPublicKey.Sign(privateRootKey); // Setup the PKI (minimal setup for signed public key validation) AsymmetricSignedPublicKey.RootTrust = // Normally you would have a DBMS which stores the trusted public key IDs (id) => id.SequenceEqual(privateRootKey.ID); AsymmetricSignedPublicKey.SignedPublicKeyStore = (id) => { // Normally you would have a DBMS which stores the known keys if(id.SequenceEqual(privateRootKey.ID)) return signedPublicRootKey; if(id.SequenceEqual(privateKey.ID)) return signedPublicKey; return null; }; // Normally you would have a DBMS which stores a revocation list for AsymmetricSignedPublicKey.SignedPublicKeyRevocation // Validate the signed public key signedPublicKey.Validate(); As you can see, it's a really simple PKI implementation. It's good for internal use, and if there won't be too many keys to manage. For managing a larger amount of keys, you can use the SignedPkiStore: using SignedPkiStore pki = new(); pki.AddTrustedRoot(signedPublicRootKey); pki.AddGrantedKey(signedPublicKey); pki.EnableLocalPki(); By calling EnableLocalPki all PKI callbacks in AsymmetricSignedPublicKey will be set with methods from the SignedPkiStore instance. This allows signed key and signature validations using your PKI. The GetKey methods will find the hosted key with the given ID of the public key. The PKI may also host revoked keys. By revoking a key, it'll be removed from the trusted root/granted key tables, and GetKey will throw on key request. Signed attributes and other PKI extensions The signed attributes are fully customizable and not pre-defined at all, you're the designer of your own PKI implementation. In order you want some inspiration and ideas, you may have a look at the SignedAttributes class, wich contains some examples/suggestions for signed attributes and their names. Name Usage Domain PKI domain name to identify/validate the keys PKI OwnerId Foreign owner ID for loading meta data from a store (should be encrypted by the PKI host) KeyValidationUri URI that should point to a RESTful API for online key revokation validation GrantedKeyUsages Allowed usages for the signed key PkiSig Permitted to sign sub-keys KePublicKey Identifier of the public key for the key exchange with the owner KePublicCounterKey Identifier of the public counter key for the key exchange with the owner SigPublicKey Identifier of the public signature key of the owner SigPublicCounterKey Identifier of the public signature counter key of the owner CipherSuite Serialized CryptoOptions to use with the signed key owner Serial Serial number (the key revision of the owner context) Some key meta data like the creation and expiration time, or a nonce, is included in a lower level in the AsymmetricSignedPublicKey already, and don't need to appear in the signed attribute list again. A key signing request may also contain more attributes than the final signed key, if you want to give signing instructions to the PKI. The PKI may remove/replace/extend those instructions for signing. As said before, the list above doesn't need to be implemented fully, and it may be extended with any attribute that your PKI requires in addition. There are only suggestions for value formats - but how you implement it finally, is your business only. If you implement the suggested attributes and value formats, you'll have a fully usable PKI. In addition a key revokation list would be a nice feature (as a part of a RESTful PKI API). For a trusted root key list you could use the PublicKeySuiteStore, for example. A key revokation list may only contain the IDs of revoked keys, which are not yet expired. You can use the AsymmetricKeySigner as template for a key signing request handler, which supports the attributes from above. You should implement algorithm validation etc. for a key signing request by yourself, since such requirements are not really good to match with a basic API. For validating the signed attributes of a signing request or a signed key, you can use the SignedAttributes.Validate(Async) methods. Using the SignedAttributes.ValidationOptions you can specify common restrictions for the above listed default attributes. The validation will be executed also, if AsymmetricSignedPublicKey.Validate(Async) was called. For additional attribute validations you can set SignedAttributes.AdditionalValidation(Async) handlers. If no public key suite store was given, key exchange/signature keys will be looked up in the PKI, which was given in the options (CryptoEnvironment.PKI is being used per default). Key ring The KeyRing type can store these key types: Symmetric key (a byte sequence) Asymmetric key Key suite Key suite store PAKE record PAKE record store PKI In addition different CryptoOptions can be stored to a name. Every key will be stored with a unique name, which is required to get the key later: // Create a new key ring using KeyRing keys = new(); // Add a key if(!keys.TryAdd(\"name\", anyKey)) throw new Exception(\"Key exists already\"); // Get a key if(!keys.TryGetSymmetric(\"name\", out anyKey)) throw new Exception(\"Key not found\"); // Encrypt/decrypt byte[] keyBytes = keys.Encrypt(secret); // Can be restored using `KeyRing.Decrypt(keyBytes, secret)` Adding, updating, getting, removing keys and encryption is thread safe. The static MaxCount and MaxSymmetricKeyLength properties limit the max. number of stored keys and the max. symmetric key length in bytes. A key name is limited to 255 characters. NOTE: If a key ring uses algorithms or types which are not available in a deserializing context, it can't be restored anymore! In order to ignore unusable keys during deserialization use the constructor which takes ignoreSerializationErrors and set the value to true: using KeyRing keys = new(ignoreSerializationErrors: true); int serializerVersion = stream.ReadSerializerVersion(); ((IStreamSerializer)keys).Deserialize(stream, serializerVersion); It's assumed that stream contains the decrypted key ring serialization data already. NOTE: Only type/algorithm incompatibilities will be ignored by skipping the stored object. Serialized structure errors will still throw. PAKE Pake (see tests) can be used for implementing a password authenticated key exchange, which should be wrapped with a PFS protocol in addition. PAKE uses symmetric cryptographic algorithms only and uses random bytes for session key generation. After signup, it can be seen as a symmetric PFS protocol, if the random bytes are random for each session and never stored as communicated between the peers. CAUTION: PAKE doesn't support counter algorithms! For working with PQ counter algorithms, you'll have to combine two PAKE with different options by yourself. NOTE: For PAKE both peers need to use the same KDF and MAC options. If the algorithm is going to be changed, a new signup has to be performed. In case a peer changes its authentication (identifier or key), a new signup operation has to be performed, too. A signup should always be performed using an additional factor, which was communicated using another transport. An authentication may use a second factor, while it's recommended to use at last two factors for each operation. PAKE allows single directional authenticated messages and should be performed bi-directional for a bi-directional communication, if possible. While a MAC can be computed fast, KDF needs time. During a PAKE handshake both algorithms are used on both peers. But the server will perform KDF only after a MAC was validated, which closes a door for DoS attacks by an anonymous attacker. NOTE: Default options for PAKE can be overridden by setting a custom value to Pake.DefaultOptions. FastPakeClient/Server allow fast followup authentications after the first authentication of an already known peer (after a signup was performed). They're designed to be alive for a longer time, if the server expects a client to perform multiple authentications. They're good for a single-directional UDP protocol, for example, where each message is PAKE authenticated, and each followup message is encrypted using the session key of the first authentication message. NOTE: This PAKE implementation is patent free! PAKE with http requests PAKE can encrypt http messages and provide an additional authentication to a JWT. Benefits of encrypting http messages: additional authentication to JWT Perfect Forward Secrecy (PFS) encryption for every single http request nothing from the request can be sniffed from a man in the middle (MiM) the request can't be repeated in another authentication context you can implement replay attack avoiding measures by denying the same random data (from the PAKE authentication object) within a timespan The final http method, request path, headers and body are completely hidden to any attacker who may be able to sniff your network traffic. Also in a client browser the developer tools won't show any request details, which is perfect in a WASM app to hide even your servers API effectively. Of course processing each request and response with PAKE has an overhead, especially when using compression, too. Example client code: using PakeHttpRequestFactory factory = new(username, password); using PakeRequest request = await factory.CreateRequestAsync( new(\"https://domain.tld\"), HttpMethod.Get, \"/request/path\" ); // request.Request contains the http request message using PakeResponse response = await httpResponseMessage.GetPakeResponseAsync(request.Key); // response.Response contains the decoded PAKE response, response.Body.CryptoStream the response stream response.Response.EnsureSuccessStatusCode(); The server needs to process messages, too, of course. This part isn't included within this library and does vary depending on the webserver. Client/server authentication protocol Asymmetric keys + PAKE wan24-Crypto implements a client/server authentication protocol for stream connections (like a TCP NetworkStream). This protocol allows server public key request signup authentication while all features are optional. It implements Zero Knowledge Password Proof (ZKPP) and Perfect Forward Secrecy (PFS). During a signup an asymmetric public key of the client can be signed by the server for long term use. The authentication is encrypted using (hopefully pre-shared) server public keys and PFS keys PAKE If the public servers keys are not pre-shared, a PKI should be used to ensure working with valid keys. See the tests (Auth_Tests.cs) for an example of a simple but working client/ server implementation. On signup, the server needs to store the PAKE identity and the clients public keys, which then need to be provided for a later authentication process. The ClientAuthContext has all the information required to handle a signup or an authentication, and it contains the exchanged PFS session key for encrypted communication, too. For optimal security (in 2023), you should use an asymmetric PQC algorithm for the key exchange and signature key, and a common non-PQC algorithm as counter key exchange and signature key. You can find asymmetric PQC algorithms in the wan24-Crypto-BC library, for example. NOTE: Login username and password won't be communicated to the server. If any authentication related information changes, a follow-up signup needs to be performed. The signup process (as seen from the client; is bi-directional always): Send the clients public PFS key Start encryption using the servers public key and a private PFS key of the client Send the clients public counter PFS key Extend the encryption using the servers public counter key and a private PFS key of the client Send the PAKE signup request and extend the encryption using the PAKE session key (the request contains the public key suite and a key signing request, if this is the signup of a new user, or the public key suite changed) Sign the authentication sequence using the private client key Validate the server signature of the authentication sequence Receive the servers public PFS key Extend the encryption using the private key and the servers public PFS key Receive the servers public counter PFS key Extend the encryption with the PFS key computed using the private PFS keys and the servers public PFS keys Get the signed public client key Sign the public key suite including the signed public key and store the private and public key suites NOTE: The PAKE authentication allows to attach any payload, which enables the app to extend the process with additional meta data as required. A later authentication process (as seen from the client; may be uni- directional): Send the clients public PFS key Start encryption using the servers public key and a private PFS key of the client Send the clients public counter PFS key Extend the encryption using the servers public counter key and a private PFS key of the client Send the PAKE authentication request and extend the encryption using the PAKE session key Sign the authentication sequence using the private client key For a bi-directional communication channel in addition: Validate the server signature of the authentication sequence Receive the servers public PFS key Extend the encryption using the private key and the servers public PFS key Receive the servers public counter PFS key Extend the encryption using the PFS key computed using the private PFS keys and the servers public PFS keys WARNING: An uni-directional connection does use a PFS key, but this key is being applied on a pre-shared long term key only. NOTE: Since a temporary client like a browser may not be able to store the private client keys, such a client may only use the signup and not send a key signing request. Then the server is required to identify the authenticating client using the PAKE identifier (not the public key ID). In total at last three session keys are being exchanged during a request (six session keys for bi-directional communication). The first two keys are pseudo- PFS keys, while the third key is the PAKE session key. Each part of the authentication sequence will be encrypted using the latest exchanged session key (encryption does change each time a new session key can be derived at the server). NOTE: The encryption key will always be extended by the next derived key, but not replaced. To avoid replay-attacks, the server should implement methods to deny re-using PFS keys or random byte sequences. A timestamp validation is implemented already (which defaults to a maximum time offset of 5 minutes to the clients system time). So the server should ensure, that a (pseudo-)PFS key or random byte sequence can't be re-used within five minutes after it was received from a client. NOTE: The long term client key exchange keys can be used for encrypting an off-session peer-to-peer message. They're not used for signup/authentication. Things that must be known in advance are the used algorithms, while the PFS keys use the public server keys algorithms and key sizes. But these algorithms must be pre-defined in both (client and server) apps anyway: Hash algorithm MAC algorithm KDF algorithm Encryption algorithm (and other CryptoOptions settings for encryption) CAUTION: The chosen encryption algorithm must not require MAC authentication (while built-in MAC authentication like with AEAD is ok). You can find a stream cipher in the wan24-Crypto-BC library, for example. The encryption settings shouldn't use KDF to avoid too much overhead (KDF will be used for PAKE already). PAKE authentication only Quiet different from the \"Asymmetric keys + PAKE\" authentication protocol, there is another implementation, which uses PAKE only. See the tests (PakeAuth_Tests.cs) for an example of a simple but working client/server implementation. This protocol allows signup authentication while all features are optional. It implements Zero Knowledge Password Proof (ZKPP) and Perfect Forward Secrecy (PFS). CAUTION: At last the signup communication is required to be wrapped with a PFS protocol! Use a TLS socket, for example. A later authentication may be performed using a raw socket. During the signup the server will respond a random signup to the client. The produces PAKE values need to be stored on both peers for later authentication. WARNING: This authentication protocol doesn't support the use of a pre- shared key for the signup. This clearly opens doors for a MiM attack during the signup: If the signup communication was compromised, the attacker will be able to authenticate successful later! It's absolutely required to use a wrapping PFS protocol which ensures the server identity, before sending any signup information. For authentication, the client sends the identifier of the servers PAKE values, which have been pre-shared during the signup. Using random bytes a temporary session key will be calculated and used to send the PAKE authentication request. The temporary session key will then be extended using the now fully exchanged PAKE session key. NOTE: The authentication may use a raw socket, while a wrapping PFS protocol is of course never a mistake. However, if using raw sockets, a MiM is able to know who is authenticating, because the servers random PAKE identifier needs to be sent plain (and this value won't change, if not forced). Things that must be known in advance are the used algorithms, which must be pre-defined in both (client and server) apps: MAC algorithm KDF algorithm Encryption algorithm (and other CryptoOptions settings for encryption) CAUTION: The chosen encryption algorithm must not require MAC authentication (while built-in MAC authentication like with AEAD is ok). You can find a stream cipher in the wan24-Crypto-BC library, for example. The encryption settings shouldn't use KDF to avoid too much overhead (KDF will be used for PAKE already). In total this authentication may be a good choice for use with fixed client devices, which are able to store the servers PAKE values in a safe way for the long term. But also temporary devices may benefit, if they'll connect to a server multiple times. Random number generator You can use RND as a random data source. RND is customizable and falls back to RandomNumberGenerator from .NET. It uses /dev/random as data source, if available. byte[] randomData = RND.GetBytes(123); NOTE: /dev/random may be too slow for your requirements. If you don't want to use RandomDataGenerator (which can speed up RND a lot), you can disable /dev/random: RND.UseDevRandom = false; NOTE: In case you want to force using /dev/random ONLY: RND.RequireDevRandom = true;// This will cause RND to throw on Windows! The RandomDataGenerator is an IHostedService which can be customized, but falls back to RND per default. The service uses a buffer to pre-buffer random data, in case your RNG is slow. It's possible to define custom fallbacks which are being used in case the buffer doesn't have enough data to satisfy a request. If you use a RandomDataGenerator, you can set the instance to RND.Generator to use it per default. The full generator process is: Try reading pre-buffered random data If not satisfied, call the defined fallback RNG delegates (RND methods are preset) Default RND methods use RandomNumberGenerator, finally Each step in this process can be customized in RND AND RandomDataGenerator, while the defaults of RandomDataGenerator fall back to RandomStream and RND, and the methods of RND use RND.Generator or fall back to RandomNumberGenerator. To simplify that and avoid an endless recursion in your code: DO NOT call RND.Get/FillBytes(Async) from a customized RandomDataGenerator! DO call RND.DefaultRng(Async) instead. If you use the plain RandomDataGenerator, it uses the RandomStream as random data source, if /dev/random isn't available or disabled. (RandomStream uses RandomNumberGenerator, finally.) There's another Rng type, which is a RandomNumberGenerator implementation that skips the OS random number generator implementation and uses RND instead (also the static methods of RandomNumberGenerator are overridden). The RngHelper extends any RandomNumberGenerator instance with a GetInt32 method (which applies to customized Rng instances, too, since they extend RandomNumberGenerator). NOTE: Rng implements non-zero random number generation. However, any non- zero random byte sequence isn't as random as it could be anymore - keep that in mind. To sum it up: Use RND for (optional customized) getting cyptographic random bytes. You can use SecureRandomStream.Instance, too (it uses RND on request). Use Rng as (also asynchronous) random integer generator, or where a RandomNumberGenerator instance is required. CAUTION: True randomness is the most important source of security for any crypto application. PRNG and CSRNG random sources, and even physical phenomen based hardware random sources won't produce true random, and/or can be manipulated in some way to produce predictable random data, unless it's a QRNG source. Seeding Use the RND.AddSeed(Async) methods for seeding your RNG. The AddDevRandomSeed(Async) only seed /dev/random, while when calling AddSeed(Async), the method will try to seed the RND.SeedConsumer the RND.Generator /dev/random and return after providing the seed to the first available target, or when there's no target for consuming the seed. CAUTION: Be aware of the patent US10402172B1! Seeding automatic A seedable RNG (ISeedableRng) can be seeded automatic using received IV bytes received cipher data received random bytes CAUTION: Even if it's extremely unlikely, an untrusted seed source may be able to cause a RNG to produce predictable random data, unless it combines QRNG entropy. To enable automatic seeding, set the seed source flags to RND.AutoRngSeeding. Per default the RND.Generator will be seeded, unless you specify another seed target in RND.SeedConsumer. A seed consumer needs to implement the ISeedableRng interface, which RandomDataGenerator does, for example. Seeding during encryption can be overridden using CryptoOptions.RngSeeding. Seeding during PAKE authentication can be overridden using the given options for encryption. When deserializing the SignatureContainer embedded signed data, the nonce will be seeded, if RND.AutoRngSeeding has the Random flag. Because seeding may be synchronized, there's a RngSeederQueue queue worker, which is a simple hosted service that seeds the given target ISeedableRng in background, using a copy of the given seeds. The RngSeederQueue may be customized easily by extending the type (pregnant methods are virtual). CAUTION: Be aware of the patent US10402172B1! Some words on secure seeding A PRNG isn't enough, and even a CSRNG isn't enough, if the RNG's seed is not good. Modern OS CSRNG implementations use hardware and software environment information like system clock IP stack I/O timings temperature sensors values environment sounds harddisc values user information digest process ID thread ID ...and so on. But this still isn't really good, because all sources can be manipulated and/or predicted. The only really good seed source is a quantum device which is used by a QRNG. But not everyone has access to a QRNG, and the hardware is expensive, too. A company may decide to buy a QRNG hardware, which is a good investment in 2023, since quantum computing resources are becoming available to anyone now, and the development speed is really amazing (and will speed up more with the also fast growing AI possibilities!). But a private person might run into problems, unless there's a free QRNG seed source available online, hopefully for free. It'll take some time until enduser systems will contain a chip which can produce QRNG sequences on the local mashine, and isn't too expensive, so everyone can afford to own one. Anyway, when using a CSRNG, finally, it should be re-seeded as often as possible, because if a CSRNG output is being collected over a time, and the underlaying algorithm is known, the future output becomes predictable - and this is something you'd like to avoid as good as possible. There are several steps that you should implement fully, if possible in any way: Use a PRNG and seed it with CSRNG data from the operating system Wrap the PRNG with a CSRNG which uses an underlaying stream cipher to encrypt the PRNG's random data stream Re-seed the PRNG as often as possible using at last CSRNG data from the operating system, and if possible in combination with entropy from a QRNG Of course the best solution would be to use a QRNG instead of a PRNG in step 1, because then you wouldn't need to re-seed usually. But step 2 is important in all cases, please don't miss it! A good practice is to combine multiple entropy sources, at last for seeding, but also for the RNG's output, which you're going to use for symmetric keys (DEK), for example. If you carefully red and understood this information, you should get quiet good results with a CSRNG already, even you don't have access to a quantum entropy source. The wan24-Crypto and wan24-Crypto-BC libraries should offer everything a C# developer needs for a better random number source. NOTE: Even the best PQC algorithm will fail when not using a good RNG! Entropy monitoring The (Disposable)EntropyMonitor can monitor the entropy of produced RND and enforce a minimum required entropy using available algorithms from EntropyHelper. The monitor simply wraps an IRng for this and adds entropy checks for produced RND before returning. CAUTION: If you didn't set a MaxRetries value larger than zero, a wrong EntropyHelper configuration could cause system exhaustion when RND was requested. Password post-processing An entered user password may be easy to break using brute force. For this reason it's recommended to apply at last KDF on the raw password. The PasswordPostProcessor base type allows to create a reuseable post-processor, which can also be used for pre-processing an encryption password. PasswordPostProcessorChain does apply a chain of PasswordPostProcessor in sequential order. The PasswordPostProcessor.Instance is a ready-to-use post-processor, which does these steps for processing a password: apply KDF apply a counter KDF, if configured compute a MAC, if configured For a fully customized processing you can use the static DefaultPasswordPostProcessor.ProcessPwd method, which allows giving the processing options to use as an argument. You're free to set your own default processor to PasswordPostProcessor.Instance (which will be used when calling WithEncryptionPasswordPreProcessing on CryptoOptions without any argument values). The CryptoEnvironment.Options have a property PasswordPostProcessors for storing password post-processor instances which are used to build a PasswordPostProcessorChain, which will be set to PasswordPostProcessor.Instance. If the property UsePasswordPostProcessorsInCryptoOptions was set to true, its methods will be set to CryptoOptions.DefaultEncryptionPassword(Async)PreProcessor. For the CryptoAppConfig it's the same logic, except that you need to define the CLR type names including namespace to the PasswordPostProcessors property. The password post-processors need a parameterless constructor in order to be able to be used in this context. Object encryption By using the DekAttribute and EncryptAttribute (and optional the IEncryptProperties interface) you can en-/decrypt objects with the ObjectEncryption helper methods/extensions: public class YourType : IEncryptProperties { [Dek] public byte[] Dek { get; set; } = null!; [Encrypt] public byte[] Raw { get; set; } = null!; } NOTE: null values won't be en-/decrypted! Using the IEncryptPropertiesExt interface your object can define en-/decryption handler methods. The Dek will hold a random data encryption key, while all properties having the Encrypt attribute will be encrypted using that DEK: YourType obj = new() { Raw = ... }; obj.EncryptObject(kek); NOTE: The real object type will be used for finding properties to process, not the generic method argument of EncryptObject and DecryptObject. The kek holds the key, which is used for the DEK encryption. Use DecryptObject for decryption. The DekAttribute and EncryptAttribute can be extended to override the methods that are used to get/set values. The rules for the used keys are simple: If you have a Dek property, it'll be used to store a KEK encrypted random DEK (which will be (re-)generated for each encryption) If you don't have a Dek property, you'll need to specify the DEK in the method parameters (and of course no KEK parameter value is required) Automatic key ecryption key providing Implement the IEncryptPropertiesKek interface for automatic key encryption key (KEK) providing. The object needs to implement a data encryption key (DEK) property with a DekAttribute. Then you can use the AutoEn/DecryptObject extension methods. Notes Sometimes you'll read something like \"will be disposed\" or \"will be cleared\" in the documentation. These are important diclaimers, which should be respected in order to work safe with sensitive data. WARNING: The disclaimer may be missing in some places! Will be disposed When noted to a given value, it'll be disposed after the desired operation, or when the hosting object is being disposed. When noted to a returned value, and you don't want to use the value only for a short term (during the hosted value wasn't disposed for sure), you should consider to create a copy. The hosting object will dispose the value, when it's being disposed. Should be disposed This is a disclaimer that reminds you to dispose a returned value after use. Will be cleared When noted to a given value, it'll be cleared after the desired operation, or when the hosting object is being disposed/cleared. When noted to a returned value, and you don't want to use the value only for a short term (during the hosted value wasn't disposed/cleared for sure), you should consider to create a copy. The hosting object will clear the value, when it's being disposed/cleared. Should be cleared This is a disclaimer that reminds you to clear a returned value after use. For this usually you can use the Clear or Clean (extension?) method of the value. (In case of Memory<T> or Span<T> it's Clean, because Clear is used to zero out the value already, while Clean will fill it with random bytes before.) Algorithm IDs Internal each algorithm has an unique ID within a category: Asymmetric cryptography Symmetric cryptography Hashing MAC KDF If you'd like to implement inofficial algorithms on your own, please use the ID bits 24-32 only to avoid possible collisions with official libraries! These are the official implementation IDs (not guaranteed to be complete): Algorithm ID Library Asymmetric cryptography ECDH 0 wan24-Crypto ECDSA 1 wan24-Crypto CRYSTALS-Kyber 2 wan24-Crypto-BC CRYSTALS-Dilithium 3 wan24-Crypto-BC FALCON 4 wan24-Crypto-BC SPHINCS+ 5 wan24-Crypto-BC FrodoKEM 6 wan24-Crypto-BC NTRUEncrypt 7 wan24-Crypto-BC Ed25519 8 wan24-Crypto-BC Ed448 9 wan24-Crypto-BC X25519 10 wan24-Crypto-BC X448 11 wan24-Crypto-BC XEd25519 12 wan24-Crypto-BC XEd448 13 wan24-Crypto-BC Streamlined NTRU Prime 14 wan24-Crypto-BC BIKE 15 wan24-Crypto-BC HQC 16 wan24-Crypto-BC Picnic 17 wan24-Crypto-BC Symmetric cryptography AES-256-CBC 0 wan24-Crypto ChaCha20 1 wan24-Crypto-BC XSalsa20 2 wan24-Crypto-BC AES-256-GCM 3 wan24-Crypto-BC XCrypt 4 (none) Serpent 256 CBC 5 wan24-Crypto-BC Serpent 256 GCM 6 wan24-Crypto-BC Twofish 256 CBC 7 wan24-Crypto-BC Twofish 256 GCM 8 wan24-Crypto-BC Hashing MD5 0 wan24-Crypto SHA-1 1 wan24-Crypto SHA-256 2 wan24-Crypto SHA-384 3 wan24-Crypto SHA-512 4 wan24-Crypto SHA3-256 5 wan24-Crypto SHA3-384 6 wan24-Crypto SHA3-512 7 wan24-Crypto Shake128 8 wan24-Crypto Shake256 9 wan24-Crypto MAC HMAC-SHA-1 0 wan24-Crypto HMAC-SHA-256 1 wan24-Crypto HMAC-SHA-384 2 wan24-Crypto HMAC-SHA-512 3 wan24-Crypto HMAC-SHA3-256 4 wan24-Crypto HMAC-SHA3-384 5 wan24-Crypto HMAC-SHA3-512 6 wan24-Crypto TPMHMAC-SHA-1 7 wan24-Crypto-TPM TPMHMAC-SHA-256 8 wan24-Crypto-TPM TPMHMAC-SHA-384 9 wan24-Crypto-TPM TPMHMAC-SHA-512 10 wan24-Crypto-TPM KDF PBKDF#2 0 wan24-Crypto Argon2id 1 wan24-Crypto-NaCl SP 800-108 HMAC CTR KBKDF 2 wan24-Crypto PAKE has no algorithm ID, because it doesn't match into any category (there is no PAKE multi-algorithm support implemented), and it's a key exchange protocol - but not a cryptographic algorithm. Counter algorithms A counter algorithm is being applied after the main algorithm. So the main algorithm result is secured by the counter algorithm result. You can use this in case you want to double security, for example when using post quantum algorithms, which may not be trustable at present. The HybridAlgorithmHelper allows to set default hybrid algorithms for key exchange in KeyExchangeAlgorithm signature in SignatureAlgorithm KDF in KdfAlgorithm MAC in MacAlgorithm and exports some helper methods, which are being used internal during encryption (you don't need to use them unless you have to). If you want the additional hybrid algorithms to be used every time, you can set the EncryptionHelper.UseHybridOptions AsymmetricHelper.UseHybridKeyExchangeOptions AsymmetricHelper.UseHybridSignatureOptions to true to extend used CryptoOptions instances by the algorithms defined in the HybridAlgorithmHelper properties. WARNING: The HybridAlgorithmHelper counter MAC implementation isn't really good - it's only a trade-off to gain compatibility and performance. You should consinder to create a counter MAC from the whole raw data manually, if possible, instead. Post quantum safety Some of the used cryptographic algorithms are quantum safe already, but especially the asymmetric algorithms are not post quantum safe at all. If you use an extension library which offers asymmetric post quantum safe algorithms for key exchange and signature, you can enforce post quantum safety for all used default algorithms by calling CryptoHelper.ForcePostQuantumSafety. This method will ensure that all used default algorithms are post quantum safe. In case it's not possible to use post quantum algorithms for all defaults, this method will throw an exception. NOTE: AES-256, and SHA-384+, SHA3 and Shake128/256 (and HMAC-SHA-384+ and HMAC-SHA3-*) are considered to be post quantum-safe algorithms, while currently no post quantum-safe asymmetric algorithms are implemented in this main library (wan24-Crypto-BC does implement some), since .NET doesn't offer any API (this may change with coming .NET releases). NOTE: While SHA3 and Shake128/256 (KECCAK) was designed for post quantum safety, AES-256 and SHA-384+ (SHA2) wasn't and is only considered to be post quantum safe because of its key/output length (this also applies to the HMACs). While the post quantum safety of SHA3 and Shake218/256 should stay stable, key/output length based considerations may be reconsidered from time to time, based on the recent quantum computing capabilities available. Disclaimer wan24-Crypto and provided sub-libraries are provided \"as is\", without any warranty of any kind. Please read the license for the full disclaimer. This library uses the available .NET cryptographic algorithms and doesn't implement any \"selfmade\" cryptographic algorithms. Extension libraries may add other well known third party cryptographic algorithm libraries, like Bouncy Castle. Also \"selfmade\" cryptographic algorithms may be implemented as extensions."
  }
}